= Git User's Survey 2007 summary =

This is (partial) summary of Git User's Survey 2007,
ending at state from 28 September 2007
(response ident `46f95167c967b`).

The survey could be found there
* [http://www.survey.net.nz/survey.php?94e135ff41e871a1ea5bcda3ee1856d9 Git User's Survey 2007] at [http://www.survey.net.nz survey.net.nz] (closed)

You can get raw data on which this summary is based here:
* [http://git.or.cz/gitwiki/GitSurvey2007?action=[[AttachFile]]&do=get&target=surveydata.csv surveydata.csv]

There were 683 individual responses.<<BR>>
Note that count is not exactly number of people.

----
<b>Table of contents:</b>
<<<!-- ! TOC here -->(3)>>
----

== About you ==

=== 00. Date of response ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Date (extended range)          
|  Count 
|  Perc. 
| 
|-
|  Before                         
|      7 
|   1.0% 
| 
|-
|  During                         
|    584 
|  85.5% 
| 
|-
|  After                          
|     92 
|  13.5% 
| 
|}
<!-- ## table end
 -->

The ranges 'before', 'during' and 'after' refers to official duration of Git User's Survey 2007, from 20 August 2007 to 10 September 2007. Actually they are corrected to take into account the fact that local date on survey's server (or UTC date) might be different from local date on user computer, so duration of survey is taken as from 2007-08-19 to 2007-09-11.

Most responses are from the start of survey, 20 and 21 August (133 and 103 responses respectively).  If anyone is interested I can provide full date by date histogram. 

=== 01. What country are you in? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  Algeria                        
|  1   
| 
|-
|  Argentina                      
|  3   
| 
|-
|  Australia                      
|  25  
| 
|-
|  Austria                        
|  9   
| 
|-
|  Belgium                        
|  5   
| 
|-
|  Brazil                         
|  20  
| 
|-
|  Bulgaria                       
|  1   
| 
|-
|  Canada                         
|  44  
| 
|-
|  Chile                          
|  2   
| 
|-
|  China                          
|  4   
| 
|-
|  Colombia                       
|  2   
| 
|-
|  Czech Republic                 
|  10  
| 
|-
|  Denmark                        
|  7   
| 
|-
|  Ecuador                        
|  1   
| 
|-
|  Estonia                        
|  1   
| 
|-
|  European Union                 
|  1   
| 
|-
|  Finland                        
|  23  
| 
|-
|  France                         
|  36  
| 
|-
|  Germany                        
|  64  
| 
|-
|  Greece                         
|  3   
| 
|-
|  Hungary                        
|  2   
| 
|-
|  India                          
|  13  
| 
|-
|  Ireland                        
|  2   
| 
|-
|  Israel                         
|  6   
| 
|-
|  Italy                          
|  14  
| 
|-
|  Japan                          
|  4   
| 
|-
|  Jersey                         
|  1   
| 
|-
|  Latvia                         
|  1   
| 
|-
|  Malaysia                       
|  1   
| 
|-
|  Mexico                         
|  1   
| 
|-
|  Netherlands                    
|  15  
| 
|-
|  New Zealand                    
|  5   
| 
|-
|  Norway                         
|  14  
| 
|-
|  Philippines                    
|  3   
| 
|-
|  Poland                         
|  6   
| 
|-
|  Portugal                       
|  2   
| 
|-
|  Puerto Rico                    
|  1   
| 
|-
|  Romania                        
|  1   
| 
|-
|  Russian Federation             
|  6   
| 
|-
|  Samoa                          
|  1   
| 
|-
|  Serbia                         
|  1   
| 
|-
|  Singapore                      
|  2   
| 
|-
|  Slovak Republic                
|  1   
| 
|-
|  Slovenia                       
|  2   
| 
|-
|  South Africa                   
|  4   
| 
|-
|  Spain                          
|  11  
| 
|-
|  Sri Lanka                      
|  1   
| 
|-
|  Sweden                         
|  14  
| 
|-
|  Switzerland                    
|  15  
| 
|-
|  UK / US                        
|  1   
| 
|-
|  United Kingdom                 
|  40  
| 
|-
|  United States of America       
|  218 
| 
|-
|  Venezuela                      
|  1   
| 
|-
|  Vietnam                        
|  1   
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|  673 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|  673       
| 
|}

England and Scotland counts as United Kingdom here.  UK / US probablu means United Kingdom (Great Britain) or United States of America.  Table is sorted in alphabetical order.

As one can easily see, slightly less than third of GIT users are in the USA (those who answered this survey).

=== 02. What is your preferred non-programming language? ===

This is multiple answers question, although most people gave only one preferred language.

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  Afrikaans                      
|  1   
| 
|-
|  Bulgarian                      
|  1   
| 
|-
|  Castellano                     
|  2   
| 
|-
|  Catalan                        
|  1   
| 
|-
|  Chinese                        
|  2   
| 
|-
|  Czech                          
|  10  
| 
|-
|  Danish                         
|  6   
| 
|-
|  Dutch                          
|  12  
| 
|-
|  English                        
|  416 
| 
|-
|  Finnish                        
|  16  
| 
|-
|  French                         
|  33  
| 
|-
|  Galician                       
|  1   
| 
|-
|  German                         
|  58  
| 
|-
|  Greek                          
|  2   
| 
|-
|  Hebrew                         
|  1   
| 
|-
|  Hungarian                      
|  3   
| 
|-
|  Italian                        
|  9   
| 
|-
|  Japanese                       
|  1   
| 
|-
|  LSF (French sign language)     
|  1   
| 
|-
|  Norwegian                      
|  4   
| 
|-
|  Polish                         
|  5   
| 
|-
|  Portuguese                     
|  11  
| 
|-
|  Romanian                       
|  1   
| 
|-
|  Russian                        
|  13  
| 
|-
|  Serbian                        
|  1   
| 
|-
|  Slovenian                      
|  2   
| 
|-
|  Spanish                        
|  13  
| 
|-
|  Swedish                        
|  13  
| 
|-
|  Swiss                          
|  1   
| 
|-
|  Ukrainian                      
|  1   
| 
|-
|  Vietnamese                     
|  1   
| 
|}
<!-- ## ----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="border-top: dotted;"> invalid (computer language)    
|  37  
| 
|-
|  not understood                 
|  4   
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|  662 / 683   
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|  684         
| 
|}
<!-- ## table end
 -->

The question itself is not well formulated, as one can see from the number of answers with computer language, and "not understood" answers.  I am not native English speaker, but there were suggestions to use "natural language" instead of "non-programming language".

Around two third of git users prefer English language, at least for dealing with computers.

=== 03. How old are you? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  < 18                           
|  11   
| 
|-
|  18-21                          
|  75   
| 
|-
|  22-25                          
|  174  
| 
|-
|  26-30                          
|  203  
| 
|-
|  31-40                          
|  146  
| 
|-
|  41-50                          
|  45   
| 
|-
|  51-75                          
|  13   
| 
|-
|  76+                            
|  0    
| 
|}
<!-- ##------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|  667 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|  667       
| 
|}

Youngest git user who answered this survey is 14 years old, oldest is 74 years old. This is quite a span, I'd say,  The age of 25 got most count (51 answers).

=== 04. Which programming languages you are proficient with? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer                         
|  Count 
|  Perc. 
| 
|}
<!-- ##---------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  C                       
|    582 
|  85.2% 
| 
|-
|  shell                   
|    449 
|  65.7% 
| 
|-
|  Perl                    
|    244 
|  35.7% 
| 
|-
|  Python                  
|    316 
|  46.3% 
| 
|-
|  Tcl/Tk                  
|    26  
|   3.8% 
| 
|}
<!-- ##---------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|colspan="2" |   642 / 683   
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|colspan="2" |  1617         
| 
|}
<!-- ## table end
 -->

The choices include programming languages used by git.  This is multiple choice question (you can be proficient in more than one programming language).

It look like there is only around 3/4 people proficient in Perl as compared to Python; it looks like Python is more popular. C is most popular; shell is more popular than Perl or Python.  The fewest people are proficient in Tcl/Tk. I'm sorry, git-gui and gitk guys; it looks like not many developers... around 4% of git users.

You can check what are the contributions of each programming language to Git code at [http://www.ohloh.net/projects/278/analyses/latest Git Code Analysis at Ohloh].  In the table below there is shown state on November 2007 (there are also some lines / files I guess wrongly attributed to Assembly and DOS batch script):

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Language 
|  LoC [%] 
|  Perc. 
| 
|}
<!-- ##----------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  C/C++          
|  51% 
|  85.2% 
| 
|-
|  shell script   
|  28% 
|  65.7% 
| 
|-
|  Perl           
|  13% 
|  35.7% 
| 
|-
|  Tcl            
|   4% 
|   3.8% 
| 
|-
|  Python         
|   2% 
|  46.3% 
| 
|-
|  Emacs Lisp     
|   1% 
|        
| 
|-
|  CSS            
|  <1% 
|        
| 
|}
<!-- ##----------------------------------
 -->

== Getting started with GIT ==

=== 05. How did you hear about GIT? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  LKML<<[[FootNote]](LKML = Linux Kernel Mailing List)>>                           
|  109 
| 
|-
|  LWN (Linux Weekly News)        
|  39  
| 
|-
|  KernelTrap                   
|  15  
| 
|-
|  KernelTraffic                
|  1   
| 
|-
|  kernel.org                     
|  9   
| 
|-
|  freedesktop.org                
|  5   
| 
|-
|  Linus presentation at Google   
|  48  
| 
|-
|  Slashdot                       
|  28  
| 
|-
|  blog                           
|  19  
| 
|-
|  community site<<[[FootNote]](Community site are sites like Digg, Reddit and "planet" sites.)>>              
|  12  
| 
|-
|  news site                      
|  34  
| 
|-
| <-2>
| 
|-
|  searching Internet<<[[FootNote]](This includes answer of "Google")>>          
|  6   
| 
|-
|  other SCM / SCM research<<[[FootNote]](This includes some other SCM mailing list, VCS comparison, and searching for an SCM.)>>    
|  20  
| 
|-
|  Internet                       
|  32  
| 
|-
|  IRC                            
|  6   
| 
|-
| <-2>
| 
|-
|  Linux kernel uses it           
|  73  
| 
|-
|  some project uses git          
|  47  
| 
|-
| <-2>
| 
|-
|  developer by name<<[[FootNote]](Linus Torvalds, Carl Worth, Keith Packard, Randal Schwartz,...)>>           
|  21  
| 
|-
|  friend                         
|  39  
| 
|-
|  word of mouth                  
|  15  
| 
|-
|  work / coworker                
|  22  
| 
|-
| <-2>
| 
|-
|  initial GIT announcement       
|  12  
| 
|-
|  BitKeeper news               
|  24  
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="border-top: dotted;"> don't remember                 
|  13  
| 
|-
|  other / uncategorized          
|  44  
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                     
|  658 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)              
|  693       
| 
|}
<!-- ## table end
 -->

<b>Footnotes:</b>
<<[[FootNote]]>>

This was free-form question, and tabularizing answers was quite a work.  It is taken as multiple choice question (for example link to Linus presentation at Google found at Slashdot counts as both "Slashdot" and "Linus presentation at Google" answer).

Other / uncategorized includes for example GoogleTalk IM, 3 answers IIRC.  There was one answer of 'through the CPAN module' (?).

Note that [[GitLinks#head-057cdf07b6c4202733d061096c8ac1aef2f4a232:Linus Torvalds presentation]] at [http://video.google.com/videoplay?docid=-2199332044603874737 Google Videos] / [http://www.youtube.com/watch?v4XpnKHJAok8 YouTube] got it's own category, and generated quite a bit of git users.

=== 06. Did you find GIT easy to learn? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer                         
|  Count 
|  Perc. 
| 
|-
|  very easy                      
|     38 
|   5.6% 
| 
|-
|  easy                           
|    136 
|  19.9% 
| 
|-
|  reasonably                     
|    318 
|  46.6% 
| 
|-
|  hard                           
|    131 
|  19.2% 
| 
|-
|  very hard                      
|     33 
|   4.8% 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|colspan="2" |   656 / 683   
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|colspan="2" |   656         
| 
|}
<!-- ## table end
 -->

Nice gaussian curve. Most users find it reasonably easy to use. On the other hand git is not considered easy...

=== 07. What helped you most in learning to use it? ===

<b>TO DO (partial)</b><<BR>>
646 / 683 non-empty responses

Some of the responses:
* documentation (generic)
* man pages
* examples / usage cases in man pages
* everyday GIT, tutorials and user's manual
* wiki examples
* reading mailing list / comp.version-control.git
* people on IRC (not only #git)
* advice from other users / friends / colleagues
* (unofficial) documentation on the web: guides, articles, blogs etc. (Here probably should be a sublist of them, with count)
* a development community and/or its documentation, mailing list
   e.g. WINE wiki, Source Mage GNU/Linux development community
* Google (Google searches)
* helpful error messages
* source code, reading the parts of git in shell script
* cogito
* using git in a live project / experimenting / trial and error<<BR>><i>Example answer:</i>That I was able to just delete the entire repository and start over.  That all my mistakes stayed local and didn't affect upstream repos.
* working on an established project that had documented processes for using git
* writing code for both plumbing and Porcelain<<BR>> writing documentation / tutorial for project / article
* understanding the internal representation of the repository;<<BR} good / simple design, basic principles; understanding concepts
* experience of working in software industry;<<BR>> prior experience with version control systems (GNU Arch, SVN, BK, hg)
* version 1.5 
* gitk, qgit; git-gui

One of more interesting:
* We hired a consultant to give us a tutorial

=== 08. What did you find hardest? ===

<b>TO DO (partial)</b>
596 / 683 non-empty responses

Some of the responses:
* the level of complexity
* user interface: too much / inconsistent commands, too many / cryptic options; distinction between plumbing and porcelain; many ways to do a task; insufficient error messages; 'git <cmd> --help' prints manpage, not concise help summary
* obtuse command messages
* weak porcelain, e.g. git-update-index very central
* git-merge was plumbing
* remote / tracking branches; fetching, pushing and pulling, synchronizing repositories; the fact that push is not an opposite of pull; understanding the difference between committing and publishing
* handling multiple remote repositories
* merge vs rebase, deciding on proper workflow; working with topic branches; modifying a patch series
* merge defaults (which branch gets merged)
* git vs StGIT: slightly different merge conflict handling
* making it work in non-POSIX environments; working with git on case-insensitive and other strange filesystems; compiling on exotic OS, for example AIX; generating man pages
* lack of / bad / outdated / insufficient / badly structured docs; hard to find something in the documentation; git lingo in documentation, documentation for users who know git; using Cogito in some of documentation
* understanding of concepts, thinking in git way; understanding basic concepts and terminology
* distributed SCM concepts, paradigm shift; idea of non-linear history
* index (staging area): understanding, having it visible
* git-diff not showing added files
* commands named differently from equivalents in other SCM; differences from other SCM: git-commit needs '-a' to commit all; changes, strange semantics of git-add, multiple branches in repo; understanding terminology
* importing history from other SCM (bzr, svn)
* reverting changes, amending commit, undoing a commit
* keeping track of where am I, of which version I'm working with finding which branch the change was made on
* lerning to use it as maintainer; maintaining "perfect patch series", keeping history clean; rewritig history before 'git rebase -i'
* dealing with merge conflicts; figuring how to undo failed merge and restart it
* learning conventions git expects but didn't document clearly like commit message formatting
* setting up shared repo / shared server; setting up remote repository
* dealing with modified files (dirty tree) when switching branches, merging (pulling) and rebasing
* checking out past revisions (or tagged revisions) with the intention to return to newer revision
* creating independent branch, i.e. branch without ancestry
* exploring the history and previous versions of particular files, which are renamed and/or moved around, especially before '--follow' was added
* some hot-shot peple in the community (on the mailing list)
* setting up gitweb
* having to use CLI interface
* no <i>some language</i> documentation

More interesting answers:
* All idiosyncrasies that make (made) sense for Linus' workflow but aren't really orthogonal or predictable. 
* Listening to whiners complain about how hard it was to learn
* Thinking outside the narrow box defined by previous SCMs.
* Not having used an SCM before!
* Following the explosive growth of features.
* Having a day job taking most of my time away from git.
* Convincing my boss to use it.

Conclusions:
* some of the things got corrected, like separate remote layout being default for non-bare repositories, using [http://www.kernel.org/pub/software/scm/git/docs/git-add.html git-add] (porcelain) instead of [http://www.kernel.org/pub/software/scm/git/docs/git-update-index.html git-update-index] (plumbing) in documentation and command messages, promoting [http://www.kernel.org/pub/software/scm/git/docs/git-merge.html git-merge] to porcelain, creating [http://www.kernel.org/pub/software/scm/git/docs/git-remote.html git-remote] for managing multiple repositories and remote branches, better documentation including creating [http://www.kernel.org/pub/software/scm/git/docs/user-manual.html Git User's Manual].
* some things are hard because of historical reasons, such like naming of commands, or consistency of options, and would be difficult to change.
* doing things "git way", such as making index visible (and requiring 'git commit -a' to commit changes in all files), or rename detection instead of rename tracking, or storing filenames and file contents 'as-is' (without translation) are I think here to stay
* some of things are intrinsically hard, and would stay that way, for example the distributed SCM concept, or nonlinear history.

=== 09. When did you start using git? From which version? ===

<b>TO DO (partial)</b>

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer (version) 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  (no version string)            
|  165 
| 
|-
|  0.99x                          
|  26  
| 
|-
|  0.x                            
|  12  
| 
|-
|  1.0x                           
|  31  
| 
|-
|  1.1x                           
|  9   
| 
|-
|  1.2x                           
|  12  
| 
|-
|  1.3x                           
|  22  
| 
|-
|  1.4x                           
|  147 
| 
|-
|  1.5x                           
|  198 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                    
|  626 / 683  
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)             
|  626        
| 
|}
<!-- ## table end
 -->

<b>NOTE!</b> This table shows <b>only</b> answers in which there was given Git version explicitely. Some people gave date, some people wrote how long they have used git. Those answers needs also processing; they are <i>not presented</i> here.

It looks like the Git users community is divided into part of users who started using it from beginning, or almost from beginning, and users which started using git post v1.3.0 (post e.g. making separate remotes the default layout of branches).

== Other SCMs ==

=== 10. What other SCMs did/do you use? ===

This question is not well thought out, as it gathers together (in the free-form which is not easy to tabularize with large number of responses we got) SCMs which one used and no longer uses, SCMs which are used in parallel with git, and SCMs which are used instead of git (which are chosen as main SCM for a project). Nevertheless it shows with which VCS, and its conceps, are users familiar with.

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <tablestyle="font-size: smaller;" rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  AccuRev                      
|  3   
| 
|-
|  Aegis                          
|  1   
| 
|-
|  Bazaar                         
|  19  
| 
|-
|  Bazaar-NG                      
|  50  
| 
|-
|  BitKeeper                    
|  27  
| 
|-
|  CCC                            
|  1   
| 
|-
|  CMS (Digital)                  
|  1   
| 
|-
|  CMS (VAX)                      
|  1   
| 
|-
|  CMS (VMS)                      
|  1   
| 
|-
|  CVCS                           
|  1   
| 
|-
|  CVS                            
|  454 
| 
|-
|  ClearCase                    
|  43  
| 
|-
|  CodeMgr                      
|  1   
| 
|-
|  Continuus                      
|  1   
| 
|-
|  Darcs                          
|  78  
| 
|-
|  DesignSync                   
|  1   
| 
|-
|  GNU Arch                       
|  57  
| 
|-
|  Mercurial                      
|  92  
| 
|-
|  Monotone                       
|  31  
| 
|-
|  Omniworks                      
|  1   
| 
|-
|  OpenCM                       
|  1   
| 
|-
|  PRCS                           
|  1   
| 
|-
|  PVCS                           
|  12  
| 
|-
|  Perforce                       
|  50  
| 
|-
|  Quilt                          
|  2   
| 
|-
|  RCS                            
|  61  
| 
|-
|  SCCS                           
|  18  
| 
|-
|  SCM                            
|  1   
| 
|-
|  SCSS                           
|  1   
| 
|-
|  SVK                            
|  19  
| 
|-
|  Serena Version Manager         
|  1   
| 
|-
|  SourceForge                  
|  1   
| 
|-
|  Sourcerer's Apprentice         
|  1   
| 
|-
|  StarTeam                     
|  4   
| 
|-
|  Subversion                     
|  524 
| 
|-
|  Sun NSE                        
|  2   
| 
|-
|  Sun TeamWare                 
|  4   
| 
|-
|  VCS                            
|  1   
| 
|-
|  VMS                            
|  1   
| 
|-
|  VSS                            
|  26  
| 
|-
| <-2>
| 
|-
|  'cp -a'                        
|  1   
| 
|-
|  akpm patch scripts             
|  1   
| 
|-
|  custom in-house tools          
|  1   
| 
|-
|  diff patch                     
|  2   
| 
|-
|  notes-on-paper-made-by-hand    
|  1   
| 
|-
|  really horrible stuff          
|  1   
| 
|-
|  scripts for 'shadow trees'     
|  1   
| 
|-
|  tarballs                       
|  1   
| 
|-
|  tlib                           
|  1   
| 
|-
| <-2>
| 
|-
|  none                           
|  9   
| 
|-
|  undisclosed                    
|  1   
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                     
|  654 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)              
|  1615      
| 
|}
<!-- ## table end
 -->

The above table is in alphabetical order. It was generated from free-form answers, tabularized as multiple choice answer.

Note that this question does not distinguish between SCMs/VCSs which were used prior to Git and used no longer, SCMs which are used beside (in parallel) to Git perhaps interacting with Git, and SCMs which are used instead of Git. Also note that this is <u>Git User's</u> survey, so it those number for example do not represent number of e.g. users of Mercurial as compared to e.g. users of Subversion.

Below there is table of SCM used, sorted by the number of responses.  Note that annotations (like "a little CVS") were not weighted here. Only SCMs which has count more that 10 are shown.  One person can (and usually did) chose more than one SCM.

In the table below links are to [http://en.wikipedia.org Wikipedia] article about specified SCM.

{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##--------------------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  [[WikiPedia:Subversion_(software)|Subversion]]  
|  524  
| 
|-
|  [[WikiPedia:Concurrent_Versions_System|CVS]]    
|  454  
| 
|-
|  [[WikiPedia:Mercurial_(software)|Mercurial]]    
|  92   
| 
|-
|  [[WikiPedia:Darcs|Darcs]]                       
|  78   
| 
|-
|  [[WikiPedia:Revision_Control_System|RCS]]       
|  61   
| 
|-
|  [[WikiPedia:GNU_arch|GNU Arch]]                 
|  57   
| 
|-
|  [[WikiPedia:Bazaar_(software)|Bazaar-NG]]       
|  50   
| 
|-
|  [[WikiPedia:Perforce|Perforce]]                 
|  50   
| 
|-
|  [[WikiPedia:IBM_Rational_ClearCase|[[ClearCase]]]]  
|  43   
| 
|-
|  [[WikiPedia:Monotone_(software)|Monotone]]      
|  31   
| 
|-
|  [[WikiPedia:[[BitKeeper]]|[[BitKeeper]]]]               
|  27   
| 
|-
|  [[WikiPedia:Microsoft_Visual_SourceSafe|VSS (MS Visual [[SourceSafe]]])] 
|  26   
| 
|-
|  [[WikiPedia:Baz_(software)|Bazaar]]<<[[FootNote]](Bazaar-NG (bzr) might been mistaken for old Bazaar (baz); the tabularization is biased towards Bazaar-NG, e.g. answer of "Bazaar" was taken for Bazaar-NG, only "baz" for Bazaar)>> 
|  19   
| 
|-
|  [[WikiPedia:SVK|SVK]]                           
|  19   
| 
|-
|  [[WikiPedia:Source_Code_Control_System|SCCS]]   
|  18   
| 
|-
|  [[WikiPedia:PVCS|PVCS]]                         
|  12   
| 
|}
<!-- ##--------------------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="border-top: dotted;"> tla+baz+bzr<<[[FootNote]](tla+baz+bzr = GNU Arch (tla), old Bazaar (baz), Bazaar-NG (bzr))>> 
|  129  
| 
|}
<!-- ##--------------------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base 
|  654 / 683 
| 
|}

<b>Footnotes:</b>
<<[[FootNote]]>>

As you can see two most popular SCMs are Subversion ('svn') and CVS, with Subversion being a bit more popular.  Among distributed SCMs with most count are Mercurial ('hg') and Arch and its descendants ('tla', 'baz', 'bzr'). From proprietary (non-OSS) revision control systems Perforce ('p4'), ClearCase (and ClearCase UCM), BitKeeper ('bk') and Visual SourceSafe (aka. that awful M$ one ;-) got most count.

Note that the count for given version control system does not reflect <i>preferences</i> of git users. One can be forced to use specified SCM.

Compare this to the following table of SCMs popularity, based on the number of people who have given SCM in [http://www.ohloh.net/about/faq#stack "stack"] on [[WikiPedia:Ohloh|Ohloh]].  Note that this data might be biased because Ohloh for now supports only CVS, SVN (Subversion) and Git repositories.  Data taken on 11-11-2007:

{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Project 
|  Stacks 
| 
|}
<!-- ##--------------------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  Subversion                     
|  1568 
| 
|-
|  CVS                            
|  223  
| 
|-
|  Git                            
|  212  
| 
|-
|  Mercurial                      
|  76   
| 
|-
|  Bazaar-NG                      
|  43   
| 
|-
|  Darcs                          
|  40   
| 
|-
|  SVK                            
|  36   
| 
|-
|  Monotone                       
|  16   
| 
|}

See also question 35: "How does GIT compare to other SCM?".

=== 11. Why did you choose GIT? ===

(Very similar to question 36. "What do you like about using GIT?")

<b>TO DO</b><<BR>>
643 / 683 non-empty responses

=== 12. Why did you choose other SCMs? ===

<b>TO DO</b><<BR>>
606 / 683 non-empty responses

=== 13. What would you require from GIT to enable you to change... ? ===

What would you require from GIT to enable you to change, if you use other SCM for your project?

474 / 683 non-empty responses

List of answers, without count (which for this question is, I think, less important), divided into broad categories, is shown below

Generic:
* being more user-friendly, easier to use<<BR>> more friendly output from commands<<BR>> better and clearer error messages<<BR>> stable command semantics
* reduced number of (visible) commands<<BR>> clear separation of plumbing and porcelain
* consistent set of commands<<BR>> consistency if command flags
* easier to learn (easier learning curve)
* more stability
* support UTF-16
* A clearer UI. Read the monotone list archive. 70% of the mails are UI related. The result is an clear and easy to use intuitive UI that does what you expect in most cases.

Performance:
* better performance on massive trees (FreeBSD)
* good speed on NTFS (MS WIndows)

Documentation:
* a good documentation<<BR>> user/installation documentation<<BR>> troubleshooting guide<<BR>> 'Git For Dummies', 'The Git Book' 
* documented workflows (including centralized repo workflow, or at least documenting how and why replace it with better workflow)
* development model tutorials<<BR>> more example usage<<BR>> best practices<<BR>> case studies
* guide for designing a branch policy for a shared repository
* screencasts
* documentation in one's native language
* good in-depth administative documentation
* maybe git-tutor program

Specific features:
* partial-tree checkouts (partial checkout), checking out arbitrary subdirectories
* granular permissions (ACL) within the tree, e.g. restricting translators to the po/ subdirectory
* shallow clone from a given commit: git clone --depth <commit>
* automatic (re)packing
* lightweight working copies
* better and well documented submodule support
* multi-project support / multiple sandboxes support
* git-bind/unbind (like in bzr)
* git-sync
* cvs-compatible syntax as an option
* tracking empty directories
* more friendliness with corporate firewalls
* ability to preserve permissions/modes/EA of files and directories<<BR>> access control features /  visibility access control<<BR>> disabling some users from accessing certain parts of the repository
* being able to merge directories (instead of branches)
* FastCGI gitweb
* some embedded keyword capabilities similar to those provided by CVS and Subversion
* ignore files during merge
* R/W git server (allow push), with NIS, LDAP support
* pull/rebase into dirty tree
* clearcase dynamic view-like support (externally?)
* better http(s) push via WebDAV: hooks<<BR>> working and easy to setup push over https
* plain simple FTP upload (push) and download (clone, fetch)
* better working through corporate firewalls

Portability:
* native MS Windows support, easy installer package, even better support for all platforms; easier setup on Solaris and AIX
* pre-prepared <u>static</u> binaries for FreeBSD, MacOS X, MS Windows
* less dependencies
* support for more platforms
* a portable version of git, one binary + library (gitbox)
* Windows version(s) mentioned on homepage

GUI:
* better (G)UI<<BR>> TortoiseGit for MS Windows, or other Windows front-end<<BR>> good, advanced GTK+ 2.x tool to visualize git
* history graph conected to file tree in GUIs
* easier management of remotes using GUI
* better diff viewing tools (side-by-side, like KDiff3)

Other SCMs:
* seamless import<<BR>> BitKeeper / ClearCase import/sync<<BR>> tool to import TeamWare history into Git
* better SCM interop
* SCM rosetta / "Git for <SCM> users" documentation
* import/export tools supporting incremental import and export
* 100% Subversion interoperability
* git update (stash, fetch, rebase, unstash) a la CVS
* git-svnserve
* svn:externals support

Tools:
* improved administrative tools
* reasonable plugins for IDE (e.g. Visual Studio, KDevelop, NetBeans)<<BR>> full Eclipse / NetBeans / IntelliJ support
* good integration with apps like Trac and Bugzilla<<BR>> work with continuous integration tools (Cruise Control etc...)
* Git + Launchpad
* libification (for tools support)

Other:
* SourceForge / Gna! / Google Projects support<<BR>> (free) hosting with git facilities<<BR>> FOSS hosting sites supporting git
* commercial support / corporate backing, contractual service
* number of users, to convince my co-workers that they're not a silly minority; popularity
* projects switching to git
* user education
* marketing, advocacy videos
* convincing coworkers / other members / boss<<BR>> willingness of the other developers to learn to use it
* training/certification
* a stop to the constant bashing of other SCMs - this doesn't get you any friends drop the arrogant attitude, work with the rest of the community and try to make something people can understand in an hour
* http://wiki.FreeBSD.org/[[VersionControl]]
* At work it'd require some kind of miracle.  Huge Perforce repository of highly interrelated stuff in which people can make sweeping changes in a single changelist. Lots of tools that access Perforce.  Slow as hell.

=== 14. Did you import your repository from foreign SCM? What SCM? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##-------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  N/A                            
|  15    
| 
|-
|  No                             
|  169   
| 
|-
|  Yes                            
|  372   
| 
|}
<!-- ##-------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base        
|  556 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum) 
|  556       
| 
|}
<!-- ## table end
 -->

This is anly partial analysis, as it deals only with first part of question. Second part, which SCM, has free-form structure and needed further processing.

One can see that around half of git users have imported (at least one project) from foreign SCM.

=== 15. What tool did you use for import? ===

Note that one can use more than one tool, for example for different repositories.

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  by hand                        
|  7   
| 
|-
|  custom script                  
|  21  
| 
|-
|  fast-import script             
|  3   
| 
|-
| <-2>
| 
|-
|  Tailor                         
|  28  
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <colspan="2" rowstyle="font-style: italic; background-color: #ffffed; border-top: double;"> CVS import 
| 
|-
|  git-cvsimport                  
|  81  
| 
|-
|  parsecvs                       
|  12  
| 
|-
|  fromcvs                        
|  2   
| 
|-
|  cvs2git                        
|  1   
| 
|-
|  cvstogit                       
|  1   
| 
|}
<!-- ##.........................................
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <colspan="2" rowstyle="font-style: italic; background-color: #ffffed; border-top: double;"> Subversion import 
| 
|-
|  git-svn                        
|  150 
| 
|-
|  git-svnimport                  
|  66  
| 
|}
<!-- ##.........................................
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <colspan="2" rowstyle="font-style: italic; background-color: #ffffed; border-top: double;"> Other SCMs 
| 
|-
|  git-archimport                 
|  15  
| 
|-
|  bk2git (customized)            
|  1   
| 
|-
|  darcs2git                      
|  4   
| 
|-
|  git-p4                         
|  4   
| 
|-
|  git-p4import                   
|  1   
| 
|-
|  git-ucmimport                  
|  1   
| 
|-
|  hg-to-git                      
|  2   
| 
|-
|  hg2git                         
|  2   
| 
|-
|  hgpullsvn                      
|  1   
| 
|-
|  hgsvn                          
|  1   
| 
|-
|  moin2git                       
|  1   
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="border-top: dotted;"> unspecified                    
|  18   
| 
|-
|  N/A                            
|  114 
| 
|}
<!-- ##------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base         
|  467 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)  
|  538       
| 
|}
<!-- ## table end
 -->

=== 16. Do your GIT repository interact with other SCM? Which SCM? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer                         
|  Count 
| 
|}
<!-- ##-------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  N/A                            
|  35    
| 
|-
|  No                             
|  228   
| 
|-
|  Yes                            
|  228   
| 
|}
<!-- ##-------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|  491 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|  491   
| 
|}
<!-- ## table end
 -->

This is anly partial analysis, as it deals only with first part of question. Second part has free-form structure and needs further processing.

One can see that around third of git users interacts (for at least one project) with foreign SCM, as compared to half of git users which have imported other SCM.

=== 17. What tool did/do you use to interact? ===

This question is free-form question, but it is treated as multiple-choice question for the porposes of creating table of responses.

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  by hand                        
|  10  
| 
|-
|  custom script                  
|  16  
| 
|-
| <-2>
| 
|-
|  Tailor                         
|  4   
| 
|-
|  convert-repo                   
|  1   
| 
|-
| <-2>
| 
|-
|  fromcvs                        
|  1   
| 
|-
|  git-cvsexportcommit            
|  8   
| 
|-
|  git-cvsimport                  
|  19  
| 
|-
|  git-cvsserver                  
|  2   
| 
|-
| <-2>
| 
|-
|  git-svn                        
|  164 
| 
|-
|  git-svnimport                  
|  2   
| 
|-
| <-2>
| 
|-
|  git-p4                         
|  4   
| 
|-
|  git-p4import                   
|  1   
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="border-top: dotted;"> unspecified                    
|  2   
| 
|-
|  N/A                            
|  153 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base        
|  385 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum) 
|  388       
| 
|}
<!-- ## table end
 -->

The only tool which really allows to interact (two-way) with other SCM is git-svn (164 / 232). 

== How you use GIT ==

=== 18. Do you use GIT for work, unpaid projects, or both? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
|  Perc. 
| 
|}
<!-- ##----------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  work                           
|     56 
|   8.2% 
| 
|-
|  unpaid projects                
|    212 
|  31.0% 
| 
|-
|  both                           
|    377 
|  55.2% 
| 
|}
<!-- ##----------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <colspan="3" rowstyle="border-top: dotted;">
| 
|-
|   work + both                   
|    433 
|  63.4% 
| 
|}
<!-- ##----------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|colspan="2" |   645 / 683   
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|colspan="2" |   645         
| 
|}
<!-- ## table end
 -->

Around two third of people use git at work, or for work.  

See also question 55: "Would commerical (paid) support from a support vendor be of interest to you/your organization?"

=== 19. How do you obtain GIT? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer                         
|  Count 
|  Perc. 
| 
|-
|  binary package                 
|    283 
|  41.4% 
| 
|-
|  source tarball                 
|    210 
|  30.7% 
| 
|-
|  pull from main repository      
|    153 
|  22.4% 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|colspan="2" |   646 / 683   
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|colspan="2" |   646         
| 
|}
<!-- ## table end
 -->

Around half more people use binary packages than source tarball (or source package, I think). More than half of people compile its own git (pull is also followed by compilation).

=== 20. What hardware platforms do you use GIT on? ===

On Linux it was meant to be result of <code><nowiki>uname -i</nowiki></code>.  Note however that <code><nowiki>uname -i</nowiki></code> does not work on all Unices, as was indicated in help to this question.  I'm sorry for this mistake.

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  Intel                          
|  73  
| 
|-
|  Athlon                         
|  2   
| 
|-
|  i386                           
|  171 
| 
|-
|  i586                           
|  9   
| 
|-
|  i686                           
|  60  
| 
|-
|  IA-32                          
|  6   
| 
|-
|  IA-64                          
|  8   
| 
|-
|  AMD                            
|  35  
| 
|-
|  amd64                          
|  48  
| 
|-
|  x86                            
|  156 
| 
|-
|  x86-64                         
|  112 
| 
|-
| <-2>
| 
|-
|  Apple                          
|  8   
| 
|-
|  iMac                         
|  1   
| 
|-
|  MacBook                      
|  7   
| 
|-
|  PowerBook                    
|  10  
| 
|-
|  PPC                            
|  52  
| 
|-
|  ppc64                          
|  7   
| 
|-
| <-2>
| 
|-
|  ARM                            
|  6   
| 
|-
|  Alpha                          
|  2   
| 
|-
|  PA-RISC                        
|  1   
| 
|-
|  parisc64                       
|  1   
| 
|-
|  MIPS                           
|  1   
| 
|-
|  mips64                         
|  1   
| 
|-
|  mipsel                         
|  2   
| 
|-
|  SPARC                          
|  8   
| 
|-
|  sparc64                        
|  6   
| 
|-
|  SUNW                           
|  6   
| 
|-
|  Sun-Fire                       
|  4   
| 
|-
|  sun4u                          
|  3   
| 
|-
|  sun4v                          
|  1   
| 
|-
|  k8                             
|  1   
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="border-top: dotted;"> unknown 
|  67  
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base          
|  637 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)   
|  875       
| 
|}
<!-- ## table end
 -->

The above table is in some arbitrary order. It was generated from free-form answers, tabularized as multiple choice answer, as one person can use git on more than one architecture.

Those results probably needs further processing to reduce number of choices, by gathering architectures.

"Unknown" usually means that something else instead of architecture was given (like operating system), or architecture was too generic, like "PC".

=== 21. What OS do you use GIT on? ===

<b>What OS (please include the version) do you use GIT on?</b>

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  AIX                            
|  1   
| 
|-
|  FreeBSD                      
|  16  
| 
|-
|  OpenBSD                      
|  3   
| 
|-
|  HP-UX                          
|  1   
| 
|-
|  Linux                          
|  582 
| 
|-
|  MS Windows (Cygwin)            
|  22  
| 
|-
|  MS Windows (msys)              
|  1   
| 
|-
|  MS Windows (unsp.)             
|  35  
| 
|-
|  MacOS X / Darwin             
|  94  
| 
|-
|  Solaris                        
|  11  
| 
|-
|  SunOS                        
|  5   
| 
|-
|  UNIX (unsp.)                   
|  1   
| 
|-
|  too many to list               
|  1   
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <colspan="2" rowstyle="border-top: dotted;">
| 
|-
|  MS Windows (together)          
|  58  
| 
|-
|  FreeBSD / OpenBSD          
|  19  
| 
|-
|  Unices (together)              
|  19  
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base         
|  645 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)  
|  775       
| 
|}

The above was generated from free-form answers, tabularized as multiple choice answer, as one person can use git on more than one operating system.

This is not a full analysis of answers, as it does not include operating system version, or (for Linux) distribution(s) used.

=== 22. What projects do you track using GIT? ===

<b>What projects do you track (or download) using GIT (or git web interface)?</b>

A note: this question was meant to list projects which one <b>tracks</b>, not the ones he/she maintains, meaning the projects in the remotes (section); usually project which is "origin".  It was not meant to list all projects which one has under version control using git.

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <tablestyle="font-size: smaller;" rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <-2>
| 
|-
| <colspan="2" rowstyle="font-style: italic; background-color: #ffffed;"> undisclosed and own projects 
| 
|}
<!-- ##.........................................
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  own                            
|  83  
| 
|-
|  private                        
|  19  
| 
|-
|  proprietary                    
|  2   
| 
|-
|  configuration files            
|  4   
| 
|-
|  work                           
|  38  
| 
|-
|  unspecified                    
|  31  
| 
|-
| <-2>
| 
|-
| <colspan="2" rowstyle="font-style: italic; background-color: #ffffed;"> Git related projects 
| 
|}
<!-- ##.........................................
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  git                            
|  133 
| 
|-
|  git-gui                        
|  1   
| 
|-
|  git-gui-i18n                   
|  2   
| 
|-
|  4msysgit                       
|  2   
| 
|-
|  msysgit                        
|  5   
| 
|-
|  mingw                          
|  4   
| 
|-
|  egit                           
|  2   
| 
|-
|  grit                           
|  1   
| 
|-
|  stgit                          
|  5   
| 
|-
|  guilt                          
|  2   
| 
|-
|  GSoC projects                
|  1   
| 
|-
|  Giggle                         
|  6   
| 
|-
|  qgit                           
|  3   
| 
|-
|  qgit4                          
|  1   
| 
|-
|  tig                            
|  11  
| 
|-
| <-2>
| 
|-
| <colspan="2" rowstyle="font-style: italic; background-color: #ffffed;"> Linux kernel and related projects<<[[FootNote]](I have not included there some projects which I have only later checked that are also kernel-related, like blktrace, dkms, ethtool, hostap, open-iscsi, etc.)>> 
| 
|}
<!-- ##.........................................
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  linux kernel                   
|  178 
| 
|-
|  linux-2.4                      
|  1   
| 
|-
|  linux-2.6                      
|  15  
| 
|-
|  linux-mips                     
|  3   
| 
|-
|  linux-mtd                      
|  1   
| 
|-
|  linux-omap                     
|  3   
| 
|-
|  iwlwifi                        
|  5   
| 
|-
|  klibc                          
|  1   
| 
|-
|  kvm                            
|  4   
| 
|-
|  module-init-tools              
|  1   
| 
|-
|  mtd-utils                      
|  1   
| 
|-
|  rt2x00                         
|  2   
| 
|-
|  pahole                         
|  3   
| 
|-
|  sparse                         
|  12  
| 
|-
|  udev                           
|  6   
| 
|-
|  wireless-dev                   
|  3   
| 
|}
<!-- ##.........................................
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <-2>
| 
|-
|  kernel related                 
|  7   
| 
|-
| <-2>
| 
|-
| <colspan="2" rowstyle="font-style: italic; background-color: #ffffed;"> Freedesktop projects<<[[FootNote]](Some of mentioned projects which are also hosted on freedesktop.org are not included here, neither in the list, not in the count for "freedesktop")>> 
| 
|}
<!-- ##.........................................
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  Cairo                          
|  21  
| 
|-
|  Compiz                         
|  5   
| 
|-
|  Compiz Fusion                  
|  6   
| 
|-
|  D-BUS                          
|  3   
| 
|-
|  DRM                            
|  5   
| 
|-
|  HAL                            
|  7   
| 
|-
|  Mesa3D                         
|  16  
| 
|-
|  x86info                        
|  1   
| 
|-
|  xcb                            
|  2   
| 
|-
|  xorg                           
|  59  
| 
|-
|  x drivers                      
|  3   
| 
|-
|  xf86-video-*                   
|  6   
| 
|-
|  xorg * drivers                 
|  5   
| 
|-
|  xserver                        
|  7   
| 
|}
<!-- ##.........................................
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <-2>
| 
|-
|  freedesktop                    
|  16  
| 
|-
| <-2>
| 
|-
| <colspan="2" rowstyle="font-style: italic; background-color: #ffffed;"> Other projects (only those with count >= 5) 
| 
|}
<!-- ##.........................................  
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  ELinks                         
|  5   
| 
|-
|  GNOME (git-svn)                
|  8   
| 
|-
|  LilyPond                     
|  10  
| 
|-
|  OLPC                           
|  12  
| 
|-
|  Rubinius                       
|  7   
| 
|-
|  Thousand Parsec                
|  6   
| 
|-
|  U-Boot                         
|  8   
| 
|-
|  WINE                           
|  29  
| 
|-
|  XMMS2                          
|  14  
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Projects shown (around) 
|  55  / 76  
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                    
|  560 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)             
|  1123      
| 
|}
<!-- ## table end
 -->

<b>Footnotes:</b>
<<[[FootNote]]>>

Some people wrote URL of hosting site instead of (list of) project names; some wrote 'too many too list' (or equivalent).

All projects were checked and, if not already present, added to [[GitProjects]] page on git wiki (except git related projects).

Tracked projects can be divided into the following categories:
* undisclosed: proprietary code / work projects, own projects, etc.
* Linux kernel and kernel related projects (like udev or kvm)
* git related: git, gitk, git-gui, git-gui-i18n, stgit, tig,...
* freedesktop (and related) projects: XCB, Compiz, Mesa3D, Cairo,...
* Linux distributions: Source Mage, Slind, Arch Linux,... (a few)
* tracked via git-svn, e.g. nsd, KDE, GIMP, GNOME, FreeCiv, shell-fm
* others with official git repositories (like XMMS2 or ELinks)
* others with unofficial git repositories (like OpenOffice.org)

I'm not sure if I catched all Linux kernel related projects, and all freedesktop (and related) projects.

There are around 100 (?) different projects tracked mentioned in survey (not all of them <i>choose</i> git as their SCM; some have unoffical git repositories, some are accessed for example via git-svn).

=== 23. How many people do you collaborate with using GIT? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  0                              
|  116 
| 
|-
|  1                              
|  50  
| 
|-
|  2                              
|  45  
| 
|-
|  3                              
|  48  
| 
|-
|  4                              
|  23  
| 
|-
|  5                              
|  41  
| 
|-
|  6                              
|  12  
| 
|-
|  7                              
|  5   
| 
|-
|  8                              
|  11  
| 
|-
|  9-10                           
|  47  
| 
|-
|  11-15                          
|  30  
| 
|-
|  16-25                          
|  26  
| 
|-
|  26-50                          
|  17  
| 
|-
|  51-100                         
|  17  
| 
|-
|  100+                           
|  8   
| 
|-
| <-2>
| 
|-
|  unknown number<<[[FootNote]](By unknown number I mean here answers like "git people", or "kernel community", or some text which did not contain a number (or a range).)>> 
|  79  
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base         
|  575 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)  
|  575       
| 
|}
<!-- ## end table
 -->

<b>Footnotes:</b>
<<[[FootNote]]>>

<i>Question:</i> What ranges should be used here: 1, 2-9, 10-99, 100-999, 1000+ or perhaps 1, 2-5, 6-15, 16-25, 26-50, 50-100, 100-1000, 1000+, or yet another set of ranges?

=== 24. How big are the repositories that you work on? ===

<b>TO DO</b><<BR>>
<i>525 / 683 non-empty responses</i>

Some git repositories have more than 50k files, more than 150k commits, more than 100mb largest file (although not single repository has all those).

=== 25. How many different projects do you manage using GIT? ===

This question was meant to survey number of repositories one fetches from time to time.

This was a free-form question. For the table belw only first number, or first range was taken.  For range ('$n-$m' or '$n to $m') the middle of range (($n+m)/2) was used.

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer (free form) 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  0                              
|  10  
| 
|-
|  1                              
|  108 
| 
|-
|  2                              
|  84  
| 
|-
|  3                              
|  90  
| 
|-
|  4                              
|  53  
| 
|-
|  5                              
|  51  
| 
|-
|  6                              
|  19  
| 
|-
|  7                              
|  11  
| 
|-
|  8                              
|  12  
| 
|-
|  9-10                           
|  39  
| 
|-
|  11-15                          
|  26  
| 
|-
|  16-25                          
|  22  
| 
|-
|  26-50                          
|  19  
| 
|-
|  51-100                         
|  5   
| 
|-
|  101+                           
|  4   
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base         
|  577 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)  
|  553       
| 
|}
<!-- ## table end
 -->

The largest number of projects was 200k (if it is not a mistake), next largest is 410.

As one can see we have here nice Poisson-like distribution: concentrated around low values, with long tail.  Well, bit quantized tail, as people write usually "around 20" (or equivalent), usually not remembering exact number of tracked repositories.

Note that answer of '0' might have been given as no answer, or equivalent of 'N/A'.

=== 26. Which porcelains do you use? ===

Multiple answers (one can use more than one porcelain).

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer (multiple choice) 
|  Count 
|  Perc. 
| 
|}
<!-- ##--------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  core-git                       
|  558 
|  81.7% 
| 
|-
|  Cogito (deprecated)            
|  56  
|   8.2% 
| 
|-
| <-3>
| 
|-
| <rowstyle="background-color: #ffffed;"> Patch management interfaces: 
|  57  
|   8.3% 
| 
|}
<!-- ##..................................................
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  StGIT                        
|  41  
|   6.0% 
| 
|-
|  Guilt (formerly gq)            
|  13  
|   1.9% 
| 
|-
|  pg (deprecated)                
|  3   
|   0.4% 
| 
|-
| <-3>
| 
|-
|  own scripts                    
|  95  
|  13.9% 
| 
|-
|  other                          
|  14  
|   2.0% 
| 
|}
<!-- ##--------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base         
|colspan="2" | 593 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)  
|colspan="2" | 780       
| 
|}
<!-- ## table end
 -->

Those 14 "other" answers make me wish to have provided "if other, what it was?" (sub)question; actually not only for this question.

It is understandable that [[Cogito]] still has some users, even though it is deprecated, and (I think) all of its functionality can be found in git-core porcelain. It was meant as SCM / porcelain layer when git-core didn't have it and consisted almost only of plumbing commands.

Quite a bit of people use patch management interface: StGIT, Guilt, even deprecated and abandoned pg (Patchy Git). StGIT has more users than Guilt (formerly gq), although that might be caused by the fact that StGIT was here longer... Some say that it is because of Guilt having non-standalone documentation; it needs reading hgbook, as Guilt concepts are based on mq (Mercurial [patch] queues) extension.

Large number of users use their own scripts, more than any non-standard porcelain.  One wonders if this is a result of good git scriptability.

14 users choose other... and there is no "what other" question, unfortunately... From the comments on git mailing list some people answered "other" because they consider git-gui (which is not present in above table) as porcelain rather than just git GUI.

=== 27. Which git GUI do you use? ===

Multiple answers (one can use more than one GUI).  Note that for the first week and a bit of survey "CLI" answer had no explanation that it means command line interface, so results might be bit skewed.

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer (multiple choice) 
|  Count 
|  Perc. 
| 
|}
<!-- ##--------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  CLI (command line)             
|  398 
|  58.3% 
| 
|-
|  gitk                           
|  347 
|  50.8% 
| 
|-
|  git-gui                        
|  123 
|  18.0% 
| 
|-
|  qgit                           
|  82  
|  12.0% 
| 
|-
|  gitview                        
|  15  
|   2.2% 
| 
|-
|  giggle                         
|  48  
|   7.0% 
| 
|-
|  tig                            
|  41  
|   6.0% 
| 
|-
|  instaweb                       
|  16  
|   2.3% 
| 
|-
|  (h)gct                         
|  3   
|   0.4% 
| 
|-
|  qct                            
|  3   
|   0.4% 
| 
|-
|  KGit                           
|  6   
|   0.9% 
| 
|-
|  git.el                         
|  31  
|   4.5% 
| 
|-
|  <i>other</i>                      
|  15  
|   2.2% 
| 
|-
| <-3>
| 
|-
|  giggle + gitview               
|  63  
|   9.2% 
| 
|}
<!-- ##--------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base         
|colspan="2" | 572 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)  
|colspan="2" | 1128      
| 
|}
<!-- ## table end
 -->

As one can see almost as many people use gitk as CLI.  Most used GUI are [http://www.kernel.org/pub/software/scm/git/docs/gitk.html gitk] and [http://www.kernel.org/pub/software/scm/git/docs/git-gui.html git-gui], most probably because they are distributed with Git, and because they are portable.  [http://digilander.libero.it/mcostalba/ QGit] is also quite popular, although GTK+ viewers, namely [http://developer.imendio.com/projects/giggle/ Giggle] and [[GitView]], taken together are also very popular (note that there might be instances of users using both Giggle and GitView).  I am a bit suprised about popularity of Giggle, I'd say.

[http://jonas.nitro.dk/tig/ Tig] (text-mode interface for git) and git.el (GIT mode for Emacs) are also quite popular.

I wonder what are those 15 other GUI. Why oh why there were no "What is this 'other GUI'?" question...

=== 28. Which (main) git web interface do you use for your projects? ===

Note that this question was single answer.  It is possible to serve the same set of repositories using two git web interfaces, for example freedesktop uses both [http://gitweb.freedesktop.org/ gitweb] and [http://cgit.freedesktop.org/ cgit] interfaces.

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
|  Perc. 
| 
|-
|  gitweb                         
|    382 
|  55.9% 
| 
|-
|  cgit                           
|      7 
|   1.0% 
| 
|-
|  wit (Ruby)                     
|      5 
|   0.7% 
| 
|-
|  git-php                        
|      1 
|   0.1% 
| 
|-
|  <i>other</i>                      
|     27 
|   4.0% 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base         
|colspan="2" |   422 / 683   
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)  
|colspan="2" |   422         
| 
|}
<!-- ## table end
 -->

Around two third (closer to 4/7) of git users use some kind of web interface for their projects.

Most use gitweb (which is distributed with git), 7 use cgit, 5 wit (Ruby), most probably projects sharing site with XMMS2, 1 git-php (I wonder who...), and there are 27 "other" answers, which I am most curious about. What are they?

Some answered "other" as "N/A" (meaning they do not use web interface) instead, what it is not obvious, not answering this question.  The explanation that this is possible was added later during duration of survey.

=== 29. How do you publish/propagate your changes? ===

Multiple choices, as one can use different methods for different projects, for example pushing to public repo for a project maintained, and sending patches via email to participate in third person project development.

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer                         
|  Count 
|  Perc. 
| 
|-
|  push                           
|    456 
|  66.8% 
| 
|-
|  pull                           
|    220 
|  32.2% 
| 
|-
|  format-patch + email           
|    172 
|  25.2% 
| 
|-
|  pull request                   
|     65 
|   9.5% 
| 
|-
|  bundle                         
|     13 
|   1.9% 
| 
|-
|  <i>other</i>                      
|     70 
|  10.2% 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|colspan="2" |   584 / 683   
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|colspan="2" |   996         
| 
|}
<!-- ## table end
 -->

Here "other" means just not listed workflow, although it would be also interesting to know details.

Most popular is push, I guess to public "publishing" repository (and/or probably to mirror repositories).  It is twice as popular as next method, gathering more than 3/4 of users.

Pull was supposed to mean logging to public server and pulling changes from private repo, not pulling someone other changes.  It is second most popular method.

Sending patches via email is two to three times as popular as sending pull request.

=== 30. Does git.git repository include code produced by you? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
|  Perc. 
| 
|-
|  Yes                            
|     99 
|  14.5% 
| 
|-
|  No                             
|    512 
|  75.0% 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base         
|colspan="2" |   611 / 683   
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)  
|colspan="2" |   611         
| 
|}
<!-- ## table end
 -->

As it can be seen, only (or perhaps it is that many?) around a 6th to 7th of git users participate in its development by providing code. 

== Internationalization ==

=== 31. Is translating GIT required for wider adoption? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
|  Perc. 
| 
|}
<!-- ##----------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  Yes                            
|     49 
|   7.2% 
| 
|-
|  No                             
|    383 
|  56.1% 
| 
|-
|  Somewhat                       
|    158 
|  23.1% 
| 
|}
<!-- ##----------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base         
|colspan="2" |   590 / 683   
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)  
|colspan="2" |   590         
| 
|}
<!-- ## table end
 -->

More than half of responders doesn't think that translating GIT is required for wider adoption.

=== 32. What do you need translated? ===

Summary of responses:
* user interface: command messages and error messages
* GUI: git-gui, gitk
* man pages and commands usage ('git <cmd> --help' , git <cmd> --usage')
* user's manual, tutorials, intro, howtos
* website / homepage

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <-2>
| 
|-
| <rowstyle="background-color: #ffffed;"> Documentation  
|  60 
| 
|-
| - man pages                    
|  22 
| 
|-
| - tutorials                    
|  14 
| 
|-
| - user's manual                
|  7  
| 
|-
| - howto                        
|  2  
| 
|-
| - introductory docs            
|  2  
| 
|-
| - online help                  
|  1  
| 
|-
| <-2>
| 
|-
| <rowstyle="background-color: #ffffed;"> User interface 
|  26 
| 
|-
| - help<<[[FootNote]](By 'help' I mean here output of "git <cmd> --help" and/or "git <cmd> --usage", but it is not necessarily what user who wrote the answer meant.  This means that this reply might be miscalculated.)>> 
|  9  
| 
|-
| - command output               
|  7  
| 
|-
| - error messages               
|  5  
| 
|-
| <-2>
| 
|-
| <rowstyle="background-color: #ffffed;">  GUI           
|  13 
| 
|-
| - git-gui                      
|  6  
| 
|-
| - gitk                         
|  2  
| 
|-
| - KGit                         
|  1  
| 
|-
| <-2>
| 
|-
| <rowstyle="border-top: dotted;">  Homepage             
|  1  
| 
|-
|  Nothing                       
|  75 
| 
|}
<!-- ##---------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base         
|  172 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)  
|  253       
| 
|}
<!-- ## table end
 -->

<b>Footnotes:</b>
<<[[FootNote]]>>

Answer in subcategory is also counted as anser in category; answers for each of categories or subcategories are counted once.  It means that if one answered that he/she wants to have both man pages and user's manual translated it count as "Documentation" category only once.  Note that there were answers of for example 'documentation' without specifying details (answer in subcategory).

This free-form question is tabularized (divided into categories) as multiple-choice answer; one can want to have both documentation and user interface translated.

=== 33. For what language do you need translation for? ===

In alphabetic order, free-form question, treated as multiple choice.

Languages for which [http://repo.or.cz/w/git-gui/git-gui-i18n.git git-gui translation] exists are marged in <i>italic</i> (state for 12.11.2007).

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  Afrikaans                      
|  1  
| 
|-
|  Belorussian                    
|  1  
| 
|-
|  <i>Chinese</i>                    
|  5  
| 
|-
|  Dutch                          
|  2  
| 
|-
|  <i>English</i><<[[FootNote]](Git messages and documentation _is_ in English)>> 
|  3  
| 
|-
|  Filipino                       
|  1  
| 
|-
|  Finnish                        
|  3  
| 
|-
|  French                         
|  21 
| 
|-
|  <i>German</i>                     
|  17 
| 
|-
|  Greek                          
|  1  
| 
|-
|  Hebrew                         
|  1  
| 
|-
|  Hindi                          
|  1  
| 
|-
|  <i>Hungarian</i>                  
|  1  
| 
|-
|  <i>Italian</i>                    
|  4  
| 
|-
|  <i>Japanese</i>                   
|  5  
| 
|-
|  Mandarin                       
|  1  
| 
|-
|  Norwegian                      
|  2  
| 
|-
|  Polish                         
|  2  
| 
|-
|  Portuguese                     
|  6  
| 
|-
|  <i>Russian</i>                    
|  6  
| 
|-
|  Serbian                        
|  2  
| 
|-
|  Slovenian                      
|  1  
| 
|-
|  Spanish                        
|  9  
| 
|-
|  <i>Swedish</i>                    
|  2  
| 
|-
|  Tagalog                        
|  1  
| 
|-
|  Ukrainian                      
|  1  
| 
|}
<!-- ##----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base 
|  143 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)<<[[FootNote]](Some answers were: "do not translate".)>> 
|  100      
| 
|}
<!-- ## table end
 -->

<b>Footnotes:</b>
<<[[FootNote]]>>

German and French are most popular. Spanish, Portuguese, Russian, Chinese + Mandarin and Japanese have count 5 or more.

The table below show status of git-gui i18n project, as of 12-11-2007. <u>t</u> is for <b>t</b>ranslated, <u>f</u> is for <b>f</b>uzzy, <u>u</u> is for <b>u</b>ntranslated, and <u>o</u> for <b>o</b>bsolete.  Currently there are glossaries only for German (de) and Simplified Chinese (zh_cn) - 34 entries.

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Language 
|  Status 
| 
|}
<!-- ##-------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  German (de)     
|  268t           
| 
|-
|  Hungarian (hu)  
|  268t+6o        
| 
|-
|  Italian (it)    
|  268t           
| 
|-
|  Japanese (ja)   
|  267t+1f        
| 
|-
|  Russian (ru)    
|  245t+20f+3u+5o 
| 
|-
|  Swedish (sv)    
|  268t           
| 
|-
|  Chinese (zh_cn) 
|  59t+38f+168u   
| 
|}
<!-- ##-------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> git-gui.pot     
|  268            
| 
|}
<!-- ## table end
 -->

== What you think of GIT ==

=== 34. Overall, how happy are you with GIT? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer                         
|  Count 
|  Perc. 
| 
|-
|  unhappy                        
|     13 
|   1.9% 
| 
|-
|  not so happy                   
|     36 
|   5.3% 
| 
|-
|  happy                          
|    179 
|  26.2% 
| 
|-
|  very happy                     
|    302 
|  44.2% 
| 
|-
|  completely ecstatic            
|    112 
|  16.4% 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|colspan="2" |   642 / 683   
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|colspan="2" |   642         
| 
|}
<!-- ## table end
 -->

Nice, git users are mostly very happy with git :-).  13 grumpy users, hmmm...

=== 35. How does GIT compare to other SCM tools you have used? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer                         
|  Count 
|  Perc. 
| 
|-
|  Better                         
|    505 
|  73.9% 
| 
|-
|  Equal (comparable)             
|     96 
|  14.1% 
| 
|-
|  Worse                          
|     30 
|   4.4% 
| 
|-
|colspan="2" |
|-
|  N/A                            
|     52 
|   7.6% 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base         
|colspan="2" |   631 / 683   
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)  
|colspan="2" |   631         
| 
|}
<!-- ## table end
 -->

Clearly Git is superior SCM! (In the minds of Git users at least) ;-)  Seriously, one should take into consideration that those results are biased, because it is <b>Git User's</b> Survey, and people usually choose SCM because they think it is best choice.

No answer (null answer) might mean that responder does not use and did not use other SCMs to compare, or at least think that he/she does not have sufficient basis for a comparison.

=== 36. What do you like about using GIT? ===

<b>TO DO (partial)</b><<BR>>
<i>578 / 683 non-empty responses</i>

No full analysis yet, and no count of answers, but it seems that the following are encountered most often (or at least those I remember best):
* clean design
* performance (speed)
* size of repository
* reliability, robustness, data integrity
* flexibility, scriptable
* command set, features (git-bisect)
* history rewriting (amend, rebase, interactive rebase, reset)
* history viewers, searching and browsing history
* distributed nature, offline work, full history locally, "local commits"
* easy and in-place branching
* easy merging, includes renames detection
* push/pull via ssh, pull via plain http -- no server needed
* easy to install: few dependencies, portable, lightweight

=== 37. What would you most like to see improved about GIT? ===

<b>What would you most like to see improved about GIT? (features, bugs, plug-ins, documentation, ...)</b>

<i>512 / 683 non-empty responses</i>

So many suggestions...

First, some of suggestions are actually implemented already, for example git development Changelog (present in the form of RelNotes), shallow clone support, submodules support.  This means that new features are not very well announced (which was one of comments here, too).

List of features and improvements mentioned:
* generic behavior:
** less chatter, clean distinction between success or fail (it it was about git-pull, it is addressed already)
** better, more verbose error messages, with link to documentation
** diagnostic output in case of problems; something like git-explain / git-state (this probably would need refactoring, general state info)
** more universal undo / continue
** command line consistency, option consistency: getopt / gitopt / optparse
* documentation:
** unified, organized, searchable documentation
** The Git Book (c.f. cvs/svn/hgbook); tutorial leading to advanced concepts like rebase, filter-branch, grafts, submodules, gitattributes 
** Git Cookbook / Git Recipies; best practices document, usage scenarios, workflows used, HOWTO
** Git for Dummies (for people who haven't used SCM at all) 
** more hooks and hook examples
** mid-level (script / plugin writer leve) docs
** git1line docs a la [http://sed.sourceforge.net/sed1line.txt sed1line.txt]
** "git <cmd> --help" returning one page of short command summary, not manpage; "git help --all --summary" for all command with oneline description 
* other SCMs:
** Cogito migration guide / tutorial (!)
** other SCM to git (concept, commands) cheat sheet
** git-bzr (and other SCMs) two-way integration
** git-svnserve: git functioning as Subversion server
* git-svn:
** automatic handling svn:externals using submodules and vice versa
** svnmerge and svk merge markers tracking/marking of merges
* more --interactive:
** git add --interactive in git-gui: allow to divide hunks
** git rebase --interactive: graphical interactive rebase in git-gui
** ncurses-based remote editing (in tig?)
* tools:
** better Emacs support; Vim plugin; IDE plugins (Eclipse, KDevelop, IntelliJ IDEA,...)
** MS Windows explorer shell integration; filemanagers integration (Nautilus, Konqueror)
** side by side diffs in gitweb, a la KDiff3/Meld/ediff etc.
* code:
** port scripts to C (builtinification)
** git library (libification)
** gitbox: single static, pre-packaged binary
* other:
** bisect dunno / skip / next
** partial checkout
** light working copies; multiple working copies per repo
** git-notes, to annotate commit messages
** push over sftp
** option to track empty directories
** option to track permissions and metainfo: ACL (Access Control List), EA (Extended Attributes), forks / streams
** rebase and blame merge strategies
** merge / rebase into dirty tree
** resumable git-clone; faster and less CPU hungry git-clone
** checkout/merge/diff/hunk header handlers in distribution for ChangeLog, XML, odf, jar and xul, po files

This is only (large) excerpt, not full list of all requested features.  As one can see tabularizing (dividing into categories) this data will be not an easy task.

=== 38. What is needed for wider GIT adoption? ===

<b>If you want to see GIT more widely used, what do you think we could do to make this happen?</b>

<i>459 / 683 non-empty responses</i>

So many suggestions...

Below there is incomplete list of answers, divided into categories.  I tried to generalize answers, to reduce size of this summary.  Comments in parantheses, <i>emphasized</i>.

Generic:
* Libification
* Maturity, stability
* Ease of use

Portability:
* Better Windows support, including TortoiseSVN like GUI and explorer extension.

 <i>(This is I think one of the most requested).</i>

* Portability, better cross-platform support

User interface:
* easy-git: simpler, reduced number of user commands

 <i>(Something like now deprecated Cogito? This probably includes better separation of plumbing and porcelain; plumbing should perhaps be not visible to ordinary user. There was also an idea to fold some commands into one, like git-am and git-apply)</i>

* Do usability studies
* Fix inconsistences and some UI bugs, e.g. too verbose commands. Fix corner cases. 
* Improve git commands output and error messages.

Documentation:
* The Git Book (like hgbook and svnbook)
* "Beneath the hood" (technical / programmers manual)
* "When the shit hits the fan" ;-) - advanced usage
* Improve documentation
* Usage scenarios, use cases, recipies / cookbook
* single-file searchable doc, with index (Info version of Git User's Manual, with all manpages in appendix, is perhaps a good start)
* Better documentation for shared repository workflow
* Translated manual, translated documentation

Features:
* Pull and rebase into dirty tree

 <i>(There was some work on this using git-stash infrastructure)</i>

* Lightweight working copy a la Bazaar-NG, also known as remote alternates (client-server model)
* Better submodule support
* Integrated GUI merge tool

 <i>(Halfway done - git-mergetool calls user defined GUI merge tool; I think it would be nice if git-gui had GUI merge tool included, perhaps "borrowed" from TkDiff / xxdiff)</i>

* Better support for shared repository

Performance:
* Performance on large repositories, on FreeBSD - git is slower than CVS  (What filesystem? Is repository packed?)

Tools, interfaces:
* Integration with popular IDE: Eclipse, KDevelop, MSVC, xcode, Rails,... (There is work on Eclipse support)
* More powerfull / integrated GUI

 <i>(Integrated GUI means lost portability; nevertheless it would be nice to have plugins for Konqueror / KDevelop and Explorer / Visual Studio)</i>

* Better GUI
* Better webgui (web interface)
* Integrate with Launchpad
* Bug tracker (Trac, BugsAnywhere, SCMbug) integration<<BR>> <i>(See also [http://git.madism.org/?p=grit.git grit]: stupid in git bug tracker)</i>
* Continuous build tools integrateion: Continuum, Cruise Control
* Make it have those client/branch history tools like Perforce and [http://en.wikipedia.org/wiki/Plastic_SCM Plastic SCM]

Other SCMs:
* Rename commands to be more similar to other SCM

 <i>(Backward compatibility makes it out ot the question).</i>

* Better import tools (best if they would be bundled with git), like parsecvs, cvs2git, fromcvs,...
* Transparent two-way interaction with other SCMs; incremental import; git as fake SCM server, like git-cvsserver or proposed to GSoC git-svnserve
* SCM cheatsheet (comparing commands and concepts).
* SCM migration guides (perhaps also in built-in, distributed docs, not only on-line on git homepage).

Support and marketing:
* Marketing, e.g. articles / blogs about advanced Git usage and features, speeches, presentations and seminars.
* Git blog; feature of the day
* Try to crush 'git is hard' myth
* Friendlier community
* Improved website
* Better advocacy for multirepo workflow, including "please pull" requests
* Distributed SCM advocacy
* Encourage SourceForge / Savannah / Gna! / BerliOS / Google Code to offer git support: git server and sering via http, gitweb or other git web interface, git projects administration (branches, alternates, grafts, tags,...)

 <i>(Savannah has some [http://savannah.gnu.org/maintenance/UsingGit git support], Google Code is rather out of the question)</i>

* Perhaps git repository for CPAN modules
* Move KDE to git
* Bundle in (enterprise) distributions: SuSE, RHEL, Mandriva,...
* Pressure / convince som software vendor to use it internally
* Git Company - paid support service

One of the more striking (and funny):
* Big fat posters world-wide with Catherine Zeta-Jones stating how happy she is since she switched to git ;-)<<BR>> She can actually write C-code.
* Offer Git stickers to put on laptops and such

== Changes in GIT ==

(Since year ago, or since you started using it).

=== 39. Did you participate in previous Git User's Survey? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer                         
|  Count 
|  Perc. 
| 
|}
<!-- ##----------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  Yes                            
|     51 
|   7.5% 
| 
|-
|  No                             
|    583 
|  85.4% 
| 
|}
<!-- ##----------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|colspan="2" |   634 / 683   
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|colspan="2" |   634         
| 
|}
<!-- ## table end
 -->

51 people did out of 634 who answered this question, out of 115 (?) who did participate in the previous survey. Around half. Bit curious.

=== 40. What improvements you wanted got implemented? ===

<b>TO TABULARIZE</b><<BR>>
<i>129 / 683 non-empty responses</i>

=== 41. What improvements you wanted didn't get implemented? ===

<b>TO TABULARIZE</b><<BR>>
<i>104 / 683 non-empty responses</i>

=== 42. How do you compare current version with version from year ago? ===

Should be: from year ago, or since you started using Git.  No responses (303 / 683) migh be caused by the fact that one do not use git for a year, so he/she doesn't know what git looked like year ago.

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer                         
|  Count 
|  Perc. 
| 
|}
<!-- ##----------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  Better                         
|    319 
|  46.7% 
| 
|-
|  No changes                     
|     60 
|   8.8% 
| 
|-
|  Worse                          
|      1 
|   0.1% 
| 
|}
<!-- ##----------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|colspan="2" |   380 / 683   
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|colspan="2" |   380         
| 
|}
<!-- ## table end
 -->

Most think that git has improved. Single malcontent: only one user thinks that Git is worse than year ago; I wonder why...

=== 43. Which of the new features do you use? ===

Multiple choice; the list does not include all new features.  Some new features are not visible at first glance, and one uses them without conscious choice.

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer                         
|  Count 
|  Perc. 
| 
|}
<!-- ##----------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  git-gui                        
|    103 
|  15.1% 
| 
|-
|  blame improvements             
|     74 
|  10.8% 
| 
|-
|  detached HEAD                  
|     71 
|  10.4% 
| 
|-
|  stash                          
|     68 
|  10.0% 
| 
|-
|  mergetool                      
|     67 
|   9.8% 
| 
|-
|  interactive rebase             
|     66 
|   9.7% 
| 
|-
|  reflog                         
|     54 
|   7.9% 
| 
|-
|  submodules                     
|     52 
|   7.6% 
| 
|-
|  shallow clone                  
|     31 
|   4.5% 
| 
|-
|  commit template                
|     24 
|   3.5% 
| 
|-
|  eol conversion                 
|     22 
|   3.2% 
| 
|-
|  gitattributes                  
|     21 
|   3.1% 
| 
|-
|  bundle                         
|     17 
|   2.5% 
| 
|-
|  worktree                       
|     17 
|   2.5% 
| 
|}
<!-- ##----------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|colspan="2" |   255 / 683   
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|colspan="2" |   687         
| 
|}
<!-- ## table end
 -->

This table is sorted by count.

Detached HEAD support and stash command were long requested; no wonder they are popular.

== Documentation ==
=== 44. Do you use the GIT wiki? ===
=== 45. Do you find GIT wiki useful? ===
=== 46. Do you contribute to GIT wiki? ===
=== 47. Do you find GIT's on-line help (homepage, documentation) useful? ===
=== 48. Do you find help distributed with GIT useful (manpages, manual, tutorial, HOWTO, release notes)? ===
=== 49. Do you contribute to GIT documentation? ===
=== 50. What could be improved on the GIT homepage? ===
=== 51. What topics would you like to have on GIT wiki? ===
=== 52. What could be improved in GIT documentation? ===

== Getting help, staying in touch ==
=== 53. Have you tried to get GIT help from other people? ===
=== 54. If yes, did you get these problems resolved quickly and to your liking? ===
=== 55. Would commerical (paid) support from a support vendor be of interest to you/your organization? ===
=== 56. Do you read the mailing list? ===
=== 57. If yes, do you find it useful? ===
=== 58. Do you find traffic levels on GIT mailing list OK. ===
=== 59. Do you use the IRC channel (#git on irc.freenode.net)? ===
=== 60. If yes, do you find IRC channel useful? ===
=== 61. Did you have problems getting GIT help on mailing list or on IRC channel? What were it? What could be improved? ===

== Open forum ==
=== 62. What other comments or suggestions do you have that are not covered by the questions above? ===

= References =

* [http://www.survey.net.nz/survey.php?94e135ff41e871a1ea5bcda3ee1856d9 Git User's Survey 2007] at [http://www.survey.net.nz Survey.Net].
* [http://thread.gmane.org/gmane.comp.version-control.git/53665 Git User's Survey 2007] thread on git mailing list: discussion about questions etc.
* [[GitSurvey2006]] - previous survey summary

__NOTOC__