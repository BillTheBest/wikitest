= Git User's Survey 2007 summary =

This is (partial) summary of Git User's Survey 2007,<<BR>>
ending at state from 28 September 2007
(response ident `46f95167c967b`).

The survey could be found there
* [http://www.survey.net.nz/survey.php?94e135ff41e871a1ea5bcda3ee1856d9 Git User's Survey 2007] at [http://www.survey.net.nz survey.net.nz] (closed)

You can get raw data on which this summary is based here:
* [http://git.or.cz/gitwiki/GitSurvey2007?action=[[AttachFile]]&do=get&target=surveydata.csv surveydata.csv]

There were 683 individual responses.<<BR>>
Note that count is not exactly number of people.

----
<b>Table of contents:</b>
<<<!-- ! TOC here -->(3)>>
----

== About you ==

=== 00. Date of response ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Date (extended range)          
|  Count 
|  Perc. 
| 
|-
|  Before                         
|      7 
|   1.0% 
| 
|-
|  During                         
|    584 
|  85.5% 
| 
|-
|  After                          
|     92 
|  13.5% 
| 
|}
<!-- ## table end
 -->

The ranges 'before', 'during' and 'after' refers to official duration of Git User's Survey 2007, from 20 August 2007 to 10 September 2007. Actually they are corrected to take into account the fact that local date on survey's server (or UTC date) might be different from local date on user computer, so duration of survey is taken as from 2007-08-19 to 2007-09-11.

Most responses are from the start of survey, 20 and 21 August (133 and 103 responses respectively).  If anyone is interested I can provide full date by date histogram. 

=== 01. What country are you in? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  Algeria                        
|  1   
| 
|-
|  Argentina                      
|  3   
| 
|-
|  Australia                      
|  25  
| 
|-
|  Austria                        
|  9   
| 
|-
|  Belgium                        
|  5   
| 
|-
|  Brazil                         
|  20  
| 
|-
|  Bulgaria                       
|  1   
| 
|-
|  Canada                         
|  44  
| 
|-
|  Chile                          
|  2   
| 
|-
|  China                          
|  4   
| 
|-
|  Colombia                       
|  2   
| 
|-
|  Czech Republic                 
|  10  
| 
|-
|  Denmark                        
|  7   
| 
|-
|  Ecuador                        
|  1   
| 
|-
|  Estonia                        
|  1   
| 
|-
|  European Union                 
|  1   
| 
|-
|  Finland                        
|  23  
| 
|-
|  France                         
|  36  
| 
|-
|  Germany                        
|  64  
| 
|-
|  Greece                         
|  3   
| 
|-
|  Hungary                        
|  2   
| 
|-
|  India                          
|  13  
| 
|-
|  Ireland                        
|  2   
| 
|-
|  Israel                         
|  6   
| 
|-
|  Italy                          
|  14  
| 
|-
|  Japan                          
|  4   
| 
|-
|  Jersey                         
|  1   
| 
|-
|  Latvia                         
|  1   
| 
|-
|  Malaysia                       
|  1   
| 
|-
|  Mexico                         
|  1   
| 
|-
|  Netherlands                    
|  15  
| 
|-
|  New Zealand                    
|  5   
| 
|-
|  Norway                         
|  14  
| 
|-
|  Philippines                    
|  3   
| 
|-
|  Poland                         
|  6   
| 
|-
|  Portugal                       
|  2   
| 
|-
|  Puerto Rico                    
|  1   
| 
|-
|  Romania                        
|  1   
| 
|-
|  Russian Federation             
|  6   
| 
|-
|  Samoa                          
|  1   
| 
|-
|  Serbia                         
|  1   
| 
|-
|  Singapore                      
|  2   
| 
|-
|  Slovak Republic                
|  1   
| 
|-
|  Slovenia                       
|  2   
| 
|-
|  South Africa                   
|  4   
| 
|-
|  Spain                          
|  11  
| 
|-
|  Sri Lanka                      
|  1   
| 
|-
|  Sweden                         
|  14  
| 
|-
|  Switzerland                    
|  15  
| 
|-
|  UK / US                        
|  1   
| 
|-
|  United Kingdom                 
|  40  
| 
|-
|  United States of America       
|  218 
| 
|-
|  Venezuela                      
|  1   
| 
|-
|  Vietnam                        
|  1   
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|  673 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|  673       
| 
|}

England and Scotland counts as United Kingdom here.  UK / US probablu means United Kingdom (Great Britain) or United States of America.  Table is sorted in alphabetical order.

As one can easily see, slightly less than third of GIT users are in the USA (those who answered this survey).

=== 02. What is your preferred non-programming language? ===

This is multiple answers question, although most people gave only one preferred language.

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  Afrikaans                      
|  1   
| 
|-
|  Bulgarian                      
|  1   
| 
|-
|  Castellano                     
|  2   
| 
|-
|  Catalan                        
|  1   
| 
|-
|  Chinese                        
|  2   
| 
|-
|  Czech                          
|  10  
| 
|-
|  Danish                         
|  6   
| 
|-
|  Dutch                          
|  12  
| 
|-
|  English                        
|  416 
| 
|-
|  Finnish                        
|  16  
| 
|-
|  French                         
|  33  
| 
|-
|  Galician                       
|  1   
| 
|-
|  German                         
|  58  
| 
|-
|  Greek                          
|  2   
| 
|-
|  Hebrew                         
|  1   
| 
|-
|  Hungarian                      
|  3   
| 
|-
|  Italian                        
|  9   
| 
|-
|  Japanese                       
|  1   
| 
|-
|  LSF (French sign language)     
|  1   
| 
|-
|  Norwegian                      
|  4   
| 
|-
|  Polish                         
|  5   
| 
|-
|  Portuguese                     
|  11  
| 
|-
|  Romanian                       
|  1   
| 
|-
|  Russian                        
|  13  
| 
|-
|  Serbian                        
|  1   
| 
|-
|  Slovenian                      
|  2   
| 
|-
|  Spanish                        
|  13  
| 
|-
|  Swedish                        
|  13  
| 
|-
|  Swiss                          
|  1   
| 
|-
|  Ukrainian                      
|  1   
| 
|-
|  Vietnamese                     
|  1   
| 
|}
<!-- ## ----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="border-top: dotted;"> invalid (computer language)    
|  37  
| 
|-
|  not understood                 
|  4   
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|  662 / 683   
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|  684         
| 
|}
<!-- ## table end
 -->

The question itself is not well formulated, as one can see from the number of answers with computer language, and "not understood" answers.  I am not native English speaker, but there were suggestions to use "natural language" instead of "non-programming language".

Around two third of git users prefer English language, at least for dealing with computers.

=== 03. How old are you? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  < 18                           
|  11   
| 
|-
|  18-21                          
|  75   
| 
|-
|  22-25                          
|  174  
| 
|-
|  26-30                          
|  203  
| 
|-
|  31-40                          
|  146  
| 
|-
|  41-50                          
|  45   
| 
|-
|  51-75                          
|  13   
| 
|-
|  76+                            
|  0    
| 
|}
<!-- ##------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|  667 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|  667       
| 
|}

Youngest git user who answered this survey is 14 years old, oldest is 74 years old. This is quite a span, I'd say,  The age of 25 got most count (51 answers).

=== 04. Which programming languages you are proficient with? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer                         
|  Count 
|  Perc. 
| 
|}
<!-- ##---------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  C                       
|    582 
|  85.2% 
| 
|-
|  shell                   
|    449 
|  65.7% 
| 
|-
|  Perl                    
|    244 
|  35.7% 
| 
|-
|  Python                  
|    316 
|  46.3% 
| 
|-
|  Tcl/Tk                  
|    26  
|   3.8% 
| 
|}
<!-- ##---------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|colspan="2" |   642 / 683   
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|colspan="2" |  1617         
| 
|}
<!-- ## table end
 -->

The choices include programming languages used by git.  This is multiple choice question (you can be proficient in more than one programming language).

It look like there is only around 3/4 people proficient in Perl as compared to Python; it looks like Python is more popular. C is most popular; shell is more popular than Perl or Python.  The fewest people are proficient in Tcl/Tk. I'm sorry, git-gui and gitk guys; it looks like not many developers... around 4% of git users.

You can check what are the contributions of each programming language to Git code at [http://www.ohloh.net/projects/278/analyses/latest Git Code Analysis at Ohloh].  In the table below there is shown state on November 2007 (there are also some lines / files I guess wrongly attributed to Assembly and DOS batch script):

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Language 
|  LoC [%] 
|  Perc. 
| 
|}
<!-- ##----------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  C/C++          
|  51% 
|  85.2% 
| 
|-
|  shell script   
|  28% 
|  65.7% 
| 
|-
|  Perl           
|  13% 
|  35.7% 
| 
|-
|  Tcl            
|   4% 
|   3.8% 
| 
|-
|  Python         
|   2% 
|  46.3% 
| 
|-
|  Emacs Lisp     
|   1% 
|        
| 
|-
|  CSS            
|  <1% 
|        
| 
|}
<!-- ##----------------------------------
 -->

== Getting started with GIT ==

=== 05. How did you hear about GIT? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  LKML<<[[FootNote]](LKML = Linux Kernel Mailing List)>>                           
|  109 
| 
|-
|  LWN (Linux Weekly News)        
|  39  
| 
|-
|  KernelTrap                   
|  15  
| 
|-
|  KernelTraffic                
|  1   
| 
|-
|  kernel.org                     
|  9   
| 
|-
|  freedesktop.org                
|  5   
| 
|-
|  Linus presentation at Google   
|  48  
| 
|-
|  Slashdot                       
|  28  
| 
|-
|  blog                           
|  19  
| 
|-
|  community site<<[[FootNote]](Community site are sites like Digg, Reddit and "planet" sites.)>>              
|  12  
| 
|-
|  news site                      
|  34  
| 
|-
| <-2>
| 
|-
|  searching Internet<<[[FootNote]](This includes answer of "Google")>>          
|  6   
| 
|-
|  other SCM / SCM research<<[[FootNote]](This includes some other SCM mailing list, VCS comparison, and searching for an SCM.)>>    
|  20  
| 
|-
|  Internet                       
|  32  
| 
|-
|  IRC                            
|  6   
| 
|-
| <-2>
| 
|-
|  Linux kernel uses it           
|  73  
| 
|-
|  some project uses git          
|  47  
| 
|-
| <-2>
| 
|-
|  developer by name<<[[FootNote]](Linus Torvalds, Carl Worth, Keith Packard, Randal Schwartz,...)>>           
|  21  
| 
|-
|  friend                         
|  39  
| 
|-
|  word of mouth                  
|  15  
| 
|-
|  work / coworker                
|  22  
| 
|-
| <-2>
| 
|-
|  initial GIT announcement       
|  12  
| 
|-
|  BitKeeper news               
|  24  
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="border-top: dotted;"> don't remember                 
|  13  
| 
|-
|  other / uncategorized          
|  44  
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                     
|  658 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)              
|  693       
| 
|}
<!-- ## table end
 -->

<b>Footnotes:</b>
<<[[FootNote]]>>

This was free-form question, and tabularizing answers was quite a work.  It is taken as multiple choice question (for example link to Linus presentation at Google found at Slashdot counts as both "Slashdot" and "Linus presentation at Google" answer).

Other / uncategorized includes for example GoogleTalk IM, 3 answers IIRC.  There was one answer of 'through the CPAN module' (?).

Note that [[GitLinks#head-057cdf07b6c4202733d061096c8ac1aef2f4a232:Linus Torvalds presentation]] at [http://video.google.com/videoplay?docid=-2199332044603874737 Google Videos] / [http://www.youtube.com/watch?v4XpnKHJAok8 YouTube] got it's own category, and generated quite a bit of git users.

=== 06. Did you find GIT easy to learn? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer                         
|  Count 
|  Perc. 
| 
|-
|  very easy                      
|     38 
|   5.6% 
| 
|-
|  easy                           
|    136 
|  19.9% 
| 
|-
|  reasonably                     
|    318 
|  46.6% 
| 
|-
|  hard                           
|    131 
|  19.2% 
| 
|-
|  very hard                      
|     33 
|   4.8% 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|colspan="2" |   656 / 683   
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|colspan="2" |   656         
| 
|}
<!-- ## table end
 -->

Nice gaussian curve. Most users find it reasonably easy to use. On the other hand git is not considered easy...

=== 07. What helped you most in learning to use it? ===

<b>TO DO (partial)</b><<BR>>
646 / 683 non-empty responses

Some of the responses:
* documentation (generic)
* man pages
* examples / usage cases in man pages
* everyday GIT, tutorials and user's manual
* wiki examples
* reading mailing list / comp.version-control.git
* people on IRC (not only #git)
* advice from other users / friends / colleagues
* (unofficial) documentation on the web: guides, articles, blogs etc. (Here probably should be a sublist of them, with count)
* a development community and/or its documentation, mailing list
   e.g. WINE wiki, Source Mage GNU/Linux development community
* Google (Google searches)
* helpful error messages
* source code, reading the parts of git in shell script
* cogito
* using git in a live project / experimenting / trial and error<<BR>><i>Example answer:</i>That I was able to just delete the entire repository and start over.  That all my mistakes stayed local and didn't affect upstream repos.
* working on an established project that had documented processes for using git
* writing code for both plumbing and Porcelain<<BR>> writing documentation / tutorial for project / article
* understanding the internal representation of the repository;<<BR} good / simple design, basic principles; understanding concepts
* experience of working in software industry;<<BR>> prior experience with version control systems (GNU Arch, SVN, BK, hg)
* version 1.5 
* gitk, qgit; git-gui

One of more interesting:
* We hired a consultant to give us a tutorial

=== 08. What did you find hardest? ===

<b>TO DO (partial)</b>
596 / 683 non-empty responses

Some of the responses:
* the level of complexity
* user interface: too much / inconsistent commands, too many / cryptic options; distinction between plumbing and porcelain; many ways to do a task; insufficient error messages; 'git <cmd> --help' prints manpage, not concise help summary
* obtuse command messages
* weak porcelain, e.g. git-update-index very central
* git-merge was plumbing
* remote / tracking branches; fetching, pushing and pulling, synchronizing repositories; the fact that push is not an opposite of pull; understanding the difference between committing and publishing
* handling multiple remote repositories
* merge vs rebase, deciding on proper workflow; working with topic branches; modifying a patch series
* merge defaults (which branch gets merged)
* git vs StGIT: slightly different merge conflict handling
* making it work in non-POSIX environments; working with git on case-insensitive and other strange filesystems; compiling on exotic OS, for example AIX; generating man pages
* lack of / bad / outdated / insufficient / badly structured docs; hard to find something in the documentation; git lingo in documentation, documentation for users who know git; using Cogito in some of documentation
* understanding of concepts, thinking in git way; understanding basic concepts and terminology
* distributed SCM concepts, paradigm shift; idea of non-linear history
* index (staging area): understanding, having it visible
* git-diff not showing added files
* commands named differently from equivalents in other SCM; differences from other SCM: git-commit needs '-a' to commit all; changes, strange semantics of git-add, multiple branches in repo; understanding terminology
* importing history from other SCM (bzr, svn)
* reverting changes, amending commit, undoing a commit
* keeping track of where am I, of which version I'm working with finding which branch the change was made on
* lerning to use it as maintainer; maintaining "perfect patch series", keeping history clean; rewritig history before 'git rebase -i'
* dealing with merge conflicts; figuring how to undo failed merge and restart it
* learning conventions git expects but didn't document clearly like commit message formatting
* setting up shared repo / shared server; setting up remote repository
* dealing with modified files (dirty tree) when switching branches, merging (pulling) and rebasing
* checking out past revisions (or tagged revisions) with the intention to return to newer revision
* creating independent branch, i.e. branch without ancestry
* exploring the history and previous versions of particular files, which are renamed and/or moved around, especially before '--follow' was added
* some hot-shot peple in the community (on the mailing list)
* setting up gitweb
* having to use CLI interface
* no <i>some language</i> documentation

More interesting answers:
* All idiosyncrasies that make (made) sense for Linus' workflow but aren't really orthogonal or predictable. 
* Listening to whiners complain about how hard it was to learn
* Thinking outside the narrow box defined by previous SCMs.
* Not having used an SCM before!
* Following the explosive growth of features.
* Having a day job taking most of my time away from git.
* Convincing my boss to use it.

Conclusions:
* some of the things got corrected, like separate remote layout being default for non-bare repositories, using [http://www.kernel.org/pub/software/scm/git/docs/git-add.html git-add] (porcelain) instead of [http://www.kernel.org/pub/software/scm/git/docs/git-update-index.html git-update-index] (plumbing) in documentation and command messages, promoting [http://www.kernel.org/pub/software/scm/git/docs/git-merge.html git-merge] to porcelain, creating [http://www.kernel.org/pub/software/scm/git/docs/git-remote.html git-remote] for managing multiple repositories and remote branches, better documentation including creating [http://www.kernel.org/pub/software/scm/git/docs/user-manual.html Git User's Manual].
* some things are hard because of historical reasons, such like naming of commands, or consistency of options, and would be difficult to change.
* doing things "git way", such as making index visible (and requiring 'git commit -a' to commit changes in all files), or rename detection instead of rename tracking, or storing filenames and file contents 'as-is' (without translation) are I think here to stay
* some of things are intrinsically hard, and would stay that way, for example the distributed SCM concept, or nonlinear history.

=== 09. When did you start using git? From which version? ===

<b>TO DO (partial)</b>

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer (version) 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  (no version string)            
|  165 
| 
|-
|  0.99x                          
|  26  
| 
|-
|  0.x                            
|  12  
| 
|-
|  1.0x                           
|  31  
| 
|-
|  1.1x                           
|  9   
| 
|-
|  1.2x                           
|  12  
| 
|-
|  1.3x                           
|  22  
| 
|-
|  1.4x                           
|  147 
| 
|-
|  1.5x                           
|  198 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                    
|  626 / 683  
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)             
|  626        
| 
|}
<!-- ## table end
 -->

<b>NOTE!</b> This table shows <b>only</b> answers in which there was given Git version explicitely. Some people gave date, some people wrote how long they have used git. Those answers needs also processing; they are <i>not presented</i> here.

It looks like the Git users community is divided into part of users who started using it from beginning, or almost from beginning, and users which started using git post v1.3.0 (post e.g. making separate remotes the default layout of branches).

== Other SCMs ==

=== 10. What other SCMs did/do you use? ===

This question is not well thought out, as it gathers together (in the free-form which is not easy to tabularize with large number of responses we got) SCMs which one used and no longer uses, SCMs which are used in parallel with git, and SCMs which are used instead of git (which are chosen as main SCM for a project). Nevertheless it shows with which VCS, and its conceps, are users familiar with.

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <tablestyle="font-size: smaller;" rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  AccuRev                      
|  3   
| 
|-
|  Aegis                          
|  1   
| 
|-
|  Bazaar                         
|  19  
| 
|-
|  Bazaar-NG                      
|  50  
| 
|-
|  BitKeeper                    
|  27  
| 
|-
|  CCC                            
|  1   
| 
|-
|  CMS (Digital)                  
|  1   
| 
|-
|  CMS (VAX)                      
|  1   
| 
|-
|  CMS (VMS)                      
|  1   
| 
|-
|  CVCS                           
|  1   
| 
|-
|  CVS                            
|  454 
| 
|-
|  ClearCase                    
|  43  
| 
|-
|  CodeMgr                      
|  1   
| 
|-
|  Continuus                      
|  1   
| 
|-
|  Darcs                          
|  78  
| 
|-
|  DesignSync                   
|  1   
| 
|-
|  GNU Arch                       
|  57  
| 
|-
|  Mercurial                      
|  92  
| 
|-
|  Monotone                       
|  31  
| 
|-
|  Omniworks                      
|  1   
| 
|-
|  OpenCM                       
|  1   
| 
|-
|  PRCS                           
|  1   
| 
|-
|  PVCS                           
|  12  
| 
|-
|  Perforce                       
|  50  
| 
|-
|  Quilt                          
|  2   
| 
|-
|  RCS                            
|  61  
| 
|-
|  SCCS                           
|  18  
| 
|-
|  SCM                            
|  1   
| 
|-
|  SCSS                           
|  1   
| 
|-
|  SVK                            
|  19  
| 
|-
|  Serena Version Manager         
|  1   
| 
|-
|  SourceForge                  
|  1   
| 
|-
|  Sourcerer's Apprentice         
|  1   
| 
|-
|  StarTeam                     
|  4   
| 
|-
|  Subversion                     
|  524 
| 
|-
|  Sun NSE                        
|  2   
| 
|-
|  Sun TeamWare                 
|  4   
| 
|-
|  VCS                            
|  1   
| 
|-
|  VMS                            
|  1   
| 
|-
|  VSS                            
|  26  
| 
|-
| <-2>
| 
|-
|  'cp -a'                        
|  1   
| 
|-
|  akpm patch scripts             
|  1   
| 
|-
|  custom in-house tools          
|  1   
| 
|-
|  diff patch                     
|  2   
| 
|-
|  notes-on-paper-made-by-hand    
|  1   
| 
|-
|  really horrible stuff          
|  1   
| 
|-
|  scripts for 'shadow trees'     
|  1   
| 
|-
|  tarballs                       
|  1   
| 
|-
|  tlib                           
|  1   
| 
|-
| <-2>
| 
|-
|  none                           
|  9   
| 
|-
|  undisclosed                    
|  1   
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                     
|  654 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)              
|  1615      
| 
|}
<!-- ## table end
 -->

The above table is in alphabetical order. It was generated from free-form answers, tabularized as multiple choice answer.

Note that this question does not distinguish between SCMs/VCSs which were used prior to Git and used no longer, SCMs which are used beside (in parallel) to Git perhaps interacting with Git, and SCMs which are used instead of Git. Also note that this is <u>Git User's</u> survey, so it those number for example do not represent number of e.g. users of Mercurial as compared to e.g. users of Subversion.

Below there is table of SCM used, sorted by the number of responses.  Note that annotations (like "a little CVS") were not weighted here. Only SCMs which has count more that 10 are shown.  One person can (and usually did) chose more than one SCM.

In the table below links are to [http://en.wikipedia.org Wikipedia] article about specified SCM.

{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##--------------------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  [[WikiPedia:Subversion_(software)|Subversion]]  
|  524  
| 
|-
|  [[WikiPedia:Concurrent_Versions_System|CVS]]    
|  454  
| 
|-
|  [[WikiPedia:Mercurial_(software)|Mercurial]]    
|  92   
| 
|-
|  [[WikiPedia:Darcs|Darcs]]                       
|  78   
| 
|-
|  [[WikiPedia:Revision_Control_System|RCS]]       
|  61   
| 
|-
|  [[WikiPedia:GNU_arch|GNU Arch]]                 
|  57   
| 
|-
|  [[WikiPedia:Bazaar_(software)|Bazaar-NG]]       
|  50   
| 
|-
|  [[WikiPedia:Perforce|Perforce]]                 
|  50   
| 
|-
|  [[WikiPedia:IBM_Rational_ClearCase|[[ClearCase]]]]  
|  43   
| 
|-
|  [[WikiPedia:Monotone_(software)|Monotone]]      
|  31   
| 
|-
|  [[WikiPedia:[[BitKeeper]]|[[BitKeeper]]]]               
|  27   
| 
|-
|  [[WikiPedia:Microsoft_Visual_SourceSafe|VSS (MS Visual [[SourceSafe]]])] 
|  26   
| 
|-
|  [[WikiPedia:Baz_(software)|Bazaar]]<<[[FootNote]](Bazaar-NG (bzr) might been mistaken for old Bazaar (baz); the tabularization is biased towards Bazaar-NG, e.g. answer of "Bazaar" was taken for Bazaar-NG, only "baz" for Bazaar)>> 
|  19   
| 
|-
|  [[WikiPedia:SVK|SVK]]                           
|  19   
| 
|-
|  [[WikiPedia:Source_Code_Control_System|SCCS]]   
|  18   
| 
|-
|  [[WikiPedia:PVCS|PVCS]]                         
|  12   
| 
|}
<!-- ##--------------------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="border-top: dotted;"> tla+baz+bzr<<[[FootNote]](tla+baz+bzr = GNU Arch (tla), old Bazaar (baz), Bazaar-NG (bzr))>> 
|  129  
| 
|}
<!-- ##--------------------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base 
|  654 / 683 
| 
|}

<b>Footnotes:</b>
<<[[FootNote]]>>

As you can see two most popular SCMs are Subversion ('svn') and CVS, with Subversion being a bit more popular.  Among distributed SCMs with most count are Mercurial ('hg') and Arch and its descendants ('tla', 'baz', 'bzr'). From proprietary (non-OSS) revision control systems Perforce ('p4'), ClearCase (and ClearCase UCM), BitKeeper ('bk') and Visual SourceSafe (aka. that awful M$ one ;-) got most count.

Note that the count for given version control system does not reflect <i>preferences</i> of git users. One can be forced to use specified SCM.

Compare this to the following table of SCMs popularity, based on the number of people who have given SCM in [http://www.ohloh.net/about/faq#stack "stack"] on [[WikiPedia:Ohloh|Ohloh]].  Note that this data might be biased because Ohloh for now supports only CVS, SVN (Subversion) and Git repositories.  Data taken on 11-11-2007:

{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Project 
|  Stacks 
| 
|}
<!-- ##--------------------------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  Subversion                     
|  1568 
| 
|-
|  CVS                            
|  223  
| 
|-
|  Git                            
|  212  
| 
|-
|  Mercurial                      
|  76   
| 
|-
|  Bazaar-NG                      
|  43   
| 
|-
|  Darcs                          
|  40   
| 
|-
|  SVK                            
|  36   
| 
|-
|  Monotone                       
|  16   
| 
|}

See also question 35: "How does GIT compare to other SCM?".

=== 11. Why did you choose GIT? ===

(Very similar to question 36. "What do you like about using GIT?")

<b>TO DO</b><<BR>>
643 / 683 non-empty responses

=== 12. Why did you choose other SCMs? ===

<b>TO DO</b><<BR>>
606 / 683 non-empty responses

=== 13. What would you require from GIT to enable you to change... ? ===

What would you require from GIT to enable you to change, if you use other SCM for your project?

474 / 683 non-empty responses

List of answers, without count (which for this question is, I think, less important), divided into broad categories, is shown below

Generic:
* being more user-friendly, easier to use<<BR>> more friendly output from commands<<BR>> better and clearer error messages<<BR>> stable command semantics
* reduced number of (visible) commands<<BR>> clear separation of plumbing and porcelain
* consistent set of commands<<BR>> consistency if command flags
* easier to learn (easier learning curve)
* more stability
* support UTF-16
* A clearer UI. Read the monotone list archive. 70% of the mails are UI related. The result is an clear and easy to use intuitive UI that does what you expect in most cases.

Performance:
* better performance on massive trees (FreeBSD)
* good speed on NTFS (MS WIndows)

Documentation:
* a good documentation<<BR>> user/installation documentation<<BR>> troubleshooting guide<<BR>> 'Git For Dummies', 'The Git Book' 
* documented workflows (including centralized repo workflow, or at least documenting how and why replace it with better workflow)
* development model tutorials<<BR>> more example usage<<BR>> best practices<<BR>> case studies
* guide for designing a branch policy for a shared repository
* screencasts
* documentation in one's native language
* good in-depth administative documentation
* maybe git-tutor program

Specific features:
* partial-tree checkouts (partial checkout), checking out arbitrary subdirectories
* granular permissions (ACL) within the tree, e.g. restricting translators to the po/ subdirectory
* shallow clone from a given commit: git clone --depth <commit>
* automatic (re)packing
* lightweight working copies
* better and well documented submodule support
* multi-project support / multiple sandboxes support
* git-bind/unbind (like in bzr)
* git-sync
* cvs-compatible syntax as an option
* tracking empty directories
* more friendliness with corporate firewalls
* ability to preserve permissions/modes/EA of files and directories<<BR>> access control features /  visibility access control<<BR>> disabling some users from accessing certain parts of the repository
* being able to merge directories (instead of branches)
* FastCGI gitweb
* some embedded keyword capabilities similar to those provided by CVS and Subversion
* ignore files during merge
* R/W git server (allow push), with NIS, LDAP support
* pull/rebase into dirty tree
* clearcase dynamic view-like support (externally?)
* better http(s) push via WebDAV: hooks<<BR>> working and easy to setup push over https
* plain simple FTP upload (push) and download (clone, fetch)
* better working through corporate firewalls

Portability:
* native MS Windows support, easy installer package, even better support for all platforms; easier setup on Solaris and AIX
* pre-prepared <u>static</u> binaries for FreeBSD, MacOS X, MS Windows
* less dependencies
* support for more platforms
* a portable version of git, one binary + library (gitbox)
* Windows version(s) mentioned on homepage

GUI:
* better (G)UI<<BR>> TortoiseGit for MS Windows, or other Windows front-end<<BR>> good, advanced GTK+ 2.x tool to visualize git
* history graph conected to file tree in GUIs
* easier management of remotes using GUI
* better diff viewing tools (side-by-side, like KDiff3)

Other SCMs:
* seamless import<<BR>> BitKeeper / ClearCase import/sync<<BR>> tool to import TeamWare history into Git
* better SCM interop
* SCM rosetta / "Git for <SCM> users" documentation
* import/export tools supporting incremental import and export
* 100% Subversion interoperability
* git update (stash, fetch, rebase, unstash) a la CVS
* git-svnserve
* svn:externals support

Tools:
* improved administrative tools
* reasonable plugins for IDE (e.g. Visual Studio, KDevelop, NetBeans)<<BR>> full Eclipse / NetBeans / IntelliJ support
* good integration with apps like Trac and Bugzilla<<BR>> work with continuous integration tools (Cruise Control etc...)
* Git + Launchpad
* libification (for tools support)

Other:
* SourceForge / Gna! / Google Projects support<<BR>> (free) hosting with git facilities<<BR>> FOSS hosting sites supporting git
* commercial support / corporate backing, contractual service
* number of users, to convince my co-workers that they're not a silly minority; popularity
* projects switching to git
* user education
* marketing, advocacy videos
* convincing coworkers / other members / boss<<BR>> willingness of the other developers to learn to use it
* training/certification
* a stop to the constant bashing of other SCMs - this doesn't get you any friends drop the arrogant attitude, work with the rest of the community and try to make something people can understand in an hour
* http://wiki.FreeBSD.org/[[VersionControl]]
* At work it'd require some kind of miracle.  Huge Perforce repository of highly interrelated stuff in which people can make sweeping changes in a single changelist. Lots of tools that access Perforce.  Slow as hell.

=== 14. Did you import your repository from foreign SCM? What SCM? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##-------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  N/A                            
|  15    
| 
|-
|  No                             
|  169   
| 
|-
|  Yes                            
|  372   
| 
|}
<!-- ##-------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base        
|  556 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum) 
|  556       
| 
|}
<!-- ## table end
 -->

This is anly partial analysis, as it deals only with first part of question. Second part, which SCM, has free-form structure and needed further processing.

One can see that around half of git users have imported (at least one project) from foreign SCM.

=== 15. What tool did you use for import? ===

Note that one can use more than one tool, for example for different repositories.

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  by hand                        
|  7   
| 
|-
|  custom script                  
|  21  
| 
|-
|  fast-import script             
|  3   
| 
|-
| <-2>
| 
|-
|  Tailor                         
|  28  
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <colspan="2" rowstyle="font-style: italic; background-color: #ffffed; border-top: double;"> CVS import 
| 
|-
|  git-cvsimport                  
|  81  
| 
|-
|  parsecvs                       
|  12  
| 
|-
|  fromcvs                        
|  2   
| 
|-
|  cvs2git                        
|  1   
| 
|-
|  cvstogit                       
|  1   
| 
|}
<!-- ##.........................................
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <colspan="2" rowstyle="font-style: italic; background-color: #ffffed; border-top: double;"> Subversion import 
| 
|-
|  git-svn                        
|  150 
| 
|-
|  git-svnimport                  
|  66  
| 
|}
<!-- ##.........................................
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <colspan="2" rowstyle="font-style: italic; background-color: #ffffed; border-top: double;"> Other SCMs 
| 
|-
|  git-archimport                 
|  15  
| 
|-
|  bk2git (customized)            
|  1   
| 
|-
|  darcs2git                      
|  4   
| 
|-
|  git-p4                         
|  4   
| 
|-
|  git-p4import                   
|  1   
| 
|-
|  git-ucmimport                  
|  1   
| 
|-
|  hg-to-git                      
|  2   
| 
|-
|  hg2git                         
|  2   
| 
|-
|  hgpullsvn                      
|  1   
| 
|-
|  hgsvn                          
|  1   
| 
|-
|  moin2git                       
|  1   
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="border-top: dotted;"> unspecified                    
|  18   
| 
|-
|  N/A                            
|  114 
| 
|}
<!-- ##------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base         
|  467 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)  
|  538       
| 
|}
<!-- ## table end
 -->

=== 16. Do your GIT repository interact with other SCM? Which SCM? ===

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer                         
|  Count 
| 
|}
<!-- ##-------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  N/A                            
|  35    
| 
|-
|  No                             
|  228   
| 
|-
|  Yes                            
|  228   
| 
|}
<!-- ##-------------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base                           
|  491 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum)                    
|  491   
| 
|}
<!-- ## table end
 -->

This is anly partial analysis, as it deals only with first part of question. Second part has free-form structure and needs further processing.

One can see that around third of git users interacts (for at least one project) with foreign SCM, as compared to half of git users which have imported other SCM.

=== 17. What tool did/do you use to interact? ===

This question is free-form question, but it is treated as multiple-choice question for the porposes of creating table of responses.

<!-- ## table begin
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; background-color: #ffffcc;"> Answer 
|  Count 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
|  by hand                        
|  10  
| 
|-
|  custom script                  
|  16  
| 
|-
| <-2>
| 
|-
|  Tailor                         
|  4   
| 
|-
|  convert-repo                   
|  1   
| 
|-
| <-2>
| 
|-
|  fromcvs                        
|  1   
| 
|-
|  git-cvsexportcommit            
|  8   
| 
|-
|  git-cvsimport                  
|  19  
| 
|-
|  git-cvsserver                  
|  2   
| 
|-
| <-2>
| 
|-
|  git-svn                        
|  164 
| 
|-
|  git-svnimport                  
|  2   
| 
|-
| <-2>
| 
|-
|  git-p4                         
|  4   
| 
|-
|  git-p4import                   
|  1   
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="border-top: dotted;"> unspecified                    
|  2   
| 
|-
|  N/A                            
|  153 
| 
|}
<!-- ##-----------------------------------------
 -->
{| border="1" cellpadding="2" cellspacing="0"
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Base        
|  385 / 683 
| 
|-
| <rowstyle="font-weight: bold; font-style: italic; background-color: #ccffff;"> Total (sum) 
|  388       
| 
|}
<!-- ## table end
 -->

The only tool which really allows to interact (two-way) with other SCM is git-svn (164 / 232). 

== How you use GIT ==
=== 18. Do you use GIT for work, unpaid projects, or both? ===
=== 19. How do you obtain GIT?  Source tarball, binary package, or pull the main repository? ===
=== 20. What hardware platforms do you use GIT on? ===
=== 21. What OS (please include the version) do you use GIT on? ===
=== 22. What projects do you track (or download) using GIT, or git web interface? ===
=== 23. How many people do you collaborate with using GIT? ===
=== 24. How big are the repositories that you work on? ===
=== 25. How many different projects do you manage using GIT? ===
=== 26. Which porcelains do you use? ===
=== 27. Which git GUI do you use? ===
=== 28. Which (main) git web interface do you use for your projects? ===
=== 29. How do you publish/propagate your changes? ===
=== 30. Does git.git repository include code produced by you? ===

== Internationalization ==
=== 31. Is translating GIT required for wider adoption? ===
=== 32. What do you need translated? ===
=== 33. For what language do you need translation for? ===

== What you think of GIT? ==
=== 34. Overall, how happy are you with GIT? ===
=== 35. How does GIT compare to other SCM tools you have used? ===
=== 36. What do you like about using GIT? ===
=== 37. What would you most like to see improved about GIT? ===
=== 38. If you want to see GIT more widely used, what do you think we could do to make this happen? ===

== Changes in GIT (since year ago, or since you started using it) ==
=== 39. Did you participate in previous Git User's Survey? ===
=== 40. What improvements you wanted got implemented? ===
=== 41. What improvements you wanted didn't get implemented? ===
=== 42. How do you compare current version with version from year ago? ===
=== 43. Which of the new features do you use? ===

== Documentation ==
=== 44. Do you use the GIT wiki? ===
=== 45. Do you find GIT wiki useful? ===
=== 46. Do you contribute to GIT wiki? ===
=== 47. Do you find GIT's on-line help (homepage, documentation) useful? ===
=== 48. Do you find help distributed with GIT useful (manpages, manual, tutorial, HOWTO, release notes)? ===
=== 49. Do you contribute to GIT documentation? ===
=== 50. What could be improved on the GIT homepage? ===
=== 51. What topics would you like to have on GIT wiki? ===
=== 52. What could be improved in GIT documentation? ===

== Getting help, staying in touch ==
=== 53. Have you tried to get GIT help from other people? ===
=== 54. If yes, did you get these problems resolved quickly and to your liking? ===
=== 55. Would commerical (paid) support from a support vendor be of interest to you/your organization? ===
=== 56. Do you read the mailing list? ===
=== 57. If yes, do you find it useful? ===
=== 58. Do you find traffic levels on GIT mailing list OK. ===
=== 59. Do you use the IRC channel (#git on irc.freenode.net)? ===
=== 60. If yes, do you find IRC channel useful? ===
=== 61. Did you have problems getting GIT help on mailing list or on IRC channel? What were it? What could be improved? ===

== Open forum ==
=== 62. What other comments or suggestions do you have that are not covered by the questions above? ===

= References =

* [http://www.survey.net.nz/survey.php?94e135ff41e871a1ea5bcda3ee1856d9 Git User's Survey 2007] at [http://www.survey.net.nz Survey.Net].
* [http://thread.gmane.org/gmane.comp.version-control.git/53665 Git User's Survey 2007] thread on git mailing list: discussion about questions etc.
* [[GitSurvey2006]] - previous survey summary

__NOTOC__