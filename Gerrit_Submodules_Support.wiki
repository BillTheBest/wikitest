Gerrit Submodules Support

Below is a short description of how to use the submodule support in Gerrit.

You need to create subprojects and a super project:

<pre>
$ ssh user@gerrit -p 29418 gerrit create-project --name super --empty-commit
$ ssh user@gerrit -p 29418 gerrit create-project --name a --empty-commit
$ ssh user@gerrit -p 29418 gerrit create-project --name b --empty-commit
</pre>

Add the subprojects to the super project:

<pre>
$ git submodule add ssh://localhost/a ./a
$ git submodule add ssh://localhost/b ./b
</pre>

edit the .gitmodules file and add <code>revision=.</code>:

<pre>
[submodule "a"]
	path = a
	url = ssh://localhost/a
	revision = .

[submodule "b"]
	path = b
	url = ssh://localhost/b
	revision = .
</pre>


Add, commit and push the .gitmodules file:

<pre>
$ git commit add .gitmodules<br>
$ git push ssh://localhost/super HEAD:refs/heads/master
</pre>

Now the basic setup is done. To test that everything is working:

<pre>
$ mkdir user1
$ cd user1
$ git clone ssh://localhost/super
$ cd super
$ git submodule init
$ git submodule update
</pre>

do the same for a user2:

<pre>
$ cd ../..
$mkdir user2
$ cd user2
$ git clone ssh://localhost/super
$ cd super
$ git submodule init
$ git submodule update
</pre>

Create a commit in a submodule:

<pre>
$ cd a
$ touch hello
$ git add hello
$ git commit -m "hello"
$ git push ssh://localhost/a HEAD:refs/heads/master
</pre>

move into the user1 directory again and pull the superproject:

<pre>
cd ../../user1
git pull
git submodule update
ls a
</pre>

make sure that the hello file is in the output.