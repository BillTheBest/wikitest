== Gerrit Submodules Support ==


Below is a short description of how to use the submodule support in Gerrit.

=== Create projects ===

You need to create subprojects and a super project:

<pre>
$ ssh user@gerrit -p 29418 gerrit create-project --name super --empty-commit
$ ssh user@gerrit -p 29418 gerrit create-project --name a --empty-commit
$ ssh user@gerrit -p 29418 gerrit create-project --name b --empty-commit
</pre>

=== Connect projects ===

Add the subprojects to the super project:

<pre>
$ git submodule add ssh://localhost/a ./a
$ git submodule add ssh://localhost/b ./b
</pre>



=== edit the .gitmodules file === 
add <code>revision=.</code>:

<pre>
[submodule "a"]
	path = a
	url = ssh://localhost/a
	revision = .

[submodule "b"]
	path = b
	url = ssh://localhost/b
	revision = .
</pre>

=== Push to server ===

Add, commit and push the .gitmodules file:

<pre>
$ git commit add .gitmodules<br>
$ git push ssh://localhost/super HEAD:refs/heads/master
</pre>

=== Test that it works. ===
Now the basic setup is done. To test that everything is working:

<pre>
$ mkdir user1
$ cd user1
$ git clone ssh://localhost/super
$ cd super
$ git submodule init
$ git submodule update
</pre>

do the same for a user2:

<pre>
$ cd ../..
$mkdir user2
$ cd user2
$ git clone ssh://localhost/super
$ cd super
$ git submodule init
$ git submodule update
</pre>

=== Create a commit === 
Create a commit in a submodule:

<pre>
$ cd a
$ touch hello
$ git add hello
$ git commit -m "hello"
$ git push ssh://localhost/a HEAD:refs/heads/master
</pre>

move into the user1 directory again and pull the superproject:

<pre>
cd ../../user1
git pull
git submodule update
ls a
</pre>

make sure that the hello file is in the output.

== Notes on possible "buildbot" verification implementation ==
# Poll for changes going into the super project
# Check approval status of all changes in the super project (ask, "can i verify this?")
# Pulling into the super project we'll get a merge commit (possibly)
# Verify that tree
# Upon success:
## Upload the superproject merge commit
## Set verified and merge all submodule changes and all superproject changes in a single 'review' command
##* <code>ssh -p 29418 review.example.com gerrit review --verified=+1 --submit sub1-commit-id,sub2-commit-id,super-commit-id</code>