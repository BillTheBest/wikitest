Deletions are marked like this. 	Additions are marked like this.

<b>Table of contents:</b> 	

<<<!-- ! TOC here -->(2)>> 	<a href=" http://www.labicicletta.com/images/it/grandefratello/Grande-Fratello.html ">Grande Fratello</a>

<b>See also:</b>
* [[GitFaq]] (Frequently Asked Questions) page
* [[GitWorkflows]] which attempts to decribe actual, useful, real-world things that people do with git, step by step.

= General =

<<Anchor(--amend)>>
== How to fix the most recent commit ==

Git allows you to easily fix up the most recent commit you've made on
a branch with the --amend option:

For example the following command will allow you to alter
the commit message at the top of current head:
<pre><nowiki>
$ git commit --amend
</nowiki></pre>
while
<pre><nowiki>
$ git commit -s --amend
</nowiki></pre>
will let you alter the commit message and will also automatically
add a sign-off message for you.

<<Anchor(rewrite-hist)>>
== How to change commits deeper in history ==

Since history in Git is immutable, fixing anything but the most recent commit
(commit which is not branch head) requires that the history is rewritten from
the changed commit and forward.

You can use [[Cogito]]'s [http://www.kernel.org/git/?p=cogito/cogito-doc.git;a=blob;hb=HEAD;f=txt/cg-admin-rewritehist.1.txt cg-admin-rewritehist(1)] for that.

You can use [[StGIT]] for that, initialize branch if necessary, uncommitting up to the commit you want to change, pop to it if necessary, make a change then refresh patch (with `-e` option if you want to correct commit message), then push everything and stg commit.

Or you can use rebase to do that. Create new temporary branch, rewind it to the commit you want to change using `git reset --hard`, change that commit (it would be top of current head), then rebase branch on top of changed commit, using <code><nowiki>git rebase --onto <tmp branch> <commit after changed> <branch></nowiki></code>.

<<Anchor(only-merges)>>
== How to get only merges in gitk? ==

With recent version of git you can use
<pre><nowiki>gitk --full-history -- a//b
</nowiki></pre>
which will give you each commit that changes that nonexistent file (because there can't be file with double slash in name in git repository), and the full commit history for those (i.e. all the merges).

If you use "git log", you also need to add "--parents" while gitk will do it for you.

<<Anchor(wrong-branch)>>
== What to do if you have realized that you are on wrong branch? ==
If you have not commited your changes yet, it is enough to '<code><nowiki>cg switch <correct-branch></nowiki></code>' (if you use [[Cogito]]), or '<code><nowiki>git checkout -m <correct-branch></nowiki></code>' (if you use [[Git|core Git]] at least v1.4.1-rc2).

Let's assume that you wanted your changes to go on top of <i><current></i>, but by accident you committed your changes on top of <i><master></i> for example, and that the commit before your commits (the tip of <i><master></i> branch should be) is <i><before></i>. Let as assume that all changes are committed, and the working dir is clean.

First, create temporary branch (just in case), e.g.
<pre><nowiki>git branch <tmpBranch>
</nowiki></pre>
Then you can reset <i><master></i> branch to correct commit
<pre><nowiki>git reset <before>
</nowiki></pre>
Move temporary branch to correct branch, i.e. <i><current></i>, using
<pre><nowiki>git rebase --onto <current> <master> <tmpBranch>
</nowiki></pre>
After resolving all conflict what is left is to fast-forward <i><current></i> to correct commit, and remove temporary branch
<pre><nowiki>
git checkout <current>
git reset --hard <tmpBranch>
git branch -d <tmpBranch>
</nowiki></pre>
I'm not sure if <code><nowiki>--hard</nowiki></code> option is really needed.

<<Anchor(diff-repositories)>>
== How to compare two local repositories ==
In [[Cogito]] you can use, being in one of repositories
<pre><nowiki>GIT_ALTERNATE_OBJECT_DIRECTORIES=../cogito/.git/objects cg-diff -r `GIT_DIR=../cogito/.git cg-object-id -c HEAD`..HEAD
</nowiki></pre>
if you want to compare current repository with (in this example) cogito repository. In [[Git]] you would nearly exactly the same
<pre><nowiki>GIT_ALTERNATE_OBJECT_DIRECTORIES=../cogito/.git/objects git-diff-tree $(GIT_DIR=../cogito/.git git rev-parse --verify HEAD) HEAD
</nowiki></pre>

<<Anchor(git rm .)>>
== How to remove all files which are missing from working directory? ==
<pre><nowiki>git ls-files -z --deleted | git update-index -z --remove --stdin
</nowiki></pre>

= StGIT =

<<Anchor(stg-rebase)>>
== How to rebase StGIT stack? ==
If you have <n> patches on stack, and you want to rebase it (for example because git branch got rebased, or you want to base stack on different branch)
<pre><nowiki>stg pop -a
git reset --hard <new_base>
stg push -n <n>
</nowiki></pre>

= Web =

<<Anchor(RSS)>>
== How to generate RSS feed off-line? ==

You can either adapt [http://bent.latency.net/git2rss git2rss] tool by Bennett Todd to your needs (which is mentioned on [[Self:InterfacesFrontendsAndTools#git2rss|Interfaces Frontends And Tools]] page), or use <i>gitweb</i> to do that, running it as a script. Assuming that <code><nowiki>gitweb.cgi</nowiki></code> is setup correctly, you can use:
<pre><nowiki>env REQUEST_METHOD=GET QUERY_STRING='p=git/git.git;a=rss' \
./gitweb.cgi | (read; read; cat)</nowiki></pre>
where of course instead of <code><nowiki>git/git.git</nowiki></code> you put project (git repository) you are interested in.

<<Anchor(SSH-tunnel)>>
== How to push/pull via ssh to host behind gateway? ==

There are two possible solutions. With first, using `ProxyCommand` option of ssh, you can connect to the entire network behind firewall. In your ssh configuration file, for example <code><nowiki>~/.ssh/config</nowiki></code> put the following:
<pre><nowiki>Host *.foo.internal
     [[ProxyCommand]] ssh gateway.foo.com exec nc %h %p</nowiki></pre>
(where `'%h'` expands to the host you connect to, and `'%p'` to the port you are using). You have to have `nc` ([http://www.vulnwatch.org/netcat/ netcat] or [http://netcat.sourceforge.net/ GNU Netcat]) installed on gateway, but this should be no problem as it is 22K binary. Note that path is expanded on local side, while it should be to file on gateway side.

Second is slightly faster, doesn't need any tool besides ssh, but you have to run port forwarding command before connecting, must make sure that ssh tunnel is up, and must be set up host for host. In your ssh configuration file, for example <code><nowiki>~/.ssh/config</nowiki></code> put the following:
<pre><nowiki>Host hostname
     NoHostAuthenticationForLocalhost yes
     HostName localhost
     Port 2222</nowiki></pre>
where `hostname' is the name you would be using for connecting. Before trying to connect to host begind gateway, you must run
<pre><nowiki>ssh -f -N -L 2222:host.foo.internal:22 username@gateway.foo.com
</nowiki></pre>
Of course port numbers must match (and port number should be above 1024 if you won't be running ssh tunnel as root). If you have sufficiently new ssh, you can add `'-M'` option, for use with `ControlMaster` option. You can also use [http://www.harding.motd.ca/autossh/ autossh] for running port forwarding/ssh tunnel.

<<Anchor(SSH-options)>>
== How to pass ssh options in git? ==
You can set the path of the ssh executable to use with the GIT_SSH
environment variable. Create a shell script like

<pre><nowiki>
#!/bin/sh
exec ssh --your-options-- $*
</nowiki></pre>

and make GIT_SSH point to it.

But if you have just a couple of "standard" setups, then it's really better to use a ".ssh/config" file instead. If you want to use different options "dynamically" (the same host, different options), you can just use different "fake hostnames". For example, you can do
<pre><nowiki>
Host private.host.com
        User myname
        Hostname host.com
        IdentityFile /home/myname/.ssh/private-identity
Host public.host.com
        User groupname
        Hostname host.com
        IdentityFile /home/myname/.ssh/public-identity
</nowiki></pre>
and now you can ssh to "host.com" using different identities by just using "private.host.com" and "public.host.com" respectively.
----
[[CategoryGitDocumentation]]

__NOTOC__