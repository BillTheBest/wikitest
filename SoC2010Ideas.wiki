''Table of Contents:''
__TOC__
----
= Git Community projects =

Git plans to apply for the Google Summer of Code 2010.  Although we have not been accepted yet, here are a few interesting projects:

== Merge helper for LaTeX files ==

Not everything tracked by Git is source code for programs; Git is actually a fantastic tool to collaborate on writing documents in LaTeX format.

Unfortunately, the merge conflicts created by Git's recursive merge are better suited for C code than for LaTeX, as the latter is frequently written such that a single line will produce a whole paragraph.

Therefore, a tool is needed which uses Git's output to present the differences between the two differing versions and the base version in a nice way.  The tool should also offer an easy method to pick one version over the other, and to edit the result (and still show the three versions, pointing to the position corresponding to the current cursor position).

''Goal:'' Provide a graphical tool to help with merge conflicts specifically in LaTeX files.<br>
''Language:'' As preferred by the student, but it should be portable between Linux, MacOSX and Windows.<br>
''Mentor:''  Johannes Schindelin<br>

== An implementation of Git's recursive merge in JGit ==

The recursive merge algorithm is surprisingly powerful for its simplicity. A few fine points have to be taken care of, though, such as rename detection and file/directory conflicts.

The basic building block, however, is a diff algorithm, and JGit recently got its own implementation of that.

An implementation of the recursive merge will allow easy implementation of ''cherry-pick'', and consequently of ''rebase -i'', too.

''Goal:'' Implement the recursive merge algorithm in JGit.<br>
''Language:'' Java.<br>
''Mentor:''  Johannes Schindelin<br>

== A remote helper for svn ==

Since the 1.6.6 release git has support for 'remote helpers'. These are standalone programs that allow git to talk to foreign scm's. On the other side, git has had support for 'git-svn' for quite a while now, providing (somewhat clumsy) support for working with svn repositories with git.

In order to make working with svn repositories as easy as working with regular git repositories, a new remote helper needs to be written that will bridge between svn and git. This can be done either by rewriting the current 'git svn' code (which is written in perl, and somewhat arcane), or by creating a helper from scratch, possibly using the svn bindings directly (although that might result in licensing conflicts).

Implementing a remote helper is fairly simple, it can be as simple as hooking up an implementation of fast-export and fast-import for the target source. Doing so has a lot of advantages though, since it allows users to ''natively'' access the other vcs. That is, at the end of the project, 'git clone svn://example.com' will Just Work. Remote helpers can be implemented in any language (as long as they speak the already defined 'remote-helper' protocol), but unless there is a very compelling reason not to, should be implemented in C, perl, or python.

''Goal:'' Create a remote-helper for svn.<br>
''Language:'' C, perl, or python.<br>
''Mentor:''  Sverre Rabbelier<br>

== Git Fetch/Clone Mirror Support ==

Git automatic mirroring is a system for making Git repositories distribute automatically. It is the first stage of more general P2P features planned.  The idea is that when fetching data from a server, the server can inform the client of mirrors of the repository, which the client can fetch the majority of the data from, then fetch any remaining objects from the main server.  This way large Git projects can be served from local mirrors for distributed teams, or large hosts such as git.kernel.org or github can effectively offload bandwidth to closer or more lightly loaded servers.

More details of the proposed updates here (copied from a Google wave page on the subject) : http://gist.github.com/301798

''Goal:'' Allow Git fetch (client) and upload-pack (server) commands to list and partially fetch from mirror servers.<br>
''Language:'' C<br>
''Possible Mentors:'' Scott Chacon / Sam Vilain<br>

== libgit2 ==

Git's source code was not written to be reentrant, but to execute a program doing a specific task, and then exit. This is not really useful if you want to access a Git repository using a library rather than executing a program, catching and parsing its output. Further, some companies seem to be put off by the GPL that applies to Git's source code, and would prefer a BSD licensed library to base their product on.

Shawn Pearce already started libgit2, but as of now most functions are not implemented. This project's purpose is to implement most of these functions, and maybe provide language bindings for Python, Ruby, etc.

"Goal": Implement enough of libgit2 to access a Git repository from a C program and/or a Python/Ruby/Whatever script. 
"Language": C, doxygen 
"Possible Mentors": Andreas Ericsson (ae@op5.com)
"Suggested By": Scott Chacon

__NOTOC__