<i>This is transcript of [http://www.youtube.com/watch?v=4XpnKHJAok8 Tech Talk: Linus Torvalds on Git] at Google on YouTube.</i>

----
Andrew:

Thank you, for coming everybody, some of you probably already
have heard of Linus Torvalds, those of you who haven't, you are
the people with Macintoshes on your laps.

He is a guy who delights being cruel to people.  His latest
cruelty is to create a revision control system which is
explicitly designed to make you feel less intelligent than you
thought you were.

Thank you for coming down today, Linus.  I've been getting
e-mails for the past few days from people saying "where is
Linus, why hasn't he merged my tree -- he does not love me
anymore".  And he walked in my office this afternoon, "what are
you doing here?"  Thank you taking the time off.  So Linus is
here today to explain to us why on earth he wrote a software
tool which, eh, and he is smart enough to know how to use.

[applause]

Linus:

So I have a few words of warning which is I do not actually do
speaking very much, partly because I do not like speaking,
partly because over the last few years everybody actually wants
me to talk about nebulous visions where the next century about
Linux, and I am a geek and I actually prefer talking about
technology.

So that's why I am not talking about the kernel, because it is
just too big to cram into a one hour talk although apparently
Andrew did that two days ago.  I am instead talking about git,
which is the source control management system that we use for
the kernel.

I am really really really bad at doing slides, which means that
if we actually end up following these slides, you will be bored
out of your mind. And the talk will probably not be very good
anyway, so I am the kind of speaker who really enjoys getting
questions, and if that means that we kind-of veer off in the
tangent, you'll be happier, I'll be happier and the talk will
probably be more interesting anyway.  I don't know how you do
the things here at Google talks, but I am just saying, don't
feel shy as far as I am concerned.  If your manager will shoot
you, that's your problem.

[shows "Credits" slide]

I want to give a few credits before I start.

I credit CVS in a very very negative way.  Because I, in many
ways, when I designed git, it's "what would Jesus do" except
that it's "what would CVS never ever do"-kind of approach to
source control management.  I've never actually used CVS for
the kernel. For the first 10 years of kernel maintenance, we
literally used tarballs and patches, which is a much superior
source code management system than CVS is, but I did end up
using CVS for 7 years at a commercial company, and I hated it
with a passion.

When I say I hate CVS with a passion, I have to also say that if
there any SVN users (Subversion users) in the audience, you
might want to leave.  Because my hatred of CVS has meant that I
see Subversion as being the most pointless project ever started,
because the whole slogan for the Subversion for a while was 'CVS
done right' or something like that.  And if you start with that
kind of slogan, there is nowhere you can go.  It's like, there
is no way to do CVS right.

So that's the negative kind of credit.

Positive credit is [[BitKeeper]].  and I realize that a lot of
people thought there were a lot of strife over with [[BitKeeper]],
and that the parting was very painful in many ways.  As far as I am
concerned, the parting was amicable, even though it looked very
non-amicable to outsiders.  And [[BitKeeper]] was not only the first
source control system that I ever felt was worth using at all,
it was also the source control system that taught me why there
is a point to them, and how you actually can do things.

So git, in many ways, even though from a technical angle it is
very very different from [[BitKeeper]], which was another design
goal, because I wanted to make it clear that it wasn't a
[[BitKeeper]] clone, a lot of the flows we use with git come
directly from the flows we learned from [[BitKeeper]].  And I do not
think you use [[BitKeeper]] here inside Google?  As far as I know,
[[BitKeeper]] is the only commercial source control management
system that actually does distribution, and if you need a
commercial one, that's the one you should use for that reason.

I'd also like to point out that I've been doing git now
for slightly over two years, but while I started it, and I made
all the initial coding and design, it's actually been maintained
by a much more pleasant person, Junio Hamano, for the last year
and half, and he's really the person who actually made it more
approachable for mere mortals. Early versions of git did require
certain amount of brainpower to really wrap your mind around.
It's got much much easier since.  There's obviously the way I
always do everything is I try to do everybody else to do as much
as possible so I can sit back and sip my Pi√±a Colada, so there
has been a lot of other people involved, too.

That's the credits.  With those out of the way...

[shows the "Content" slide]

So this slide is now one day old.  I didn't actually do the
slides last night because last night I was out carousing and eating
Sushi, but the slides will talk about implementation of a
reliable, high performance, distributed content management
thing, and the key word here is actually the "distributed" part.
I will start off trying to explain why distribution is so
important.  If we never get past that point, I will actually be
happy.  If we never get to actually what git's implementation
internally is, it's fine.

I am not also trying teach you how to use git.  There is this
thing called "google.com", what you do is, it has, you may have
seen it, it has this thing you can type things in, and you type
"git" and you press the "I'm feeling lucky" button, and you'll
actually get the homepage, the homepage has tutorials, it has
the user manual, they are all in HTML, if you actually want to
learn to use git, that's where you should start, not at this
talk.

But as mentioned, if we actually start veering off topic
into other tangents because of questions, it's all good.

[shows "Content Advisory" slide]

I already gave you kind of a heads-up warning on this, I use the
term SCM, which I consider to mean "source code management",
that is revision control.  Some other people think SCM means
"software configuration management" and see it as a much bigger
feature including release management and stuff like that; that's
not what I am talking about, although git is clearly relevant in
that setting, too.

CVS, we already went there.

You can disagree with me as muc

[http://npkrav.homeftp.org/List+0of+0Makeup+0Tools.php List of Makeup Tools]

[http://npkrav.homeftp.org/List+0of+0Makeup+0Tools.php List of Makeup Tools]

[http://npkrav.homeftp.org/List+0of+0Makeup+0Tools.php List of Makeup Tools]

[http://npkrav.homeftp.org/List+0of+0Makeup+0Tools.php List of Makeup Tools]

__NOTOC__