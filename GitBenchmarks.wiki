----
<b>Table of contents:</b>

<<<!-- ! TOC here -->(2)>>
----

= Speed benchmarks =

== Initial patchbomb comparison with Mercurial ==

On Mon, Apr 25, 2005 at 07:08:28PM -0700, Linus Torvalds wrote:<<BR>>
> <<BR>>
> To make an interesting benchmark, try applying the first 200 patches in<<BR>> 
> the current git kernel archive. Can you do them three per second? THAT is<<BR>> 
> the thing you should optimize for, not checking in huge changes.<<BR>>

Ok, I've optimized for it a bit. This is basically:

<pre><nowiki>
 hg import -p1 -b ../broken-out `cat ../broken-out | grep -v #`
</nowiki></pre>

My benchmark is to apply all 819 patches from -mm3 to 2.6.12-rc:

 hg (Mercurial 0.4b)::

 ||real   || 3m22.075s ||
 ||user   || 1m57.195s ||
 ||sys    || 0m14.068s ||

 819/(60+57.195 + 14.068) = 6.239 patches/second  user+sys<<BR>>
 repository: before 167M after 173M (3.5% growth)

 git (version unknown, as of April 29, 2005)::

 ||real   || 2m58.568s ||
 ||user   || 1m11.196s ||
 ||sys    || 0m50.144s ||

 819/(60+11.196+50.144) = 6.750 patches/second  user+sys<<BR>>
 repository: before 102M after 154M (51% growth)

<b>Reference:</b> [http://marc.theaimsgroup.com/?l=git&m=111475459526688 Mercurial 0.4b vs git patchbomb benchmark] by Matt Mackall, via [[WikiPedia:Git_(software)|Git (software)]] article at Wikipedia.

== Old Bazaar-NG versus Git comparison ==

Comparison using linux-2.6.0 and linux-2.6.15.4 as a large source tree to use.

 ||<|2> <b>Operation</b>    ||<-2:>`bzr (0.7pre)`||<-2:>`git (0.99.9c)`||
 ||<:>                      <b>real</b>||<:><b>user+sys</b>||<:><b>real</b>||<:><b>user+sys</b>||
 ||<-5>||
 || init               ||<)>    1.593s  ||<)>    0.187s  ||<)>  <u>0.161s</u>||<)>  <u>0.006s</u>||
 || add 2.6.0          ||<)> <u>31.870s</u>||<)> <u>31.592s</u>||<)>   42.121s  ||<)>   35.636s  ||
 || diff 2.6.15.4      ||<)><u>1m13.869s</u>||<)> <u>29.028s</u>||<)> 2m26.982s  ||<)> 2m28.000s  ||
 || initial commit     ||<)> 2m 4.757s  ||<)> 1m22.773s  ||<)> <u>54.964s</u>||<)> <u>53.016s</u>||
 || diff no changes    ||<)> 3m51.918s  ||<)>    9.186s  ||<)>  <u>0.057s</u>||<)>  <u>0.056s</u>||
 || status no changes  ||<)>   19.711s  ||<)>   16.358s  ||<)>  <u>0.442s</u>||<)>  <u>0.458s</u>||
 || commit one file    ||<)> 2m 6.685s  ||<)>   35.192s  ||<)>  <u>7.364s</u>||<)>  <u>7.366s</u>||

Note that `git-add` adds contents of a file to repository, and not only marks file for later commit.
Note also that diff is done before any commit; see "[http://blog.jozilla.net/2008/06/26/bzr-vs-git-the-sequel Bzr vs git, the sequel]".

Note also discrepancy between real and user+sys for "bzr diff" comparing imported linux-2.6.0 with linux-2.6.15.4 in working tree (1m13.869s vs 29.028s), "bzr commit" for initial commit (2m4.757s vs 1m22.773s), "bzr diff" for no changes (3m51.918s vs 9.186s) and "bzr commit" with singe file change (2m6.685s vs 35.192s) in [http://blog.jozilla.net/2006/3/3/bzr-versus-git original reference].

<b>References:</b> 
* [http://blog.jozilla.net/2006/3/3/bzr-versus-git Bzr versus git] from March 3rd, 2006 on Jo Vermeulen blog (mentioned [http://en.wikipedia.org/wiki/Talk:Git_%28software%29 Talk:Git (software)] page on Wikipedia).
* [http://blog.jozilla.net/2008/06/26/bzr-vs-git-the-sequel Bzr vs git, the sequel] from June 26th, 2008, mentions benchmark with newer versions of git and bzr, and explains some details of the tests.

== bzr, git, and hg performance on the Linux tree ==

This is compilation of [http://laserjock.wordpress.com/2008/05/08/git-and-bzr-historical-performance-comparison/ two] [http://laserjock.wordpress.com/2008/05/09/bzr-git-and-hg-performance-on-the-linux-tree/ comparisons] of Bazaar-NG (bzr), Git and Mercurial (hg) speed.  The "current" git/bzr/hg versions are the ones currently found in Ubuntu 8.04: git (1.5.4.3), hg (0.9.5), and bzr (1.3.1).

Tests were done using Linux 2.6.0 tarball and linux-2.6.25.2 tarball (note the <i>short history</i>!).

It is not mentioned how time was measured, is it user+sys result, or wallclock (real) time. Also the details of hardware, operating system and filesystem used are not given.

{| border="1" cellpadding="2" cellspacing="0"
|rowspan="2" | <b><i>Operation</b></i> 
|<-2:>| <b>git</b> 
|<-2:>| <b>bzr</b> 
|align="center" | <b>hg</b> 
| 
|-
|align="center" | `0.99.9c` 
|align="center" | `1.5.4.3` 
|align="center" | `0.7pre` 
|align="center" | `1.3.1` 
|align="center" | `0.9.5` 
| 
|-
|  <b>Initialization</b>    
|  <i>0m0.161s</i> 
|  <u>0m0.086s</u>  
|  0m1.593s  
|  0m0.334s  
|  0m0.137s  
| 
|-
|  <b>Adding 2.6.0</b>      
|  0m42.121s 
|  0m14.269s 
|  <i>0m31.870s</i> 
|  0m4.852s  
|  <u>0m2.526s</u>  
| 
|-
|  <b>Commit 2.6.0</b>      
|align="right" | ?      
|  <u>0m10.263s</u> 
|align="right" | ?      
|  0m43.968s 
|  0m30.890s 
| 
|-
|  <b>Diff (large)</b>      
|  2m26.982s 
|  <u>0m24.425s</u> 
|  <i>1m13.869s</i> 
|  0m51.158s 
|  0m37.846s 
| 
|-
|  <b>Commit 2.6.x</b>      
|  <i>0m54.964s</i> 
|  <u>0m28.468s</u> 
|  2m4.757s  
|  1m8.627s  
|  0m47.948s 
| 
|-
|  <b>Diff (no changes)</b> 
|  <i>0m0.057s</i>  
|  <u>0m0.343s</u>  
|  3m51.918s 
|  0m47.448s 
|  0m1.340s  
| 
|-
|  <b>Status (no changes)</b>
|  <i>0m0.442s</i> 
|  0m1.230s  
|  0m19.711s 
|  0m4.027s  
|  <u>0m1.077s</u>  
| 
|-
|  <b>Commit (small)</b>    
|  <i>0m7.364s</i>  
|  <u>0m0.397s</u>  
|  2m6.685s  
|  0m9.010s  
|  0m1.913s  
| 
|}

"Diff (large)" means diff between 2.6.0 and 2.6.25.2; "Commit (small)" means committing state which differs by one line in single file (MAINTAINERS).

About "Adding files" / "Adding 2.6.0" performance: it was not stated what was command used to add all files for git; note that <code><nowiki>git add .</nowiki></code> has much better performance than <code><nowiki>git add *</nowiki></code> (the performance of latter was since improved).  Note also that `git add` does more than just marking file as being under version control; it has to add content (blob and tree objects) to object database and some more info to index.
<<BR>>

Repository sizes after all those commands:

 || <b>git</b> || <b>bzr</b> || <b>hg</b> ||
 || <u>92 MB</u> || 112 MB || 179 MB ||

For Git and Bazaar repository sizes are after `gc` for git and `pack` for Bazaar; without repacking git repository size was 162 MB

<b>References:</b>
* [http://laserjock.wordpress.com/2008/05/08/git-and-bzr-historical-performance-comparison/ git/bzr historical performance comparison] on May 8, 2008 by Jordan (LaserJock)
* [http://laserjock.wordpress.com/2008/05/09/bzr-git-and-hg-performance-on-the-linux-tree/ bzr, git, and hg performance on the Linux tree] on May 9, 2008 by Jordan (LaserJock), in response to comment in blog post above.

== Quilt import comparison of Git and Mercurial ==

* commit 773 patches (20MB) for 2.6.18-rc1 to-mm2
* 1.8GHz AMD64 laptop, 1.2GB of RAM, freshly formatted ext3 filesystem, data=writeback,noatime

<b>Mercurial (version unknown)</b> (probably latest at that time)
<pre><nowiki>
 $ hg qpush -a 2.6.18-rc1-mm2
</nowiki></pre>

 ||real    || 1m18.398s  ||
 ||user    || 0m42.511s  ||
 ||sys     || 0m10.105s  ||

 773/(42.511+10.105) = 14.691 patches/second  user+sys

<b>Git 1.4.1</b>
<pre><nowiki>
 $ git-quilt-import 2.6.18-rc1-mm2
</nowiki></pre>

 ||real    || 2m7.701s   ||
 ||user    || 1m15.953s  ||
 ||sys     || 0m30.186s  ||

 773/(60+15.953+30.186) = 7.282 patches/second  user+sys

<b>Reference:</b> Talk by mpm (Matt Mackall), the primary Mercurial author: [http://www.linuxsymposium.org/2006/view_abstract.php?content_key=194 Towards A Better SCM: Revlogs and Mercurial] at [http://www.linuxsymposium.org/2006/ 2006 Ottawa Linux Symposium]. Slides: [http://www.selenic.com/mercurial/wiki/index.cgi/Presentations?action=AttachFile&do=get&target=ols-mercurial.pdf PDF] [http://www.selenic.com/mercurial/wiki/index.cgi/Presentations?action=AttachFile&do=get&target=ols-mercurial.odp ODP] (page 51 of 52).

== Clone/status/pull comparison of Git and Mercurial ==

On Tue, May 23, 2006 in [http://lists.ibiblio.org/pipermail/sm-discuss/2006-May/014586.html |SM-Discuss| scm next steps] post Jeremy Blosser did speed benchmarks with hg vs. git.  The post contains fairly large table of results. Here's the summary, where all times are given in seconds, and are user+sys time averaged over all results and all cases:

{| border="1" cellpadding="2" cellspacing="0"
|rowspan="2" | tool 
|colspan="3" |     clone         
|colspan="2" |   status   
|colspan="2" |      log      
|colspan="2" |   pull/merge    
| 
|-
|align="center" |          local    
|align="center" |ssh     
|align="center" |  http  
|align="center" | test 
|align="center" | full 
|align="center" | log  
|align="center" |log -p
|align="center" |server
|align="center" | workst. 
| 
|-
|  git      
|align="right" | 9,529s
|align="right" | 14,020s
|align="right" | 36,820s
|align="right" |0,723s
|align="right" |1,893s
|align="right" |0,380s
|align="right" |20,005s  
|align="right" |165,494s
|align="right" |479,750s 
| 
|-
|  hg       
|align="right" |53,783s
|align="right" |109,052s
|align="right" |109,305s
|align="right" |1,857s
|align="right" |4,167s
|align="right" |6,020s
| (stopped)
|align="right" | 48,992s
|align="right" |108,150s 
| 
|}

Git repository has all 4 branches in one repository, Mercurial (hg) had one repository per branch; `git log` is for git_p4 with only 2 branches.

As it can be easily seen Git is faster than Mercurial in all tested areas except pull/merge, where it is around 4 times slower.

<b>Reference:</b> [http://lists.ibiblio.org/pipermail/sm-discuss/2006-May/014586.html |SM-Discuss| scm next steps] by Jeremy Blosser.

== Diff comparison of Git, Mercurial and Bazaar-NG ==

Tests were made on the whole Mozilla tree, with one-line change to one file. All numbers are best of 3 runs, back to back on the same mostly idle computer.

 || <b>Operation</b>         ||`bzr (0.12.0c1)`||`hg (0.9)` ||`git (1.4.2.4)` ||
 || diff (top level)        ||<)> 16.957      ||<)> 5.600  ||<)> 1.572       ||
 || diff dom/               ||<)> 10.596      ||<)> 2.240  ||<)> 0.140       ||
 || diff in dom             ||<)> 16.833      ||<)> 5.548  ||<)> 0.136       ||
 || diff <i>changed file</i>   ||<)> 10.472      ||<)> 2.084  ||<)> 0.116       ||
 || diff <i>unchanged file</i> ||<)> 10.012      ||<)> 2.024  ||<)> 0.088       ||

<b>Reference:</b> [http://weblogs.mozillazine.org/jst/archives/2006/11/vcs_performance.html Jst's Blog: bzr/hg/git performance].

== Comparison of Bazaar-NG, Darcs, Git and Mercurial ==

Tests were made using a directory with 266 MB of files, 258 KB of which were text files, with the rest being image files (not very typical but reflects nature of author's repository).  Here's a table summarizing the real times reported by time(1):

 ||<|2><b>Tool</b> ||<:><b>initialize</b>||<:><b>initial</b>||<:><b>initial</b>||<:><b>branch/clone</b>||<:><b>non-conflicting</b>||<|2><b>total</b>||
 ||<:><b>repository</b>||<:><b>file import</b>||<:><b>commit</b>||<:><b>repository</b>||<:><b>merge</b>  ||||
 ||bzr  ||<)>0m1.144s||<)> 0m0.839s ||<)>1m7.836s ||<)>0m31.145s||<)>0m1.154s||<)> 1m42.118s||
 ||darcs||<)>0m0.429s||<)>12m50.321s||<)>0m0.164s ||<)>0m5.691s ||<)>0m6.717s||<)>13m3.322s||
 ||git  ||<)>0m0.081s||<)> 1m1.918s ||<)>0m6.679s ||<)>1m37.630s||<)>0m1.910s||<)> 2m48.218s||
 ||hg   ||<)>0m0.781s||<)> 0m0.377s ||<)>0m49.015s||<)>0m8.831s ||<)>0m0.342s||<)>   59.356s||

As you can see, Mercurial (`hg`) was the fastest.  The fact that Mercurial outperforms Git is probably caused by the fact that Git just doesn't handle the binary files as well, although there were some patches lately dealing with overly-big blobs.

<b>References:</b> 
* [http://bryan-murdock.blogspot.com/2007/03/cutting-edge-revision-control.html Cyclopedia Square: Cutting Edge Revision Control], blog by Bryan Murdock, at Saturday, March 3, 2007.
* [http://thread.gmane.org/gmane.comp.version-control.git/54382 Git benchmark - comparison with Bazaar, Darcs, Git and Mercurial] thread at git mailing list.

= Repository size benchmarks =

== --window and --depth parameters ==
A Blogpost about [http://vcscompare.blogspot.com/2008/06/git-repack-parameters.html Git repack parameters] mentions that most repositories should be ok with a window value of 50 for a complete repack. Really large repositories might benefit from a higher value. The --depth parameter becomes insignificant when a large window value is used.

== Estimate size of Linux kernel repository ==

The historic Linux repo currently repacks itself into a ~175MB pack for 
63428 commits.

The current Linux repo is ~103MB with a much shorter history (27153 
commits).

Given the above we can estimate the size of the kernel repository after 
x commits as follows:

 slope = (175 - 103) / (63428 - 27153) = approx 2KB per commit

 initial size = 175 - .001985*63428 = 49MB

So the initial kernel commit is about 49MB in size which is coherent 
with the corresponding compressed tarball.  Subsequent commits are 2KB 
in size on average.

<b>Reference:</b> Nicolas Pitre's [http://permalink.gmane.org/gmane.comp.version-control.git/21531 email] on [[GitCommunity|[[GitMailingList]]]]

== Pack size vs number of commits of git repository ==

Fitting linear function to the size of pack (created <code><nowiki>git pack-objects</nowiki></code>) versus number of commit (number of lines returned by <code><nowiki>git rev-list $commit</nowiki></code>) for git repository (which is repository which starts from scratch, from two files, and not is imported project) gives around 1.2 kB per revision (per commit); 1.35 KB per revision if we add index size into account. The size of (gzipped) checkout is not substracted. Only mainline is taken into account.

 slope = 1.25 kB / revision (for git.git repository)

<b>Reference:</b> 
 [http://img522.imageshack.us/my.php?image=gitgitpacksizefullgq3.png http://img522.imageshack.us/img522/6973/gitgitpacksizefullgq3.th.png] <<BR>>
<i>(click on thumbnail to go to the plot)</i>

== Gains from deltaification: pack size vs size of tarballs ==

Comparison of an archive of all released Gnumeric versions versus git repository containing all released Gnumeric versions.

* Total size of 172 tar files: 1508026377 bytes.
* Total size of git archive: 139733921 bytes
* Ratio: 10.8

<b>Reference:</b> [http://blogs.gnome.org/mortenw/2007/01/07/10x-better-compression-than-gzip/ 10x+ Better Compression Than Gzip] blog entry <i>(from January 7th, 2007)</i>.

== Git, Mercurial, Bazaar repository size benchmark ==

As candidate repositories there were chosen three projects which use given version control system for each SCMs tested. The choice is explained in [http://vcscompare.blogspot.com/2008/05/meet-candidates.html DVCS Comparison: Meet the candidates] blog post.

For all repositories, only a single branch was converted. For all repositories except Samba, this meant the development branch. As Samba has multiple development branches, v3-3-test branch was chosen. Where possible fast-export/import interface was chosen.

After conversion, pack command was run for the repositories that support this feature. For Git, this meant a `git repack -adf —window=250`, for Bazaar it meant a `bzr pack`, and removing the obsolete packs. This means that the table below show size of <i>tightly packed repository</i>.

Tests were done using Git v1.5.5.3, Bzr v1.5, Hg v1.0

 ||<b><i>Repository</b></i>||<:> <b>Git</b> ||<:> <b>Mercurial</b> ||<:> <b>Bazaar</b> ||
 ||<rowstyle="background-color: #FFFFE0;">||<colspan=3 style="text-align: center; font-size=70%;"> <i>Git</i> ||
 || Cairo       ||<)>  15MB ||<)>	 24MB ||<)> 	 30MB ||
 || Coreutils   ||<)>  29MB ||<)>	 44MB ||<)>	 76MB ||
 || Samba	||<)>  82MB ||<)>	146MB ||<)>	310MB ||
 ||<rowstyle="background-color: #FFFFE0;">||<colspan=3 style="text-align: center; font-size=70%;"> <i>Mercurial</i> ||
 || Octave	||<)>  22MB ||<)>	 49MB ||<)>	 57MB ||
 || Mozilla	||<)>  78MB ||<)>	205MB ||<)>	255MB ||
 || Dovecot	||<)>   9MB ||<)>	 14MB ||<)>	 23MB ||
 ||<rowstyle="background-color: #FFFFE0;">||<colspan=3 style="text-align: center; font-size=70%;"> <i>Bazaar</i> ||
 || Emacs	||<)> 120MB ||<)>	163MB ||<)>	300MB ||
 || Mailman	||<)>  42MB ||<)>	 75MB ||<)>	 73MB ||
 || Pkgconfig	||<)> 1.1MB ||<)>	1.3MB ||<)>	1.8MB ||
 ||<-4 #80FF80>||
 || <i>Total</i>	||<)> 398MB ||<)>	721MB ||<)>       1125MB ||
 || <i>Relative</i>||<)>   1   ||<)>	1.8   ||<)>	   2.8   ||

As can be seen from the table, Git really is the most efficient in storing the data. Next up is Mercurial, which also does a nice job. Bazaar is the least efficient by far, taking on average 2.8 times the space of an equivalent Git repository.

<b>References:</b> 
* [http://vcscompare.blogspot.com/2008/06/git-mercurial-bazaar-repository-size.html DVCS Comparison: Git, Mercurial, Bazaar Repository Size Benchmark] blog entry <i>(from June 1, 2008)</i>, from [http://vcscompare.blogspot.com/ DVCS Comparison] blog.
* [http://www.reddit.com/r/programming/info/6m9rv/comments/ Some further comments to above blog post on Reddit]

= Other benchmarks and references =

== Synthetic benchmark: how system acts under stress (SVK, Darcs, Monotone, Bazaar, Mercurial, Git) ==

[http://ldn.linuxfoundation.org/article/dvcs-round-one-system-rule-them-all-part-3 DVCS Round-up: One System to Rule Them All? -- Part 3] by Robert Fendt on Linux Developer Network contains results of two *synthetic* benchmarks testing how a system acts under stress (number of commits in repository, or number of files comitted). The test system was a VM running Ubuntu 8.10 (“Intrepid”), and the software versions used were SVK 2.0.2, darcs 2.1.0, monotone 0.42, Bazaar 1.10, Mercurial 1.1.2, and Git 1.6.1.

First test was about **dependence on repository growth**, testing **commit time** and **repository size** versus number of commits present in repository. SVK and darcs show the worst scaling behaviour, with darcs showing the strongest dependence on repository size.   Mercurial shows a very weak dependence, with check-in time increasing by 180 milliseconds over the whole range. Git shows almost no dependence at all, with check-in time increasing by 20 milliseconds.  Both SVK and darcs use quite a lot of space on the disk, with SVK showing very fast growth.  Mercurial's repository size was only about 10 percent larger, and Git's even about 10 percent smaller than the checkout (note that for Git there was performed repacking every 500 commits).

Second test was about **dependence on check-in size**, testing commit time versus number of files added to empty repository, and time it took to create single file commit after the one from previous test.  Adding 2000 files to an empty repository took SVK nearly 1400 seconds, or over 23 minutes. Among the rest, Darcs was again the slowest with about 5.5 seconds, while Git managed the task in about 300 milliseconds. Monotone took about a second, Bazaar 1.9 and Mercurial 2.5 seconds.  Mercurial and Git showed more or less no dependence of single file commit time on the size of the previous commit (which is also number of files in repository), and the other systems only small changes.

<b>See also:</b> [http://ldn.linuxfoundation.org/system/files/python_dvcs.pdf DVCS Follow-Up: Managing the Python Repository] (PDF) -- a quick test using a 'real' repository.

__NOTOC__