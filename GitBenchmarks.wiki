----
<b>Table of contents:</b>

<<<!-- ! TOC here -->(2)>>
----

= Speed benchmarks =

== Initial patchbomb comparison with Mercurial ==

On Mon, Apr 25, 2005 at 07:08:28PM -0700, Linus Torvalds wrote:<<BR>>
> <<BR>>
> To make an interesting benchmark, try applying the first 200 patches in<<BR>> 
> the current git kernel archive. Can you do them three per second? THAT is<<BR>> 
> the thing you should optimize for, not checking in huge changes.<<BR>>

Ok, I've optimized for it a bit. This is basically:

<pre><nowiki>
 hg import -p1 -b ../broken-out `cat ../broken-out | grep -v #`
</nowiki></pre>

My benchmark is to apply all 819 patches from -mm3 to 2.6.12-rc:

 hg (Mercurial 0.4b)::

  ||real   || 3m22.075s ||
  ||user   || 1m57.195s ||
  ||sys    || 0m14.068s ||

 819/(60+57.195 + 14.068) = 6.239 patches/second  user+sys<<BR>>
 repository: before 167M after 173M (3.5% growth)

 git (version unknown, as of April 29, 2005)::

  ||real   || 2m58.568s ||
  ||user   || 1m11.196s ||
  ||sys    || 0m50.144s ||

 819/(60+11.196+50.144) = 6.750 patches/second  user+sys<<BR>>
 repository: before 102M after 154M (51% growth)

<b>Reference:</b> [http://marc.theaimsgroup.com/?l=git&m=111475459526688 Mercurial 0.4b vs git patchbomb benchmark] by Matt Mackall, via [[WikiPedia:Git_(software)|Git (software)]] article at Wikipedia.

== Quilt import comparison of Git and Mercurial ==

* commit 773 patches (20MB) for 2.6.18-rc1 to-mm2
* 1.8GHz AMD64 laptop, 1.2GB of RAM, freshly formatted ext3 filesystem, data=writeback,noatime

 Mercurial (version unknown)::
<pre><nowiki>
 $ hg qpush -a 2.6.18-rc1-mm2
</nowiki></pre>

 ||real    || 1m18.398s  ||
 ||user    || 0m42.511s  ||
 ||sys     || 0m10.105s  ||

 773/(42.511+10.105) = 14.691 patches/second  user+sys

 Git 1.4.1::
<pre><nowiki>
 $ git-quilt-import 2.6.18-rc1-mm2
</nowiki></pre>

 ||real    || 2m7.701s   ||
 ||user    || 1m15.953s  ||
 ||sys     || 0m30.186s  ||

 773/(60+15.953+30.186) = 7.282 patches/second  user+sys

<b>Reference:</b> Talk by mpm (Matt Mackall), the primary Mercurial author: [http://www.linuxsymposium.org/2006/view_abstract.php?content_key=194 Towards A Better SCM: Revlogs and Mercurial] at [http://www.linuxsymposium.org/2006/ 2006 Ottawa Linux Symposium]. Slides: [http://www.selenic.com/mercurial/wiki/index.cgi/Presentations?action=AttachFile&do=get&target=ols-mercurial.pdf PDF] [http://www.selenic.com/mercurial/wiki/index.cgi/Presentations?action=AttachFile&do=get&target=ols-mercurial.odp ODP] (page 51 of 52).

== Clone/status/pull comparison of Git and Mercurial ==

On Tue, May 23, 2006 in [http://lists.ibiblio.org/pipermail/sm-discuss/2006-May/014586.html |SM-Discuss| scm next steps] post Jeremy Blosser did speed benchmarks with hg vs. git.  The post contains fairly large table of results. Here's the summary, where all times are given in seconds, and are user+sys time averaged over all results and all cases:

{| border="1" cellpadding="2" cellspacing="0"
|rowspan="2" | tool 
|colspan="3" |     clone         
|colspan="2" |   status   
|colspan="2" |      log      
|colspan="2" |   pull/merge    
| 
|-
|align="center" |          local    
|align="center" |ssh     
|align="center" |  http  
|align="center" | test 
|align="center" | full 
|align="center" | log  
|align="center" |log -p
|align="center" |server
|align="center" | workst. 
| 
|-
|  git      
|align="right" | 9,529s
|align="right" | 14,020s
|align="right" | 36,820s
|align="right" |0,723s
|align="right" |1,893s
|align="right" |0,380s
|align="right" |20,005s  
|align="right" |165,494s
|align="right" |479,750s 
| 
|-
|  hg       
|align="right" |53,783s
|align="right" |109,052s
|align="right" |109,305s
|align="right" |1,857s
|align="right" |4,167s
|align="right" |6,020s
| (stopped)
|align="right" | 48,992s
|align="right" |108,150s 
| 
|}

Git repository has all 4 branches in one repository, Mercurial (hg) had one repository per branch; `git log` is for git_p4 with only 2 branches.

As it can be easily seen Git is faster than Mercurial in all tested areas except pull/merge, where it is around 4 times slower.

<b>Reference:</b> [http://lists.ibiblio.org/pipermail/sm-discuss/2006-May/014586.html |SM-Discuss| scm next steps] by Jeremy Blosser.

== Diff comparison of Git, Mercurial and Bazaar-NG ==

Tests were made on the whole Mozilla tree, with one-line change to one file. All numbers are best of 3 runs, back to back on the same mostly idle computer.

 || <b>Operation</b>         ||`bzr (0.12.0c1)`||`hg (0.9)` ||`git (1.4.2.4)` ||
 || diff (top level)        ||<)> 16.957      ||<)> 5.600  ||<)> 1.572       ||
 || diff dom/               ||<)> 10.596      ||<)> 2.240  ||<)> 0.140       ||
 || diff in dom             ||<)> 16.833      ||<)> 5.548  ||<)> 0.136       ||
 || diff <i>changed file</i>   ||<)> 10.472      ||<)> 2.084  ||<)> 0.116       ||
 || diff <i>unchanged file</i> ||<)> 10.012      ||<)> 2.024  ||<)> 0.088       ||

<b>Reference:</b> [http://weblogs.mozillazine.org/jst/archives/2006/11/vcs_performance.html Jst's Blog: bzr/hg/git performance].

= Repository size benchmarks =

== Estimate size of Linux kernel repository ==

The historic Linux repo currently repacks itself into a ~175MB pack for 
63428 commits.

The current Linux repo is ~103MB with a much shorter history (27153 
commits).

Given the above we can estimate the size of the kernel repository after 
x commits as follows:

 slope = (175 - 103) / (63428 - 27153) = approx 2KB per commit

 initial size = 175 - .001985*63428 = 49MB

So the initial kernel commit is about 49MB in size which is coherent 
with the corresponding compressed tarball.  Subsequent commits are 2KB 
in size on average.

<b>Reference:</b> Nicolas Pitre's [http://permalink.gmane.org/gmane.comp.version-control.git/21531 email] on [[GitCommunity|[[GitMailingList]]]]

__NOTOC__