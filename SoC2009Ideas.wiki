= Welcome! =

Git is planning on applying to the Google Summer of Code 2009 program.  As mentoring organizations have not yet been accepted, there is no guarantee that Git will be asked to participate again this year.  This page is to help plan proposed student projects.

This page contains project ideas culled from the Git user and developer community.  You can get started by reading some project descriptions, and the mailing list thread(s) that spawned them.  Also consider joining the developer mailing list, or finding us on IRC.  Details can be found in [[GitCommunity]].

Don't like a project you see here?  Toss your own idea out there, it may be just the thing we have been looking for!

If you are interested, you can also find projects which got accepted previously in [[SoC2007Projects:2007]] and [[SoC2008Projects:2008]].

<<<!-- ! TOC here -->(2)>>

= General Requirements =
All projects have the following basic requirements:

* Unless otherwise stated, projects will require programming in C, as nearly all of Git is written in C, for maximum speed and portability.
* All materials must be released under the [http://www.gnu.org/copyleft/gpl.html GNU General Public License (GPL)], version 2.
* Individual students shall retain copyright on their works.
* Projects must be tracked and managed in Git, and published on [http://repo.or.cz].
* Weekly project status reports should be sent to the project's mentors.  Each status report should outline what was accomplished that week, any issues that prevented that week's goals from being completed, and your goals for the next week.  This will help you to break your project down into manageable chunks, and will also help the project's mentors to better support your efforts.

Interested students are encouraged to read the
[http://code.google.com/p/google-summer-of-code/wiki/AdviceforStudents Advice for GSoC Students Page],
as it has excellent suggestions that might help you to pick a
project and shape your proposal.

If your proposal is accepted by the Git Development Community
you will be expected to work on it full time during the summer.
Its cool if you want to take a week off for vacation, but remember
that Google is hiring you for the summer to help us improve Git.
That should be your focus.  Don't expect that you will be able to
work on your project for just 10 hours a week and then collect at
the end.

If your original proposal doesn't pan out or becomes too much of
a challenge, you should work with your mentor to help redefine it.
We really want to see every project succeed this summer, as there
is a great deal of interest in these projects from within the
user community.

Students can apply for the program at the
[http://code.google.com/soc/ Google Summer of Code website].
Please consider reviewing our [[SoC2008Template]] and answering
its questions as part of your application.

= New To Git? New To Open Source Development? =

A collection of smaller projects.  Pick one or two and get introduced
to the open source community!

== Restartable Clone ==

When cloning a large repository (such as KDE, Open Office, Linux kernel) there is currently no way to restart an interrupted clone.  It may take considerable time for a user on the end of a small pipe to download the data, and if the clone is interrupted in the middle the user currently needs to start over from the beginning and try again.  For some users this may make it impossible to clone a large repository.

<b>Goal:</b> Allow git-clone to automatically resume a previously failed download over the native git:// protocol.
<<BR>><b>Language:</b> C
<<BR>><b>Mentor:</b> Shawn Pearce (gsoc@spearce.org)
<<BR>><b>Suggested by:</b> Shawn Pearce [http://article.gmane.org/gmane.comp.version-control.git/55298 on gmane]

= Larger Projects =

== Implement pack v4/v5 for higher compression ==

Although Git's packfile format offers incredible disk space savings
over other VCS systems, we already know we can still do better.
A prototype design dubbed 'packv4' has been floating around the
Git world for almost two years, but has not been fully implemented
for inclusion in a shipping release.

At this point the implementation for 'packv4' would need to be
rewritten from scratch, as much of the affected parts of the core Git
code have been modified to support other enhancements.  A student
with a strong interest in data compression could really get into
this project and take it to places we have never thought possible.

<b>Goal:</b> Save at least 10% on current packv2 for benchmark
repositories (linux-2.6, git, mozilla, gcc) and boost runtime ~10%.
<<BR>><b>Language:</b> C
<<BR>><b>Suggested mentors:</b>
* Shawn Pearce (gsoc@spearce.org)
<<BR>><b>See:</b> [http://kerneltrap.org/mailarchive/git/2007/2/27/239830 on kerneltrap] and [http://article.gmane.org/gmane.comp.version-control.git/43016 the entire "understanding version 4 packs" thread on gmane]

== "Smart" HTTP based GIT Transport ==

Hosting a publicly available Git repository currently requires a server where a TCP port based service may be operated. This not permitted by most of the web site hosting companies except as part of their "dedicated" server offerings. This project is to implement a CGI based "smart" Git transport for Git's fetch and push operations, and the necessary client code. The completed project should also include support both authenticated and anonymous clients.

Most of what is required for the "smart" Git transport for this project is already implemented by the bundle facilities that Git already supports but changes to the existing bundle code may be necessary. The CGI component should be implemented in in a language that a majority of web site hosting companies permit to be used with their product offerings and should rely the Git suite of programs for most of the repository manipulation.

<b>Language:</b> Perl, C, shell, other
<<BR>><b>Goal:</b> Server (CGI) and client that supports fetch & push operation for both authenticated & anonymous clients.
<<BR>><b>Mentor:</b>
* Shawn Pearce (gsoc@spearce.org)

== Proper git-svn support on Windows ==

While we have a git-svn in msysGit (that was backed out for some time due to dependency problems), it is very slow, as it is based on an MSys perl (using a POSIX emulation layer) rather than a MinGW perl (using the Win32 API directly).  Also, the interaction between CR/LF handling (core.autocrlf = true) and git-svn seems to have issues.

This project requires knowledge of Perl, and persistence in dealing with the Win32 API.

<b>Language:</b> Perl, C, shell
<<BR>><b>Goal:</b> Substitute msysGit's Perl with a MinGW based one, and profile git-svn.
<<BR>><b>Mentor:</b>
* Johannes Schindelin (johannes.schindelin@gmx.de)

== Improve git-cheetah, a TortoiseSVN lookalike ==

git-cheetah is pretty rudimentary at the moment, and its development speed is glacial, even if it is basically working (but lacks a few functions).  However, it is much, much smaller and less complicated than, say, TortoiseSVN, and the goal is to provide most functionality by enhancing and calling git-gui, so it should be pretty easy to get a truly competitive Explorer extension.

Further, git-cheetah was started with X11 and MacOSX support in mind, so at least one of the two should be supported by the end of the project -- again, this should be relatively easy since the GUI part will be offloaded to git-gui.

<b>Language:</b> C, Tcl/Tk
<<BR>><b>Goal:</b> Make git-cheetah an Explorer plugin everybody wants to have.
<<BR>><b>Mentor:</b>
* Johannes Schindelin (johannes.schindelin@gmx.de)

== libgit2 ==

Git's source code was not written to be reentrant, but to execute a program doing a specific task, and then exit.  This is not really useful if you want to access a Git repository using a library rather than executing a program, catching and parsing its output.  Further, some companies seem to be put off by the GPL that applies to Git's source code, and would prefer a BSD licensed library to base their product on.

Shawn Pearce already started libgit2, but as of now most functions are not implemented.  This project's purpose is to implement most of these functions, and maybe provide language bindings for Python, Ruby, etc.

<b>Language:</b> C, doxygen
<<BR>><b>Goal:</b> Implement enough of libgit2 to access a Git repository from a C program and/or a Python/Ruby/Whatever script.
<<BR>><b>Mentor:</b>
* Johannes Schindelin (johannes.schindelin@gmx.de)
* Shawn Pearce (gsoc@spearce.org)

== svnserver ==

The idea here is implement something in Git that speaks the
Subversion protocol on the wire, but uses Git as the backend
storage. (This would be like the existing git-cvsserver.)

<b>Goal:</b> To be able to access git repository, at minimum read-only, from a Subversion client, at least svn CLI.
<<BR>><b>Language:</b> Open for proposal.
<<BR>><b>Suggested mentors:</b>
* Julian Phillips (has a partial python implementation!  at http://git.q42.co.uk/w/git_svn_server.git)

== Narrow and Sparse clone support ==

One of the things that Git is not currently very good at is handling repositories with large media in them.  There is no way to checkout a single file or directory, and the shallow clone support does not allow you to make changes and push back.

This project would implement the shallow, narrow and sparse checkout mechanisms to both the client and server side of Git, allowing you to clone:

* the last revision (shallow)
* a single directory (narrow)
* a single file (sparse)

It would accomplish this by downloading all of the commit and tree objects, which are generally small, but only the blobs that you ask for (or just getting the blobs when you need them). It would also allow you to do pushes back.

<b>Goal:</b> Enable narrow and sparse cloning options in Git.
<<BR>><b>Language:</b> C
<<BR>><b>Suggested by:</b>
* Scott Chacon (schacon@gmail.com)
<<BR>><b>See:</b> [http://n2.nabble.com/Git-and-Media-repositories....-td1446700.html on Nabble]

== git mirror-sync ==

An extension, rebirth and grand simplification of the key features of the (incomplete) [[GitTorrent]] projects from previous years.

Includes extensions to the git daemon protocol to handle automatic registration and verification of mirrors, expedient distribution of updates to the mirrors, mirror selection, and for extra points, download spreading (pulling fractions of bundles from a number of nodes) and/or "mob" fork support.  Thus yielding the major P2P benefits of [[GitTorrent]] in simple, incremental steps.  The result would be faster downloads, lower startup overheads, restartable cloning, a more resilient server network, push to any point in the cloud, etc.

For use for sites such as git.kernel.org, repo.or.cz, github.com, etc.  Implementations of [[GitTorrent]] exist at http://jonas.nitro.dk/gittorrent/libgtp.git/ and http://git.utsl.gen.nz/VCS-Git-Torrent, but the [[MirrorSync]] proposal is a simpler way forward, integrates better with git and would be preferred to proposals that would attempt to finish the [[GitTorrent]] proofs of concept.

<b>Goal:</b> to implement a useful amount of the [[MirrorSync]] proposal (http://code.google.com/p/gittorrent/wiki/[[MirrorSync]])
<<BR>><b>Language:</b> Open for proposal.
<<BR>><b>Suggested mentors:</b>
* Jonas Fonseca (designed the original protocol)
* Johannes Schindelin (interested party) 
* Sam Vilain (worked on [[GitTorrent]], designed [[MirrorSync]])
<<BR>><b>See:</b> [[SoC2008Projects:2008 GSoC project]]

= Other Resources =
* [[SoC2009Application]]
* 2008: [[SoC2008Projects:Accepted projects]], [[SoC2008Ideas:Proposed projects]]
* 2007: [[SoC2007Projects:Accepted projects]], [[SoC2007Ideas:Proposed projects]]

= Other links =
* [http://www.selenic.com/mercurial/wiki/index.cgi/SummerOfCode Mercurial ideas for GSoC 2008]
* [http://subversion.tigris.org/project_tasks.html Subversion ideas for Summer of Code]
* [http://subclipse.tigris.org/soc/tasks.html Subclipse Ideas for Google Summer of Code]

__NOTOC__