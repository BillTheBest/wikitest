Wikified version of [http://www.kernel.org/pub/software/scm/git/docs/gitglossary.html GIT Glossary], with some links to pages on this wiki added.

This list is sorted alphabetically:

; alternate object database : <<Anchor(alternate_object_database)>>
	Via the <i>alternates mechanism</i>, a [[#repository repository]] can inherit part of its
	[[#object_database object database]] from another object database, which is called
	"alternate".

; bare repository : <<Anchor(bare_repository)>>
	A <i>bare [[#repository repository]]</i> is normally an appropriately named
	directory with a `.git` suffix that does not have a
	[[#working_tree locally checked-out copy]] of any of the files under revision
	control.  That is, all of the `git` administrative and
	control files that would normally be present in the
	hidden `.git` sub-directory are directly present in
	the `repository.git` directory instead, and no other files
	are present and checked out.  Usually publishers of public
	repositories make bare repositories available.

; blob object : <<Anchor(blob_object)>><<Anchor(blob)>>
	Untyped [[#object object]], e.g. the contents of a file.

; branch : <<Anchor(branch)>>
	A "branch" is an active line of development.  The most recent
	[[#commit commit]] on a branch is referred to as the tip of
	that branch.  The tip of the branch is referenced by a branch
	[[#head head]], which moves forward as additional development
	is done on the branch.  A single git
	[[#repository repository]] can track an arbitrary number of
	branches, but your [[#working_tree working tree]] is
	associated with just one of them (the "current" or "checked out"
	branch), and [[#HEAD HEAD]] points to that branch.

        See also: [[BranchesInGit]].

; cache : <<Anchor(cache)>>
	Obsolete for: [[#index index]].

; chain : <<Anchor(chain)>>
	A list of objects, where each [[#object object]] in the list contains a
	reference to its successor (for example, the successor of a [[#commit commit]]
	could be one of its [[#parent parents]]).

; changeset : <<Anchor(changeset)>>
	BitKeeper/cvsps speak for "[[#commit commit]]". Since git does not store
	changes, but states, it really does not make sense to use
	the term "changesets" with git.

; checkout : <<Anchor(checkout)>>
	The action of updating the [[#working_tree working tree]] to a [[#revision revision]] which was
	stored in the [[#object_database object database]].

; cherry-picking : <<Anchor(cherry-picking)>>
	In [[#SCM SCM]] jargon, <i>"cherry pick"</i> means to choose a subset of
	changes out of a series of changes (typically commits)
	and record them as a new series of changes on top of
	different codebase.  In GIT, this is performed by
	"`git cherry-pick`" command to extract the change
	introduced by an existing [[#commit commit]] and to record it based
	on the tip of the current [[#branch branch]] as a new [[#commit commit]].

        See also: [http://www.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html git-cherry-pick(1)]

; clean : <<Anchor(clean)>>
	A [[#working_tree working tree]] is <i>clean</i>, if it corresponds to the [[#revision revision]]
	referenced by the current [[#head head]].  Also see "[[#dirty dirty]]".

; commit : <<Anchor(commit)>>
	<i>As a noun:</i> A single point in the
	git history; the entire history of a project is represented as a
	set of interrelated commits.  The word "commit" is often
	used by git in the same places other revision control systems
	use the words "revision" or "version".  Also used as a short
	hand for [[#commit_object commit object]].

	<i>As a verb:</i> The action of storing a new snapshot of the project's
	state in the git history, by creating a new commit representing the current
	state of the [[#index index]] and advancing current [[#HEAD HEAD]]
	(current [[#branch branch]] [[#head head]]) to point at the new commit.

; commit object : <<Anchor(commit_object)>>
	An [[#object object]] which contains the information about a particular
	[[#revision revision]], such as [[#parent parents]], committer, author, date and the
	[[#tree_object tree object]] which corresponds to the [[#directory top directory]] of the
	stored revision.

; core git : <<Anchor(core_git)>>
	Fundamental data structures and utilities of git. Exposes only
	limited source code management ([[#SCM SCM]]) tools.

; DAG : <<Anchor(DAG)>>
	Directed acyclic graph. The [[#commit_object commit objects]] form a directed acyclic
	graph, because they have parents (directed), and the graph of commit
	objects is acyclic (there is no [[#chain chain]] which begins and ends with the
	same [[#object object]]).

; dangling object : <<Anchor(dangling_object)>>
	An [[#unreachable_object unreachable object]] which is not
	[[#reachable reachable]] even from other unreachable objects; a
	dangling object has no references to it from any
	reference or [[#object object]] in the [[#repository repository]].

; detached HEAD : <<Anchor(detached_HEAD)>>
	Normally the [[#HEAD HEAD]] stores the name of a
	[[#branch branch]].  However, git also allows you to 
	[[#checkout check out]] an arbitrary [[#commit commit]] that isn't necessarily the tip of any
	particular branch.  In this case HEAD is said to be "detached".

; dircache : <<Anchor(dircache)>>
	You are *waaaaay* behind. See [[#index index]].

; directory : <<Anchor(directory)>>
	The list you get with "ls" :-)

; dirty : <<Anchor(dirty)>>
	A [[#working_tree working tree]] is said to be <i>dirty</i> if it contains modifications
	which have not been [[#commit committed]] to the current [[#branch branch]].

; ent : <<Anchor(ent)>>
	Favorite synonym to "[[#tree-ish tree-ish]]" by some total geeks. See
	[[WikiPedia:Ent_(Middle-earth)|Ent (Middle-earth) at Wikipedia]] for an in-depth
	explanation. Avoid this term, not to confuse people.
	It should be not used anymore.

; evil merge : <<Anchor(evil_merge)>>
        An evil merge is a [[#merge merge]] that introduces changes that do not appear
        in any [[#parent parent]].

; fast forward : <<Anchor(fast_forward)>>
	A <i>fast-forward</i> is a special type of [[#merge merge]] where you have
	a [[#revision revision]] and you are "merging" another [[#branch branch]]'s changes
	that happen to be a descendant of what you have.

	In such these cases, you do not make a new merge [[#commit_object commit]] but
	instead just update to his revision. This will happen
	frequently on a [[#tracking_branch tracking branch]] of a [[#remote_repository remote repository]].

; fetch : <<Anchor(fetch)>>
	<i>Fetching a [[#branch branch]]</i> means to get the [[#branch branch]]'s 
        [[#head_ref head ref]] from a [[#remote_repository remote repository]], 
        to find out which [[#object objects]] are missing from the local 
        [[#object_database object database]], and to get them, too.

	See also: [http://www.kernel.org/pub/software/scm/git/docs/git-fetch.html git-fetch(1)].

; file system : <<Anchor(file_system)>>
	[[Linus Torvalds]] originally designed git to be a user space file
	system, i.e. the infrastructure to hold files and directories.
	That ensured the efficiency and speed of git.

; git archive : <<Anchor(git_archive)>>
	Synonym for [[#repository repository]] (for arch people).

; grafts : <<Anchor(graft)>><<Anchor(grafts)>>
	Grafts enables two otherwise different lines of development to
	be joined together by recording fake ancestry information for
	[[#commit commits]]. This way you can make [[Git]] pretend the set of [[#parent parents]] 
        a [[#commit commit]] has is different from what was recorded when the commit was created.
	Configured via the '`.git/info/grafts`' file.

	See also: [[GraftPoint]]

; hash : <<Anchor(hash)>>
	In git's context, synonym to [[#object_name object name]].

; head : <<Anchor(head)>>
	A [[#ref named reference]] to the [[#commit commit]] at the tip of a
	[[#branch branch]].  Heads are stored in
	'`$GIT_DIR/refs/heads/`', except when using packed refs. (See
	[http://www.kernel.org/pub/software/scm/git/docs/git-pack-refs.html git-pack-refs(1)].)

; HEAD : <<Anchor(HEAD)>>
	The current [[#branch branch]].  In more detail: Your [[#working_tree working tree]]
	is normally derived from the state of the tree
	referred to by HEAD.  HEAD is a (symbolic) reference to one of the
	[[#head heads]] in your repository, except when using a
	[[#detached_HEAD detached HEAD]], in which case it may
	reference an arbitrary commit.

; head ref : <<Anchor(head_ref)>>
	A synonym for [[#head head]].

; hook : <<Anchor(hook)>>
	During the normal execution of several git commands,
	call-outs are made to optional scripts that allow
	a developer to add functionality or checking.
	Typically, the <i>hooks</i> allow for a command to be pre-verified
	and potentially aborted, and allow for a post-notification
	after the operation is done.

	The hook scripts are found in the `$GIT_DIR/hooks/` directory,
	and are enabled by simply making them executable.

        See also: [http://www.kernel.org/pub/software/scm/git/docs/hooks.html Hooks used by git].

; index : <<Anchor(index)>>
	A collection of files with stat information, whose contents are
	stored as [[#object objects]]. The index is a stored version of your 
        [[#working_tree working tree]]. Truth be told, it can also contain 
        a second, and even a third version of a working tree, which are used
        when [[#merge merging]].

        See also: [[IndexFile]]

; index entry : <<Anchor(index_entry)>>
	The information regarding a particular file, stored in the [[#index index]].
	An index entry can be unmerged, if a [[#merge merge]] was started, but not
	yet finished (i.e. if the index contains multiple versions of
	that file).

; loose object : <<Anchor(loose_object)>>
	An object stored by itself in a file (as opposed to being packed together with other objects to save space).

; master : <<Anchor(master)>>
	The default development [[#branch branch]]. Whenever you create a git
	[[#repository repository]], a branch named "master" is created, and becomes
	the active branch. In most cases, this contains the local
	development, though that is purely conventional and not required.

; merge : <<Anchor(merge)>>
	<i>As a verb:</i> To bring the contents of another
	[[#branch branch]] (possibly from an external
	[[#repository repository]]) into the current branch.  In the
	case where the merged-in branch is from a different repository,
	this is done by first [[#fetch fetching]] the remote branch
	and then merging the result into the current branch.  This
	combination of fetch and merge operations is called a
	[[#pull pull]].  Merging is performed by an automatic process
	that identifies changes made since the branches diverged, and
	then applies all those changes together.  In cases where changes
	conflict, manual intervention may be required to complete the
	merge.  See also [http://www.kernel.org/pub/software/scm/git/docs/git-merge.html git-merge(1)]

	<i>As a noun:</i> unless it is a [[#fast_forward fast forward]], a
	successful merge results in the creation of a new [[#commit commit]]
	representing the result of the merge, and having as
	[[#parent parents]] the tips of the merged [[#branch branches]].
	This commit is referred to as a "merge commit", or sometimes just as a
	"merge".

; object : <<Anchor(object)>>
	The unit of storage in git. It is uniquely identified by
	the [[#SHA1 SHA1]] of its contents. Consequently, an object can not
	be changed.

; object database : <<Anchor(object_database)>>
	Stores a set of "[[#object objects]]", and an individual [[#object object]] is identified
	by its [[#object_name object name]]. The objects usually live in `$GIT_DIR/objects/`.

; object identifier : <<Anchor(object_identifier)>>
	Synonym for [[#object_name object name]].

; object name : <<Anchor(object_name)>>
	The unique identifier of an [[#object object]]. The [[#hash hash]] of the object's contents
	using the [[WikiPedia:SHA_hash_functions|Secure Hash Algorithm 1]] and usually 
        represented by the 40 character hexadecimal encoding of the hash of the object 
        (possibly followed by a white space).

; object type : <<Anchor(object_type)>>
	One of the identifiers "[[#commit commit]]","[[#tree tree]]","[[#tag tag]]" and "[[#blob blob]]" describing
	the type of an [[#object object]].

; octopus : <<Anchor(octopus)>>
	To [[#merge merge]] more than two [[#branch branches]]. Also denotes an intelligent
	predator.

; origin : <<Anchor(origin)>>
	The default upstream [[#repository repository]]. Most projects have
	at least one upstream project which they track. By default
	'origin' is used for that purpose. New upstream updates
	will be fetched into remote [[#tracking_branch tracking branches]] named
	origin/name-of-upstream-branch, which you can see using
	"`git branch -r`".

	<i>Historical:</i> Before separate remotes layout become default, 'origin' was
	default upstream [[#tracking_branch tracking branch]]
	(usually for [[#master master]] branch; the rest of remote [[#branch branches]]
	were mapped 1:1 directly into local branches).  New upstream updates (from '[[#master master]]')
	were [[#fetch fetched]] into this branch; you should never commit
	to it yourself.

; pack : <<Anchor(pack)>>
	A set of [[#object objects]] which have been compressed into one file (to save
	space or to transmit them efficiently).

; pack index : <<Anchor(pack_index)>>
	The list of identifiers, and other information, of the [[#object objects]] in a
	[[#pack pack]], to assist in efficiently accessing the contents of a pack.

; parent : <<Anchor(parent)>>
	A [[#commit_object commit object]] contains a (possibly empty) list of the logical
	predecessor(s) in the line of development, i.e. its <i>parents</i>. Ancestry information
        can be changed (faked) using [[#graft grafts]].

; pickaxe : <<Anchor(pickaxe)>>
	The term <i>pickaxe</i> refers to an option to the diffcore routines
	that help select changes that add or delete a given text string.
	With the `--pickaxe-all` option, it can be used to view the
	full [[#changeset changeset]] that introduced or removed, say, a particular
	line of text.  See [http://www.kernel.org/pub/software/scm/git/docs/git-diff.html git-diff(1)].

; plumbing : <<Anchor(plumbing)>>
	Cute name for [[#core_git core git]].

; porcelain : <<Anchor(porcelain)>>
	Cute name for programs and program suites depending on [[#core_git core git]],
	presenting a high level access to core git. [[Porcelain|Porcelains]] expose
	more of a [[#SCM SCM]] interface than the [[#plumbing plumbing]].

; pull : <<Anchor(pull)>>
	<i>Pulling a [[#branch branch]]</i> means to [[#fetch fetch]] it and [[#merge merge]] it. See also [http://www.kernel.org/pub/software/scm/git/docs/git-pull.html git-pull(1)].

; push : <<Anchor(push)>>
	<i>Pushing a [[#branch branch]]</i> means to get the branch's [[#head_ref head ref]] from 
        a [[#remote_repository remote repository]] , find out if it is an ancestor to the branch's local
	head ref is a direct, and in that case, putting all [[#object objects]], which
	are [[#reachable reachable]] from the local head ref, and which are missing from
	the remote repository, into the remote [[#object_database object database]], and updating
	the remote head ref. If the remote head is not an ancestor to the
	local [[#head head]], the push fails.

; reachable : <<Anchor(reachable)>>
	All of the ancestors of a given [[#commit commit]] are said to be
	"<i>reachable</i>" from that commit. More
	generally, one [[#object object]] is reachable from
	another if we can reach the one from the other by a [[#chain chain]]
	that follows [[#tag tags]] to whatever they tag,
	[[#commit_object commits]] to their parents or trees, and
	[[#tree_object trees]] to the trees or [[#blob_object blobs]]
	that they contain.

; rebase : <<Anchor(rebase)>>
	To reapply a series of changes from a [[#branch branch]] to a
	different base, and reset the [[#head head]] of that branch
	to the result.

        See also [http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html git-rebase(1)]

; ref : <<Anchor(ref)>>
	A 40-byte hex representation of a [[#SHA1 SHA1]] or a name that denotes
	a particular [[#object object]]. These may be stored in `$GIT_DIR/refs/`.

; refspec : <<Anchor(refspec)>>
	A <i>refspec</i> is used by [[#fetch fetch]] and [[#push push]] to describe the mapping
	between remote [[#ref ref]] and local [[#ref ref]].  They are combined with
	a colon in the format <code><nowiki><src>:<dst></nowiki></code>, preceded by an optional
	plus sign, <code><nowiki>+</nowiki></code>.  For example:
	<pre><nowiki>
$ git fetch $URL refs/heads/master:refs/heads/origin</nowiki></pre>
	means "grab the master branch head from the $URL and store
	it as my origin branch head".
	And <pre><nowiki>
$ git push $URL refs/heads/master:refs/heads/to-upstream</nowiki></pre>
	means "publish my master branch head as to-upstream master head
	at $URL".

        See also [http://www.kernel.org/pub/software/scm/git/docs/git-push.html git-push(1)]

; repository : <<Anchor(repository)>><<Anchor(remote_repository)>>
	A collection of [[#ref refs]] together with an [[#object_database object database]] containing
	all [[#object objects]], which are [[#reachable reachable]] from the refs, possibly accompanied
	by meta data from one or more [[#porcelain porcelains]]. A repository can
	share an object database with other repositories via "[[#alternate_object_database alternates]]".

; resolve : <<Anchor(resolve)>>
	The action of fixing up manually what a failed automatic [[#merge merge]]
	left behind.

; revision : <<Anchor(revision)>>
	A particular state of files and directories which was stored in
	the [[#object_database object database]]. It is referenced by a [[#commit_object commit object]].

; rewind : <<Anchor(rewind)>>
	To throw away part of the development, i.e. to assign the [[#head head]] to
	an earlier [[#revision revision]].

; SCM : <<Anchor(SCM)>>
	Source code management (tool).

; SHA1 : <<Anchor(SHA1)>>
	Synonym for [[#object_name object name]].

; shallow repository : <<Anchor(shallow_repository)>>
	A shallow [[#repository repository]] has an incomplete
	history some of whose [[#commit commits]] have [[#parent parents]] cauterized away (in other
	words, git is told to pretend that these commits do not have the
	parents, even though they are recorded in the [[#commit_object commit 	object]]). This is sometimes useful when you are interested only in the
	recent history of a project even though the real history recorded in the
	upstream is much larger. A shallow repository
	is created by giving the `--depth` option to [http://www.kernel.org/pub/software/scm/git/docs/git-clone.html git-clone(1)], and
	its history can be later deepened with [http://www.kernel.org/pub/software/scm/git/docs/git-fetch.html git-fetch(1)].

; symref : <<Anchor(symref)>>
	Symbolic reference: instead of containing the [[#SHA1 SHA1]]
	id itself, it is of the format '`ref: refs/some/thing`' and when
	referenced, it recursively dereferences to this reference.
	'[[#HEAD HEAD]]' is a prime example of a symref. Symbolic
	references are manipulated with the [http://www.kernel.org/pub/software/scm/git/docs/git-symbolic-ref.html git-symbolic-ref(1)]
	command.

; tag : <<Anchor(tag)>>
	A [[#ref ref]] pointing to a [[#tag_object tag]] or
	[[#commit_object commit object]]. In contrast to a [[#head head]],
	a tag is not changed by a [[#commit commit]]. Tags (not
	[[#tag_object tag objects]]) are stored in `$GIT_DIR/refs/tags/`. A
	git tag has nothing to do with a Lisp tag (which would be
	called an [[#object_type object type]] in git's context). A
	tag is most typically used to mark a particular point in the
	commit ancestry [[#chain chain]].

; tag object : <<Anchor(tag_object)>>
	An [[#object object]] containing a [[#ref ref]] pointing to another [[#object object]], which can
	contain a message just like a [[#commit_object commit object]]. It can also
	contain a (PGP) [[WikiPedia:Digital_signature|signature]], in which case it is called a "signed tag object".

; topic branch : <<Anchor(topic_branch)>>
	A regular git [[#branch branch]] that is used by a developer to
	identify a conceptual line of development.  Since branches
	are very easy and inexpensive, it is often desirable to
	have several small branches that each contain very well
	defined concepts or small incremental yet related changes.

; tracking branch : <<Anchor(tracking_branch)>>
	A regular git [[#branch branch]] that is used to follow changes from
	another [[#remote_repository repository]].  A tracking branch should not contain
	direct modifications or have local [[#commit commits]] made to it.
	A tracking branch can usually be identified as the
	right-hand-side ref in a [[#refspec refspec]].

; tree : <<Anchor(tree)>>
	Either a [[#working_tree working tree]], or a [[#tree_object tree object]] together with the
	dependent [[#blob blob]] and tree objects (i.e. a stored representation
	of a working tree).

; tree object : <<Anchor(tree_object)>>
	An [[#object object]] containing a list of file names and modes along with [[#ref refs]]
	to the associated [[#blob blob]] and/or [[#tree_object tree objects]]. A tree is equivalent
	to a [[#directory directory]].

; tree-ish : <<Anchor(tree-ish)>>
	A [[#ref ref]] pointing to either a [[#commit_object commit object]], a [[#tree_object tree object]], or a
	[[#tag_object tag object]] pointing to a tag or commit or tree object.

; unmerged index : <<Anchor(unmerged_index)>>
	An [[#index index]] which contains [[#merge unmerged]] [[#index_entry index entries]].

; unreachable object : <<Anchor(unreachable_object)>>
	An [[#object object]] which is not [[#reachable reachable]] from a
	[[#branch branch]], [[#tag tag]], or any other reference.

; working tree : <<Anchor(working_tree)>>
	The tree of actual checked out files.  The working tree is
	normally equal to the [[#HEAD HEAD]] plus any local changes
	that you have made but not yet committed.

	The set of files and directories currently being worked on,
	i.e. you can work in your working tree without using git at all.

----
= References =
* [http://www.kernel.org/pub/software/scm/git/docs/glossary.html HTML] version of GIT Glossary.
* Glossary [http://www.kernel.org/git/?p=git/git.git;a=blob;hb=HEAD;f=Documentation/glossary.txt source], HEAD version (in [[AsciiDoc]]).

----
[[CategoryGitDocumentation]]

__NOTOC__