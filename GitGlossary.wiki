This list is sorted alphabetically:

; alternate object database : <<Anchor(alternate_object_database)>>
	Via the <i>alternates mechanism</i>, a [[#repository repository]] can inherit part of its
	[[#object_database object database]] from another object database, which is called
	"alternate".

; bare repository : <<Anchor(bare_repository)>>
	A <i>bare [[#repository repository]]</i> is normally an appropriately named
	directory with a `.git` suffix that does not have a
	[[#working_tree locally checked-out copy]] of any of the files under revision
	control.  That is, all of the git administrative and
	control files that would normally be present in the
	hidden `.git` sub-directory are directly present in
	the `repository.git` directory instead, and no other files
	are present and checked out.  Usually publishers of public
	repositories make bare repositories available.

; blob object : <<Anchor(blob_object)>><<Anchor(blob)>>
	Untyped [[#object object]], e.g. the contents of a file.

; branch : <<Anchor(branch)>>
	A non-cyclical graph of revisions, i.e. the complete history of
	a particular [[#revision revision]], which is called the branch [[#head head]]. The
	branch heads are stored in `$GIT_DIR/refs/heads/`.

        See also: [[BranchesInGit]].

; cache : <<Anchor(cache)>>
	Obsolete for: [[#index index]].

; chain : <<Anchor(chain)>>
	A list of objects, where each [[#object object]] in the list contains a
	reference to its successor (for example, the successor of a [[#commit commit]]
	could be one of its [[#parent parents]]).

; changeset : <<Anchor(changeset)>>
	BitKeeper/cvsps speak for "[[#commit commit]]". Since git does not store
	changes, but states, it really does not make sense to use
	the term "changesets" with git.

; checkout : <<Anchor(checkout)>>
	The action of updating the [[#working_tree working tree]] to a [[#revision revision]] which was
	stored in the [[#object_database object database]].

; cherry-picking : <<Anchor(cherry-picking)>>
	In [[#SCM SCM]] jargon, <i>"cherry pick"</i> means to choose a subset of
	changes out of a series of changes (typically commits)
	and record them as a new series of changes on top of
	different codebase.  In GIT, this is performed by
	"`git cherry-pick`" command to extract the change
	introduced by an existing [[#commit commit]] and to record it based
	on the tip of the current [[#branch branch]] as a new [[#commit commit]].

        See also: [http://www.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html git-cherry-pick(1)]

; clean : <<Anchor(clean)>>
	A [[#working_tree working tree]] is <i>clean</i>, if it corresponds to the [[#revision revision]]
	referenced by the current [[#head head]].  Also see "[[#dirty dirty]]".

; commit : <<Anchor(commit)>>
	As a verb: The action of storing the current state of the [[#index index]] in the
	[[#object_database object database]]. The result is a [[#revision revision]].

	As a noun: Short hand for [[#commit_object commit object]].

; commit object : <<Anchor(commit_object)>>
	An [[#object object]] which contains the information about a particular
	[[#revision revision]], such as [[#parent parents]], committer, author, date and the
	[[#tree_object tree object]] which corresponds to the [[#directory top directory]] of the
	stored revision.

; core git : <<Anchor(core_git)>>
	Fundamental data structures and utilities of git. Exposes only
	limited source code management tools.

; DAG : <<Anchor(DAG)>>
	Directed acyclic graph. The [[#commit_object commit objects]] form a directed acyclic
	graph, because they have parents (directed), and the graph of commit
	objects is acyclic (there is no [[#chain chain]] which begins and ends with the
	same [[#object object]]).

; dircache : <<Anchor(dircache)>>
	You are *waaaaay* behind.

; dirty : <<Anchor(dirty)>>
	A [[#working_tree working tree]] is said to be <i>dirty</i> if it contains modifications
	which have not been committed to the current [[#branch branch]].

; directory : <<Anchor(directory)>>
	The list you get with "ls" :-)

; ent : <<Anchor(ent)>>
	Favorite synonym to "[[#tree-ish tree-ish]]" by some total geeks. See
	[[WikiPedia:Ent_(Middle-earth)|Ent at Wikipedia]] for an in-depth
	explanation.

; fast forward : <<Anchor(fast_forward)>>
	A <i>fast-forward</i> is a special type of [[#merge merge]] where you have
	a [[#revision revision]] and you are "merging" another [[#branch branch]]'s changes
	that happen to be a descendant of what you have.

	In such these cases, you do not make a new merge [[#commit_object commit]] but
	instead just update to his revision. This will happen
	frequently on a [[#tracking_branch tracking branch]] of a [[#remote_repository remote repository]].

; fetch : <<Anchor(fetch)>>
	<i>Fetching a [[#branch branch]]</i> means to get the [[#branch branch]]'s 
        [[#head_ref head ref]] from a [[#remote_repository remote repository]], 
        to find out which [[#object objects]] are missing from the local 
        [[#object_database object database]], and to get them, too.

; file system : <<Anchor(file_system)>>
	[[Linus Torvalds]] originally designed git to be a user space file
	system, i.e. the infrastructure to hold files and directories.
	That ensured the efficiency and speed of git.

; git archive : <<Anchor(git_archive)>>
	Synonym for [[#repository repository]] (for arch people).

; graft : <<Anchor(graft)>>
	Also known as [[GraftPoint]], enable two otherwise different lines of development to
	be joined together. It works by letting users record fake ancestry information for
	[[#commit commits]]. This way you can make [[Git]] pretend the set of [[#parent parents]] 
        a [[#commit commit]] has is different from what was recorded when the commit was created.

; hash : <<Anchor(hash)>>
	In git's context, synonym to [[#object_name object name]].

; head : <<Anchor(head)>>
	The top of a [[#branch branch]]. It contains a [[#ref ref]] to the corresponding
	[[#commit_object commit object]].

; head ref : <<Anchor(head_ref)>>
	A [[#ref ref]] pointing to a [[#head head]]. Often, this is abbreviated to "head".
	Head refs are stored in `$GIT_DIR/refs/heads/`.

; hook : <<Anchor(hook)>>
	During the normal execution of several git commands,
	call-outs are made to optional scripts that allow
	a developer to add functionality or checking.
	Typically, the <i>hooks</i> allow for a command to be pre-verified
	and potentially aborted, and allow for a post-notification
	after the operation is done.

	The hook scripts are found in the `$GIT_DIR/hooks/` directory,
	and are enabled by simply making them executable.

        See also: [http://www.kernel.org/pub/software/scm/git/docs/hooks.html Hooks used by git].

; index : <<Anchor(index)>>
	A collection of files with stat information, whose contents are
	stored as [[#object objects]]. The index is a stored version of your 
        [[#working_tree working tree]]. Truth be told, it can also contain 
        a second, and even a third version of a working tree, which are used
        when [[#merge merging]].

        See also: [[IndexFile]]

; index entry : <<Anchor(index_entry)>>
	The information regarding a particular file, stored in the [[#index index]].
	An index entry can be unmerged, if a [[#merge merge]] was started, but not
	yet finished (i.e. if the index contains multiple versions of
	that file).

; master : <<Anchor(master)>>
	The default development [[#branch branch]]. Whenever you create a git
	[[#repository repository]], a branch named "master" is created, and becomes
	the active branch. In most cases, this contains the local
	development, though that is purely conventional and not required.

; merge : <<Anchor(merge)>>
	To <i>merge branches</i> means to try to accumulate the changes since a
	common ancestor and apply them to the first [[#branch branch]]. An automatic
	merge uses heuristics to accomplish that. Evidently, an automatic
	merge can fail.

        See also [http://www.kernel.org/pub/software/scm/git/docs/git-merge.html git-merge(1)]

; object : <<Anchor(object)>>
	The unit of storage in git. It is uniquely identified by
	the [[#SHA1 SHA1]] of its contents. Consequently, an object can not
	be changed.

; object database : <<Anchor(object_database)>>
	Stores a set of "[[#object objects]]", and an individual [[#object object]] is identified
	by its [[#object_name object name]]. The objects usually live in `$GIT_DIR/objects/`.

; object identifier : <<Anchor(object_identifier)>>
	Synonym for [[#object_name object name]].

; object name : <<Anchor(object_name)>>
	The unique identifier of an [[#object object]]. The [[#hash hash]] of the object's contents
	using the [[WikiPedia:SHA_hash_functions|Secure Hash Algorithm 1]] and usually 
        represented by the 40 character hexadecimal encoding of the hash of the object 
        (possibly followed by a white space).

; object type : <<Anchor(object_type)>>
	One of the identifiers "[[#commit commit]]","[[#tree tree]]","[[#tag tag]]" and "[[#blob blob]]" describing
	the type of an [[#object object]].

; octopus : <<Anchor(octopus)>>
	To [[#merge merge]] more than two [[#branch branches]]. Also denotes an intelligent
	predator.

; origin : <<Anchor(origin)>>
	The default upstream [[#tracking_branch tracking branch]]. Most projects have at
	least one upstream project which they track. By default
	'origin' is used for that purpose.  New upstream updates (from '[[#master master]]')
	will be [[#fetch fetched]] into this branch; you should never commit
	to it yourself.

; pack : <<Anchor(pack)>>
	A set of [[#object objects]] which have been compressed into one file (to save
	space or to transmit them efficiently).

; pack index : <<Anchor(pack_index)>>
	The list of identifiers, and other information, of the [[#object objects]] in a
	[[#pack pack]], to assist in efficiently accessing the contents of a pack.

; parent : <<Anchor(parent)>>
	A [[#commit_object commit object]] contains a (possibly empty) list of the logical
	predecessor(s) in the line of development, i.e. its <i>parents</i>. Ancestry information
        can be changed (faked) using [[#graft grafts]].

; pickaxe : <<Anchor(pickaxe)>>
	The term <i>pickaxe</i> refers to an option to the diffcore routines
	that help select changes that add or delete a given text string.
	With the `--pickaxe-all` option, it can be used to view the
	full [[#changeset changeset]] that introduced or removed, say, a particular
	line of text.  See [http://www.kernel.org/pub/software/scm/git/docs/git-diff.html git-diff(1)].

; plumbing : <<Anchor(plumbing)>>
	Cute name for [[#core_git core git]].

; porcelain : <<Anchor(porcelain)>>
	Cute name for programs and program suites depending on [[#core_git core git]],
	presenting a high level access to core git. [[Porcelain|Porcelains]] expose
	more of a [[#SCM SCM]] interface than the [[#plumbing plumbing]].

; pull : <<Anchor(pull)>>
	<i>Pulling a [[#branch branch]]</i> means to [[#fetch fetch]] it and [[#merge merge]] it.

; push : <<Anchor(push)>>
	<i>Pushing a [[#branch branch]]</i> means to get the branch's [[#head_ref head ref]] from 
        a [[#remote_repository remote repository]] , find out if it is an ancestor to the branch's local
	head ref is a direct, and in that case, putting all [[#object objects]], which
	are reachable from the local head ref, and which are missing from
	the remote repository, into the remote [[#object_database object database]], and updating
	the remote head ref. If the remote head is not an ancestor to the
	local [[#head head]], the push fails.

; reachable : <<Anchor(reachable)>>
	An [[#object object]] is <i>reachable</i> from a [[#ref ref]]/[[#commit commit]]/[[#tree tree]]/[[#tag tag]], if there is a
	[[#chain chain]] leading from the latter to the former.

; rebase : <<Anchor(rebase)>>
	To clean a [[#branch branch]] by starting from the [[#head head]] of the main line of
	development ("[[#master master]]"), and reapply the (possibly [[#cherry-picking cherry-picked]])
	changes from that branch.

        See also [http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html git-rebase(1)]

; ref : <<Anchor(ref)>>
	A 40-byte hex representation of a [[#SHA1 SHA1]] or a name that denotes
	a particular [[#object object]]. These may be stored in `$GIT_DIR/refs/`.

; refspec : <<Anchor(refspec)>>
	A <i>refspec</i> is used by [[#fetch fetch]] and [[#push push]] to describe the mapping
	between remote [[#ref ref]] and local [[#ref ref]].  They are combined with
	a colon in the format <code><nowiki><src>:<dst></nowiki></code>, preceded by an optional
	plus sign, <code><nowiki>+</nowiki></code>.  For example:
	<pre><nowiki>
$ git fetch $URL refs/heads/master:refs/heads/origin</nowiki></pre>
	means "grab the master branch head from the $URL and store
	it as my origin branch head".
	And <pre><nowiki>
$ git push $URL refs/heads/master:refs/heads/to-upstream</nowiki></pre>
	means "publish my master branch head as to-upstream master head
	at $URL".

        See also [http://www.kernel.org/pub/software/scm/git/docs/git-push.html git-push(1)]

; repository : <<Anchor(repository)>><<Anchor(remote_repository)>>
	A collection of [[#ref refs]] together with an [[#object_database object database]] containing
	all [[#object objects]], which are reachable from the refs, possibly accompanied
	by meta data from one or more [[#porcelain porcelains]]. A repository can
	share an object database with other repositories via "[[#alternate_object_database alternates]]".

; resolve : <<Anchor(resolve)>>
	The action of fixing up manually what a failed automatic [[#merge merge]]
	left behind.

; revision : <<Anchor(revision)>>
	A particular state of files and directories which was stored in
	the [[#object_database object database]]. It is referenced by a [[#commit_object commit object]].

; rewind : <<Anchor(rewind)>>
	To throw away part of the development, i.e. to assign the [[#head head]] to
	an earlier [[#revision revision]].

; SCM : <<Anchor(SCM)>>
	Source code management (tool).

; SHA1 : <<Anchor(SHA1)>>
	Synonym for [[#object_name object name]].

; topic branch : <<Anchor(topic_branch)>>
	A regular git [[#branch branch]] that is used by a developer to
	identify a conceptual line of development.  Since branches
	are very easy and inexpensive, it is often desirable to
	have several small branches that each contain very well
	defined concepts or small incremental yet related changes.

; tracking branch : <<Anchor(tracking_branch)>>
	A regular git [[#branch branch]] that is used to follow changes from
	another [[#remote_repository repository]].  A tracking branch should not contain
	direct modifications or have local [[#commit commits]] made to it.
	A tracking branch can usually be identified as the
	right-hand-side ref in a <code><nowiki>Pull:</nowiki></code> [[#refspec refspec]].

; tree object : <<Anchor(tree_object)>>
	An [[#object object]] containing a list of file names and modes along with [[#ref refs]]
	to the associated [[#blob blob]] and/or [[#tree_object tree objects]]. A tree is equivalent
	to a [[#directory directory]].

; tree : <<Anchor(tree)>>
	Either a [[#working_tree working tree]], or a [[#tree_object tree object]] together with the
	dependent [[#blob blob]] and tree objects (i.e. a stored representation
	of a working tree).

; tree-ish : <<Anchor(tree-ish)>>
	A [[#ref ref]] pointing to either a [[#commit_object commit object]], a [[#tree_object tree object]], or a
	[[#tag_object tag object]] pointing to a tag or commit or tree object.

; tag object : <<Anchor(tag_object)>>
	An [[#object object]] containing a [[#ref ref]] pointing to another [[#object object]], which can
	contain a message just like a commit object. It can also
	contain a (PGP) [[WikiPedia:Digital_signature|signature]], in which case it is called a "signed
	tag object".

; tag : <<Anchor(tag)>>
	A [[#ref ref]] pointing to a [[#tag_object tag]] or [[#commit_object commit object]]. In contrast to a [[#head head]],
	a tag is not changed by a [[#commit commit]]. Tags (not tag objects) are
	stored in `$GIT_DIR/refs/tags/`. A git tag has nothing to do with
	a Lisp tag (which is called [[#object_type object type]] in git's context).
	A tag is most typically used to mark a particular point in the
	commit ancestry chain.

; unmerged index : <<Anchor(unmerged_index)>>
	An [[#index index]] which contains [[#merge unmerged]] [[#index_entry index entries]].

; working tree : <<Anchor(working_tree)>>
	The set of files and directories currently being worked on,
	i.e. you can work in your working tree without using git at all.

----
= References =
* [http://www.kernel.org/pub/software/scm/git/docs/glossary.html HTML] version of GIT Glossary.
* Glossary [http://www.kernel.org/git/?p=git/git.git;a=blob;hb=HEAD;f=Documentation/glossary.txt source], HEAD version (in [[AsciiDoc]]).

----
[[CategoryGitDocumentation]]

__NOTOC__