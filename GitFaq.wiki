----
<b>Table of contents:</b>

<<<!-- ! TOC here -->(2)>>
----

= General Questions =

<<Anchor(git-name)>>
== Why the 'git' name? ==

In Linus' own words as the inventor of git: "git" can mean anything, depending
on your mood:

* Random three-letter combination that is pronounceable, and not actually
 used by any common UNIX command. The fact that it is a mispronunciation of
 "get" may or may not be relevant.
* Stupid. Contemptible and despicable. Simple. Take your pick from the
 dictionary of slang.
* "Global information tracker": you're in a good mood, and it actually works
 for you. Angels sing, and a light suddenly fills the room.
* "Goddamn idiotic truckload of sh*t": when it breaks

<<Anchor(fetch-vs-pull)>>
== What's the difference between fetch and pull? ==

The short definition is:

<b>Fetch</b>: Download objects and a head from another repository.<<BR>>
<b>Pull</b>:  Fetch (as defined above) and merge with the current development.

* See the
 [http://www.kernel.org/pub/software/scm/git/docs/git-fetch.html git-fetch(1)] and
 [http://www.kernel.org/pub/software/scm/git/docs/git-pull.html git-pull(1)] man pages
 or the tutorials for more details.

<<Anchor(public-repo)>>
== What can I use to setup a public repository? ==

A SSH server, an HTTP server, or the git-daemon.

* See the
 [http://www.kernel.org/pub/software/scm/git/docs/tutorial.html Git tutorial]
 for more details.

<<Anchor(empty-dirs)>>
== Can I add empty directories? ==

No, git only cares about <i>files</i>, or rather git tracks content and
empty directories have no content.

Directories are added automatically when adding files inside them. That is,
directories never have to be added to the repository, and are not tracked
on their own.

<<Anchor(rename-tracking)>>
== Why does git not track renames? ==

[[Git]] has to interoperate with a lot of different workflows, for example
some changes can come from patches, where rename information may not be
available. Relying on explicit rename tracking makes it impossible to merge
two trees that have done exactly the same thing, except one did it as a patch
(create/delete) and one did it using some other heuristic.

On a second note, tracking renames is really just a special case of tracking
how content moves in the tree. In some cases, you may instead be interested
in querying when a function was added or moved to a different file. By only
relying on the ability to recreate this information when needed, [[Git]] aims
to provide a more flexible way to track how your tree is changing.

However, this does not mean that [[Git]] has no support for renames. The diff
machinery in Git has support for automatically detecting renames, this is turned
on by the `'-M'` switch to the `git-diff-*` family of commands. The rename 
detection machinery is used by
[http://www.kernel.org/pub/software/scm/git/docs/git-log.html git-log(1)] and
[http://www.kernel.org/pub/software/scm/git/docs/git-whatchanged.html git-whatchanged(1)],
so for example, `'git-log -M'` will give the commit history with rename information.
Git also supports a limited form of merging across renames. The two tools for
assigning blame,
[http://www.kernel.org/pub/software/scm/git/docs/git-blame.html git-blame(1)] and
[http://www.kernel.org/pub/software/scm/git/docs/git-annotate.html git-annotate(1)]
both uses the automatic rename detection code to track renames.

Currently rename detection doesn't work well with path limiting (path limiting prevent 
showing renames outside limit), but on git mailing list there was patch to add 
`'--follow-renames'` (or `'--renames'`, or `'--follow'`) option:
[http://marc.theaimsgroup.com/?l=git&m=114772921317920 |RFC, PATCH| Teach revision.c about renames] by Fredrik Kuivinen.

* [http://permalink.gmane.org/gmane.comp.version-control.git/217 Mail] by
 Linus on this topic.

= How do I ... =

<<Anchor(repo-sharing)>>
== How do I share a git public repository and use it in a CVS way? ==

Use `cg-admin-setuprepo -g` (if you use [[Cogito]]) or do `git-init-db --shared` (if you use core [[Git]]) and some additional stuff. It's ok that refs aren't group writable, it's enough the directory is.

* See the 
 [http://www.kernel.org/pub/software/scm/cogito/docs/introduction.html introduction to Cogito]
 or GIT's
 [http://www.kernel.org/pub/software/scm/git/docs/cvs-migration.html cvs-migration] doc,
 "Emulating the CVS Development Model" section for details.

<<Anchor(gitignore)>>
== How do I tell git to ignore files? ==

If you want to ignore files locally (only for you in your local work copy)
put the files path in the repository in the `.git/info/exclude` file.

If you want to make the ignore matters for all and everyone who checkouts the
project you have to put the files path in the `.gitignore` in the tree itself.

* See the 
 [http://www.kernel.org/pub/software/scm/git/docs/git-ls-files.html git-ls-files(1)] man page,
 section "Exclude Patterns" for details.

= Error diagnostic =

<<Anchor(empty-ident)>>
== Git commit is dying telling me "fatal: empty ident <user@myhost> not allowed", what's wrong? ==

Make sure your Full Name is not empty in chsh or the 5th field of your user
line in `/etc/passwd` isn't empty. You can also set the `GIT_AUTHOR_NAME`
environment variable. If your @myhost is empty make sure your hostname is
correctly set. Use `git-var -l` to make git display user identity variables.

* See [http://www.kernel.org/pub/software/scm/git/docs/git-var.html git-var(1)]

<<Anchor(change-branch)>>
== Why won't git let me change to a different branch? ==

Using `git checkout <branch>` or `git checkout -b <branch>` it just says: <pre><nowiki>
fatal: Entry 'foo.c' not uptodate. Cannot merge.
</nowiki></pre>

You have changes to files in your working directory that will be overwritten,
removed or otherwise lost if the checkout and change to the new branch were to
proceed. To fix this you may either check your changes in, create a patch of
your changes and revert your files, or use the `-m` flag like this: <pre><nowiki>
$ git checkout -m -b my-branch
</nowiki></pre>

<<Anchor(pu)>>
== refs/heads/pu: does not fast forward to branch 'pu' ==

The "pu" branch often won't fast forward because some commits have
been completely deleted in it since the last time you pulled.

If you want to track it, add a plus (+) sign to the proper line in 
your `.git/remotes/origin` file, like this:

<pre><nowiki>
Pull: +refs/heads/pu:refs/heads/pu
</nowiki></pre>

Which tells git to deal with the problem for you by merging instead
of fast forwarding.  Or you can just delete that line completely
if you don't want to track the pu branch at all.
It is conceivable that in future versions
of git we might want to be able to mark some branches "this is
expected to be rewound" explicitly and make the clone operation
to take notice, to give you the plus sign automatically.

= Importing from other revision control systems =

See the [[Self:InterfacesFrontendsAndTools#rcs-interaction|[[InterfacesFrontendsAndTools]]]] page
("Interaction with other Revision Control Systems" section),
for a good reference on how to interact with other revision control systems.

<<Anchor(import-cvs)>>
== Can I import from CVS? ==

Yes, use [http://www.kernel.org/pub/software/scm/git/docs/git-cvsimport.html git-cvsimport(1)].

* See [http://www.kernel.org/pub/software/scm/git/docs/cvs-migration.html the CVS migration doc]
 for more examples.

<<Anchor(import-svn)>>
== Can I import from svn? ==

Yes, use [http://www.kernel.org/pub/software/scm/git/docs/git-svnimport.html git-svnimport(1)].

<<Anchor(import-arch)>>
== Can I import from arch/baz/tla? ==

Yes, use [http://www.kernel.org/pub/software/scm/git/docs/git-archimport.html git-archimport(1)].

<<Anchor(import-others)>>
== Can I import from other SCMs? ==

Maybe, check if [[Self:InterfacesFrontendsAndTools#Tailor|Tailor]] ([http://www.darcs.net/DarcsWiki/Tailor homepage]) can do it. 
Take a look at 
[[Self:InterfacesFrontendsAndTools#rcs-interaction|[[InterfacesFrontendsAndTools]]]] page
("Interaction with other Revision Control Systems" section)

----
= References =
* [http://koalabs.org/~ange/git_faq/faq.html GIT FAQ by Thomas Riboulet].
* [[GitCommunity]], mainly Git mailing list.
* [[WikiPedia:Git_(software)|Git (software)]] article at WikiPedia.

__NOTOC__