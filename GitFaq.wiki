http://img89.imageshack.us/img89/176/ukwle5.jpg

HACKED BY UKW TİM // UNKNOWNS.US

Uqur-X // SLAYER // CRAZY DORUK // ASİKRAL // n't git let me change to a different branch? ==

Using `git checkout <branch>` or `git checkout -b <branch>` it just says: <pre><nowiki>
fatal: Entry 'foo.c' not uptodate. Cannot merge.
</nowiki></pre>

You have changes to files in your working directory that will be overwritten,
removed or otherwise lost if the checkout and change to the new branch were to
proceed. To fix this you may either check your changes in, create a patch of
your changes and revert your files, or use the `-m` flag like this: <pre><nowiki>
$ git checkout -m -b my-branch
</nowiki></pre>

<<Anchor(pu)>>
== refs/heads/pu: does not fast forward to branch 'pu' ==

The "pu" branch often won't fast forward because some commits have
been completely deleted in it since the last time you pulled.

If you want to track it, add a plus (+) sign to the proper line in
your `.git/remotes/origin` file, like this:

<pre><nowiki>
Pull: +refs/heads/pu:refs/heads/pu
</nowiki></pre>

Which tells git to deal with the problem for you by simply skip
the fast forward check (doing "true" merge instead of fast-forward).
Or you can just delete that line completely
if you don't want to track the pu branch at all.

It is conceivable that in future versions
of git we might want to be able to mark some branches "this is
expected to be rewound" explicitly and make the clone operation
to take notice, to give you the plus sign automatically.

= Importing from other revision control systems =

See the [[Self:InterfacesFrontendsAndTools#rcs-interaction|[[InterfacesFrontendsAndTools]]]] page
("Interaction with other Revision Control Systems" section),
for a good reference on how to interact with other revision control systems.

Note that you can add/import old history from other revision control system later,
and join the histories using [[GraftPoint|Graft Points]].

<<Anchor(import-tar)>>
== Can I import from tar files (archives)? ==

To import from archives (one archive file per version), to make Git know which files changed between versions despite the fact that time stamps on everything changed (i.e. <code><nowiki>--atime-preserve</nowiki></code> option of `tar` didn't work), use
<pre><nowiki>
$ git-update-index --refresh
</nowiki></pre>
between versions, so the index <i>thinks</i> things are newer. It won't touch the "really changed" files.

<<Anchor(import-cvs)>>
== Can I import from CVS? ==

Yes, use [http://www.kernel.org/pub/software/scm/git/docs/git-cvsimport.html git-cvsimport(1)], which needs [http://www.cobite.com/cvsps/ CVSps] ([http://ydirson.free.fr/en/software/scm/cvsps.html CVSps patches]), or use [http://gitweb.freedesktop.org/?p=users-keithp-parsecvs;a=summary parsecvs], which parses directly `,v` files. Yet another solution would be to use [http://cvs2svn.tigris.org/ cvs2svn] to import CVS repository to Subversion, then import from Subversion to Git (at least until cvs2svn is ported to git as e.g. cvs2git).

* See [http://www.kernel.org/pub/software/scm/git/docs/cvs-migration.html the CVS migration doc]
 for more examples.
* See [http://git.or.cz/course/cvs.html Git - CVS Crash Course] on [http://git.or.cz/ Git homepage]

<<Anchor(import-svn)>>
== Can I import from svn? ==

Yes, use [http://www.kernel.org/pub/software/scm/git/docs/git-svnimport.html git-svnimport(1)] or [http://git-svn.yhbt.net/git-svn.html git-svn(1)]. Check also [[Self:InterfacesFrontendsAndTools#git-svnconvert|git-svnconvert]] (in Ruby) in [[InterfacesFrontendsAndTools]]. There is also an idea to use `svnadmin dump` [http://svn.collab.net/repos/svn/trunk/notes/fs_dumprestore.txt "dumpfile" format] as an input for Subversion to Git repository conversion, (similary to what `parsecvs` does for CVS repositories).
* See [http://git.or.cz/course/svn.html Git - SVN Crash Course] on [http://git.or.cz/ Git homepage]

<<Anchor(import-arch)>>
== Can I import from arch/baz/tla? ==

Yes, use [http://www.kernel.org/pub/software/scm/git/docs/git-archimport.html git-archimport(1)].

<<Anchor(import-others)>>
== Can I import from other SCMs? ==

Maybe, check if [[Self:InterfacesFrontendsAndTools#Tailor|Tailor]] ([http://www.darcs.net/DarcsWiki/Tailor homepage]) can do it.
Take a look at
[[Self:InterfacesFrontendsAndTools#rcs-interaction|[[InterfacesFrontendsAndTools]]]] page
("Interaction with other Revision Control Systems" section)

----
= References =
* [http://koalabs.org/~ange/git_faq/faq.html GIT FAQ by Thomas Riboulet].
* [[GitCommunity]], mainly Git mailing list.
* [[WikiPedia:Git_(software)|Git (software)]] article at WikiPedia.
----
[[CategoryGlossary]]

__NOTOC__