----
<b>Table of contents:</b>

<<<!-- ! TOC here -->(2)>>
----

= General Questions =

<<Anchor(git-name)>>
== Why the 'git' name? ==

In Linus' own words as the inventor of git: "git" can mean anything, depending
on your mood:

* Random three-letter combination that is pronounceable, and not actually
 used by any common UNIX command. The fact that it is a mispronunciation of
 "get" may or may not be relevant.
* Stupid. Contemptible and despicable. Simple. Take your pick from the
 dictionary of slang.
* "Global information tracker": you're in a good mood, and it actually works
 for you. Angels sing, and a light suddenly fills the room.
* "Goddamn idiotic truckload of sh*t": when it breaks

<<Anchor(fetch-vs-pull)>>
== What's the difference between fetch and pull? ==

The short definition is:

<b>Fetch</b>: Download objects and a head from another repository.<<BR>>
<b>Pull</b>:  Fetch (as defined above) and merge with the current development.

See the
[http://www.kernel.org/pub/software/scm/git/docs/git-fetch.html git-fetch(1)]
and
[http://www.kernel.org/pub/software/scm/git/docs/git-pull.html git-pull(1)]
man pages or the tutorials for more details.

<<Anchor(public-repo)>>
== What can I use to setup a public repository? ==

A SSH server, an HTTP server, or the git-daemon.

See the
[http://www.kernel.org/pub/software/scm/git/docs/tutorial.html Git tutorial]
for more details.

<<Anchor(empty-dirs)>>
== Can I add empty directories ==

No, git tracks <i>files</i> not directories, or rather git manages content and
empty directories have no content.

Directories are added automatically when adding files inside them. That is,
directories never have to be added to the repository, and are not tracked
on their own.

= How do I ... =

<<Anchor(repo-sharing)>>
== How do I share a git public repository and use it in a CVS way? ==

Use `cg-admin-setuprepo -g` (if you use [[Cogito]]) or do `git-init-db --shared` (if you use core [[Git]]) and some additional stuff. It's ok that refs aren't group writable, it's enough the directory is.

See the
[http://www.kernel.org/pub/software/scm/cogito/docs/introduction.html introduction to Cogito]
or GIT's
[http://www.kernel.org/pub/software/scm/git/docs/cvs-migration.html cvs-migration] doc,
"Emulating the CVS Development Model" section for details.

<<Anchor(gitignore)>>
== How do I tell git to ignore files? ==

If you want to ignore files locally (only for you in your local work copy)
put the files path in the repository in the `.git/info/exclude` file.

If you want to make the ignore matters for all and everyone who checkouts the
project you have to put the files path in the `.gitignore` in the tree itself.

See the [http://www.kernel.org/pub/software/scm/git/docs/git-ls-files.html git-ls-files(1)] man page, section "Exclude Patterns" for details.

= Error diagnostic =

<<Anchor(empty-ident)>>
== Git commit is dying telling me "fatal: empty ident <user@myhost> not allowed", what's wrong? ==

Make sure your Full Name is not empty in chsh or the 5th field of your user
line in `/etc/passwd` isn't empty. You can also set the `GIT_AUTHOR_NAME`
environment variable. If your @myhost is empty make sure your hostname is
correctly set. Use `git-var -l` to make git display user identity variables.

See [http://www.kernel.org/pub/software/scm/git/docs/git-var.html git-var(1)]

<<Anchor(change-branch)>>
== Why won't git let me change to a different branch? ==

Using `git checkout <branch>` or `git checkout -b <branch>` it just says: <pre><nowiki>
fatal: Entry 'foo.c' not uptodate. Cannot merge.
</nowiki></pre>

You have changes to files in your working directory that will be overwritten,
removed or otherwise lost if the checkout and change to the new branch were to
proceed. To fix this you may either check your changes in, create a patch of
your changes and revert your files, or use the `-m` flag like this: <pre><nowiki>
$ git checkout -m -b my-branch
</nowiki></pre>

= Importing from other revision control systems =

See the [[Self:InterfacesFrontendsAndTools#rcs-interaction|[[InterfacesFrontendsAndTools]]]] page
("Interaction with other Revision Control Systems" section),
for a good reference on how to interact with other revision control systems.

<<Anchor(import-cvs)>>
== Can I import from CVS? ==

Yes, use [http://www.kernel.org/pub/software/scm/git/docs/git-cvsimport.html git-cvsimport].

See [http://www.kernel.org/pub/software/scm/git/docs/cvs-migration.html the CVS migration doc]
for more examples.

<<Anchor(import-svn)>>
== Can I import from svn? ==

Yes, use [http://www.kernel.org/pub/software/scm/git/docs/git-svnimport.html git-svnimport].

<<Anchor(import-arch)>>
== Can I import from arch/baz/tla? ==

Yes, use [http://www.kernel.org/pub/software/scm/git/docs/git-archimport.html git-archimport].

<<Anchor(import-others)>>
== Can I import from other SCMs? ==

Maybe, check if [[Self:InterfacesFrontendsAndTools#Tailor|Tailor]] can do it.

----
= References =
* [http://koalabs.org/~ange/git_faq/faq.html GIT FAQ by Thomas Riboulet].
* [[GitCommunity]], mainly Git mailing list.

__NOTOC__