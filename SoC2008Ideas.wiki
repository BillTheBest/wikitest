We have not yet been accepted as GSoC project, but here go the
ideas in case we are...

<<<!-- ! TOC here -->(2)>>

= General Requirements =
All projects have the following basic requirements:

* Unless otherwise stated, projects will require programming in C, as nearly all of Git is written in C, for maximum speed and portability.
* All materials must be released under the [http://www.gnu.org/copyleft/gpl.html GNU Public License (GPL)], version 2.
* Individual students shall retain copyright on their works.
* Projects must be tracked and managed in Git, and published on [http://repo.or.cz].
* Weekly project status reports should be sent to the project's mentors.  Each status report should outline what was accomplished that week, any issues that prevented that week's goals from being completed, and your goals for the next week.  This will help you to break your project down into manageable chunks, and will also help the project's mentors to better support your efforts.

Interested students are encouraged to read the
[http://code.google.com/p/google-summer-of-code/wiki/AdviceforStudents Advice for GSoC Students Page],
as it has excellent suggestions that might help you to pick a
project and shape your proposal.

If your proposal is accepted by the Git Development Community
you will be expected to work on it full time during the summer.
Its cool if you want to take a week off for vacation, but remember
that Google is hiring you for the summer to help us improve Git.
That should be your focus.  Don't expect that you will be able to
work on your project for just 10 hours a week and then collect at
the end.

If your original proposal doesn't pan out or becomes too much of
a challenge, you should work with your mentor to help redefine it.
We really want to see every project succeed this summer, as there
is a great deal of interest in these projects from within the
user community.

Students can apply for the program at the
[http://code.google.com/soc/ Google Summer of Code website].
Please consider reviewing our [[SoC2008Template]] and answering
its questions as part of your application.

= New To Git? New To Open Source Development? =

A collection of smaller projects.  Pick one or two and get introduced
to the open source community!

== Make git-merge and helpers Builtins ==

We have generally found that the C version of a tool is more portable
and easier to maintain across systems, not to mention faster.

A lot of scripts have been converted already, but "merge" is the
big remaining chunk.

<b>Goal:</b> Replace git-merge and its helpers with C versions.
<<BR>><b>Language:</b> C
<<BR>><b>Mentor:</b> Johannes Schindelin (johannes.schindelin@gmx.de)
<<BR>><b>Suggested by:</b> Johannes Schindelin [http://article.gmane.org/gmane.comp.version-control.git/40801 on gmane]

== Better Windows support ==

We have a pretty good Windows support through msysGit, although it
has not been merged with "official" Git yet.  However, comparing
between the Windows and the Linux version on the same machine,
Windows' Git is still slower (even if it is way faster than, say,
Subversion).

There must be ways to avoid creating many processes, which is the
main reason scripts are slow (e.g. git-svn).

NOTE: A good knowledge of Windows performance tuning, and probably
of the Windows API in general, is required.

<b>Goal:</b> Make Git on Windows perform faster.
<<BR>><b>Language:</b> C
<<BR>><b>Mentor:</b>  Johannes Schindelin (johannes.schindelin@gmx.de)
<<BR>><b>Suggested by:</b> Johannes on this Wiki page

== Apply sparse To Fix Errors ==

Teach [http://kernel.org/pub/linux/kernel/people/josh/sparse/ sparse]
how to fix common errors, and then use sparse to actually fix them.
Perhaps more of a sparse project than a Git project.  The community
just wants to see Git improved, if sparse is improved at the same
time, double bonus points!  :-)

<b>Goal:</b> Fix existing errors in Git.
<<BR>><b>Language:</b> C
<<BR>><b>Mentor:</b>  Johannes Schindelin (johannes.schindelin@gmx.de)
<<BR>><b>Suggested by:</b> Johannes Schindelin [http://article.gmane.org/gmane.comp.version-control.git/40801 on gmane]

== Lazy clone / remote alternates ==

The idea here is to be able to remotely access objects from a network
based object server as needed, rather than having them all local.
This would make Git more approachable for very large projects,
especially in a more corporate LAN-user setting.

<b>Goal:</b> A working lazy clone prototype implementation that could be considered for inclusion, in a nice series of commits (separate  branch/fork)
<<BR>><b>Language:</b> C
<<BR>><b>Suggested mentor:</b> Jan Holesovsky, who submitted proof-of-concept patch for lazy clone

== Partial (subtree) checkout, or its generalization: sparse checkout ==

The idea is to checkout for example only the Documentation
subdirectory, work on it, but still commit the full tree. Some
workflows may be better suited to this type of usage than using
submodules. Optionally should include partial clone (not needed
objects not in repository).

<b>Goal:</b> A working partial checkout prototype implementation, with technical documentation.
<<BR>><b>Language:</b> C
<<BR>><b>Suggested mentors:</b>
* gitzilla (sent proposal),
* Nguyen Thai Ngoc Duy (pclouds), proposed to implements it

== Gitweb caching ==

Implementing very smart caching in gitweb, to avoid the thundering
herd problem on kernel.org whenever a repository gets updated, or
at least support for caching engines in the form of generating
proper Last-Modified: and ETag: headers, and responding to
If-Modified-Since: and If-None-Match: requests, cheaply.

Perhaps becoming the gitweb maintainer could come of it, or at
least the gitweb admin for kernel.org (sorely needed).

<b>Goal:</b> At minimum, port kernel.org's caching to mainline (git's) gitweb
<<BR>><b>Language:</b> Perl, HTML, perhaps [[JavaScript]]
<<BR>><b>Suggested mentors:</b>
* John 'Warthog9' Hawley (wrote caching for kernel.org's gitweb)
* Petr Baudis (repo.or.cz admin)
* Lars Hjemli (cgit author, git web interface in C, with caching)
* Jakub Narebski (gitweb contributor)

== Git / Subversion Interoperability ==

The idea here is implement something in Git that speaks the
Subversion protocol on the wire, but uses Git as the backend
storage. (This would be like the existing git-cvsserver.)

There are two potential approaches:

# git-svnserver
# write a backend for Subversion

<b>Goal:</b> To be able to access git repository, at minimum read-only, from a Subversion client, at least svn CLI.
<<BR>><b>Language:</b> Open for proposal.
<<BR>><b>Suggested mentors:</b>
* Eric Wong (git-svn author)
* Matthias Urlichs (git-svnimport author)
* Sam Vilain (wrote this proposal: http://utsl.gen.nz/git/git-svnserver.txt)
* Julian Phillips (has a partial python implementation!  at http://git.q42.co.uk/w/git_svn_server.git)
* Subversion project member t.b.c. as a co-mentor

= Larger Projects =

The following projects are probably more suited to the
junio/senior/graduate students.  Pick one and really make it shine.

== [[GitTorrent]] ==

This is a P2P method for distributing git repositories, which
will allow for faster downloads, lower startup overheads, etc.
For use for sites such as git.kernel.org, repo.or.cz, etc.

<b>Goal:</b> to implement the GTP/0.1 standard
<<BR>><b>Language:</b> Open for proposal.
<<BR>><b>Suggested mentors:</b>
* Jonas Fonseca (designed the original protocol)
* Sam Vilain (designed the <i>commit reel</i> concept and has many parts prototyped in Perl at http://utsl.gen.nz/gitweb/?p=VCS-Git-Torrent)

== Implement git-sequencer ==

git-am, git-rebase, git-rebase -m, and git-rebase -i are all roughly
performing the same task, yet do it through almost four different
code paths.  They are also all written in Bourne shell script,
which limits their performance and portability, especially to
non-POSIX systems (such as Windows).

The idea of git-sequencer is to take the "todo" file format used
by git-rebase -i and extend it to also support applying patches
split out of mbox files, and implement the "todo" processor in C.
Frontends like git-am, git-rebase, etc. can then setup the "todo"
script and pass it to git-sequencer, which does the actual patch
application, editing, etc.

<b>Goal:</b> implement a common rebase/am backend.
<<BR>><b>Language:</b> C
<<BR>><b>Suggested menors:</b>
* Shawn Pearce (gsoc@spearce.org)
* Johannes Schindelin (johannes.schindelin@gmx.de)
<b>Suggested by:</b> Junio C Hamano [http://kerneltrap.org/mailarchive/git/2008/2/17/886714 on kerneltrap]

== Git Eclipse Plugin ==

Extend the currently-under-development
[http://repo.or.cz/w/egit.git/ Eclipse plugin]
so that it is actually useful for daily development work.  The plugin
can currently read a Git repository (but not quite fast enough)
and can write new history to the repository, but a lot of Eclipse
user interfaces still need to be built to allow an end-user to
actually interact with peers on a project.

Particularly of note is the plugin's missing functionality to push
changes to another repository, and to merge changes locally.

This was also one of
[http://wiki.eclipse.org/index.php/Google_Summer_of_Code_2007_Ideas Eclipse SoC2007 Ideas]
(<i>More work on git support</i>).

<b>Language:</b> Java (Eclipse API, SWT API)
<<BR>><b>Goal:</b> Push changes over native Git protocol, or merge changes locally, or both!.
<<BR>><b>Mentor:</b>  Shawn O. Pearce (gsoc@spearce.org)
<<BR>><b>Suggested by:</b> Jakub Narebski [http://article.gmane.org/gmane.comp.version-control.git/41031 on gmane]
<<BR>><b>See:</b> [[EclipsePluginWishlist]]

== Continue "libification" work ==

<i>Description copied from [[SoC2007Ideas]]:</i>

Make more parts of libgit.a reentrant by removing static variables,
avoid dying e.g. when malloc() fails, etc. Most of Git was
written with the run-once-and-exit design pattern. This makes it
difficult/impossible to embed core Git data access routines within
a scripting language such as Perl or Python, or to embed it in a
longer-running server such as an Apache module. Existing code must
be modified to return errors rather than terminating the process,
and memory leaks need to be plugged.

<b>Goal:</b> In addition to the general goal of being able to link libgit.a into external programs that are not exclusively git utilities and have the git code be usable as a well-behaved library, one specific goal given on the [[Soc2007Ideas]] page was: Usable Perl binding that a future gitweb.cgi could take advantage of, rather than repeatedly forking Git processes.
<<BR>><b>Language:</b> C
<<BR>><b>See:</b> The existing work on [http://repo.or.cz/w/git/libgit-gsoc.git libgit-thin] may be relevant.
<<BR>><b>Suggested mentors:</b>
* Shawn Pearce (gsoc@spearce.org)

== Implement pack v4/v5 for higher compression ==

Although Git's packfile format offers incredible disk space savings
over other VCS systems, we already know we can still do better.
A prototype design dubbed 'packv4' has been floating around the
Git world for almost two years, but has not been fully implemented
for inclusion in a shipping release.

At this point the implementation for 'packv4' would need to be
rewritten from scratch, as much of the affected parts of the core Git
code have been modified to support other enhancements.  A student
with a strong interest in data compression could really get into
this project and take it to places we have never thought possible.

<b>Goal:</b> Save at least 10% on current packv2 for benchmark
repositories (linux-2.6, git, mozilla, gcc) and boost runtime ~10%.
<<BR>><b>Language:</b> C
<<BR>><b>Suggested mentors:</b>
* Shawn Pearce (gsoc@spearce.org)

== git-cheetah, a TortoiseCVS Lookalike ==

There is already a basic "shell extension" providing "Git Bash Here"
and "Git Gui Here" functions in the context menu.  But it still
needs a lot of work, to be as helpful as TortoiseCVS.

And when this work is done, let's enhance the code base to provide
the same extension to Dolphin, konqueror, Finder, etc

<b>Language:</b> C/COM.
<<BR>><b>Goal:</b> Have a fully functional TortoiseCVS lookalike for Git.
<<BR>><b>Mentor:</b> Johannes Schindelin (johannes.schindelin@gmx.de).
<<BR>><b>Suggested by:</b> Johannes Schindelin

= Other Resources =

[[SoC2008Application]]

__NOTOC__