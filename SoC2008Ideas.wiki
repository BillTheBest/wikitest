We have not yet been accepted as GSoC project, but here go the ideas in case we are...

= General Requirements =
All projects have the following basic requirements:

* Unless otherwise stated, projects will require programming in C, as nearly all of Git is written in C, for maximum speed and portability.
* All materials must be released under the [http://www.gnu.org/copyleft/gpl.html GNU Public License (GPL)], version 2.
* Individual students shall retain copyright on their works.
* Projects must be tracked and managed in Git, and published on [http://repo.or.cz].
* Weekly project status reports should be sent to the project's mentors.  Each status report should outline what was accomplished that week, any issues that prevented that week's goals from being completed, and your goals for the next week.  This will help you to break your project down into manageable chunks, and will also help the project's mentors to better support your efforts.

Interested students are encouraged to read the [http://code.google.com/p/google-summer-of-code/wiki/AdviceforStudents Advice for GSoC Students Page], as it has excellent suggestions that might help you to pick a project and shape your proposal.

If your proposal is accepted by the Git Development Community you will be expected to work on it full time during the summer.  Its cool if you want to take a week off for vacation, but remember that Google is hiring you for the summer to help us improve Git.  That should be your focus.  Don't expect that you will be able to work on your project for just 10 hours a week and then collect at the end.

If your original proposal doesn't pan out or becomes too much of a challenge, you should work with your mentor to help redefine it.  We really want to see every project succeed this summer, as there is a great deal of interest in these projects from within the user community.

Students can apply for the program at the [http://code.google.com/soc/ Google Summer of Code website].  [Maybe we need something like the SoC2007Template again?]

= New To Git? New To Open Source Development? =

A collection of smaller projects.  Pick one or two and get introduced to the open source community!

== Make git-merge and helpers Builtins ==
We have generally found that the C version of a tool is more portable and easier to maintain across systems, not to mention faster.

A lot of scripts have been converted already, but "merge" is the big remaining chunk.
<<BR>><b>Goal:</b> Replace git-merge and its helpers with C versions.
<<BR>><b>Mentor:</b> Johannes Schindelin (johannes.schindelin@gmx.de)
<<BR>><b>Suggested by:</b> Johannes Schindelin [http://article.gmane.org/gmane.comp.version-control.git/40801 on gmane]

== Better Windows support ==
We have a pretty good Windows support through msysGit, although it has not been merged with "official" Git yet.  However, comparing between the Windows and the Linux version on the same machine, Windows' Git is still slower (even if it is way faster than, say, Subversion).

There must be ways to avoid creating many processes, which is the main reason scripts are slow (e.g. git-svn).

NOTE: A good knowledge of Windows performance tuning, and probably of the Windows API in general, is required.
<<BR>><b>Goal:</b> Make Git on Windows perform faster.
<<BR>><b>Mentor:</b>  Johannes Schindelin (johannes.schindelin@gmx.de)
<<BR>><b>Suggested by:</b> Johannes on this Wiki page

== Apply sparse To Fix Errors ==
Teach [http://kernel.org/pub/linux/kernel/people/josh/sparse/ sparse] how to fix common errors, and then use sparse to actually fix them.  Perhaps more of a sparse project than a Git project.  The community just wants to see Git improved, if sparse is improved at the same time, double bonus points!  :-)
<<BR>><b>Goal:</b> Fix existing errors in Git.
<<BR>><b>Mentor:</b>  Johannes Schindelin (johannes.schindelin@gmx.de)
<<BR>><b>Suggested by:</b> Johannes Schindelin [http://article.gmane.org/gmane.comp.version-control.git/40801 on gmane]

= Larger Projects =
The following projects are probably more suited to the junio/senior/graduate students.  Pick one and really make it shine.

== git-cheetah, a TortoiseCVS Lookalike ==
There is already a basic "shell extension" providing "Git Bash Here" and "Git Gui Here" functions in the context menu.

But it still needs a lot of work, to be as helpful as TortoiseCVS.

And when this work is done, let's enhance the code base to provide the same extension to Dolphin, konqueror, Finder, etc
<<BR>><b>Language:</b> C/COM.
<<BR>><b>Goal:</b> Have a fully functional TortoiseCVS lookalike for Git.
<<BR>><b>Mentor:</b> Johannes Schindelin (johannes.schindelin@gmx.de).
<<BR>><b>Suggested by:</b> Johannes Schindelin

= Other Resources =

[We probably need something like SoC2007Application again?].

__NOTOC__